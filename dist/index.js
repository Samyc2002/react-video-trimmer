!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],t):t((e=e||self).reactVideoTrimmer={},e.React,e.PropTypes)}(this,function(e,ie,y){"use strict";var x="default"in ie?ie.default:ie;function l(e,t,n,r,o,i,a){try{var u=e[i](a),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}function m(u){return function(){var e=this,a=arguments;return new Promise(function(t,n){var r=u.apply(e,a);function o(e){l(r,t,n,o,i,"next",e)}function i(e){l(r,t,n,o,i,"throw",e)}o(void 0)})}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?d(e):t}y=y&&y.hasOwnProperty("default")?y.default:y;function o(r,e){var o=1<arguments.length&&void 0!==e?e:"ArrayBuffer";return new Promise(function(e,t){var n=new FileReader;n["readAs"+o](r),n.onload=function(){return e(n.result)},n.onerror=function(e){return t(e)}})}function v(){}function i(e){return new Blob([new Uint8Array(e,0,e.byteLength)],{type:"video/webm",name:"video.webm"})}function b(e){var t=e.className;return x.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},x.createElement("path",{d:"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"}),x.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}))}function g(e){var t=e.className;return x.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},x.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),x.createElement("path",{d:"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z"}))}function P(e){var t=e.className;return x.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},x.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),x.createElement("path",{d:"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"}))}function w(e){var t=e.className;return x.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},x.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),x.createElement("path",{d:"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z"}))}function O(e){var t=e.className;return x.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},x.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),x.createElement("path",{d:"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"}))}function j(e){var t=e.className;return x.createElement("svg",{className:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 42 42"},x.createElement("path",{d:"M21 37c-4.3 0-8.3-1.7-11.3-4.7S5 25.3 5 21c0-3 .8-6 2.5-8.5C9 10 11.2 8 13.8 6.7l1.3 2.7c-2.1 1.1-3.9 2.7-5.2 4.7-1.3 2.1-2 4.5-2 6.9 0 7.2 5.8 13 13 13s13-5.8 13-13c0-2.5-.7-4.9-2-6.9s-3.1-3.6-5.2-4.7L28 6.7c2.8 1.3 5 3.3 6.5 5.8C36.2 15 37 18 37 21c0 4.3-1.7 8.3-4.7 11.3S25.3 37 21 37z"}))}function E(e){var t=b;switch(e.name){case"music":t=g;break;case"play":t=P;break;case"pause":t=w;break;case"replay":t=O;break;case"spin":t=j;break;default:t=b}return x.createElement(t,{className:"rvt-icon rat-icon-".concat(e.name," ").concat(e.className).trim()})}function k(i,a,u,l){return new(u=u||Promise)(function(e,t){function n(e){try{o(l.next(e))}catch(e){t(e)}}function r(e){try{o(l.throw(e))}catch(e){t(e)}}function o(t){t.done?e(t.value):new u(function(e){e(t.value)}).then(n,r)}o((l=l.apply(i,a||[])).next())})}function S(n,r){var o,i,a,e,u={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return e={next:t(0),throw:t(1),return:t(2)},"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(o)throw new TypeError("Generator is already executing.");for(;u;)try{if(o=1,i&&(a=2&t[0]?i.return:t[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,t[1])).done)return a;switch(i=0,a&&(t=[2&t[0],a.value]),t[0]){case 0:case 1:a=t;break;case 4:return u.label++,{value:t[1],done:!1};case 5:u.label++,i=t[1],t=[0];continue;case 7:t=u.ops.pop(),u.trys.pop();continue;default:if(!(a=0<(a=u.trys).length&&a[a.length-1])&&(6===t[0]||2===t[0])){u=0;continue}if(3===t[0]&&(!a||t[1]>a[0]&&t[1]<a[3])){u.label=t[1];break}if(6===t[0]&&u.label<a[1]){u.label=a[1],a=t;break}if(a&&u.label<a[2]){u.label=a[2],u.ops.push(t);break}a[2]&&u.ops.pop(),u.trys.pop();continue}t=r.call(n,u)}catch(e){t=[6,e],i=0}finally{o=a=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}}function _(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function D(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(_(arguments[t]));return e}E.propTypes={name:y.string};var T=new Map([["avi","video/avi"],["gif","image/gif"],["ico","image/x-icon"],["jpeg","image/jpeg"],["jpg","image/jpeg"],["mkv","video/x-matroska"],["mov","video/quicktime"],["mp4","video/mp4"],["pdf","application/pdf"],["png","image/png"],["zip","application/zip"],["doc","application/msword"],["docx","application/vnd.openxmlformats-officedocument.wordprocessingml.document"]]);function R(e,t){var n=function(e){var t=e.name;if(t&&-1!==t.lastIndexOf(".")&&!e.type){var n=t.split(".").pop().toLowerCase(),r=T.get(n);r&&Object.defineProperty(e,"type",{value:r,writable:!1,configurable:!1,enumerable:!0})}return e}(e);if("string"!=typeof n.path){var r=e.webkitRelativePath;Object.defineProperty(n,"path",{value:"string"==typeof t?t:"string"==typeof r&&0<r.length?r:e.name,writable:!1,configurable:!1,enumerable:!0})}return n}var t=[".DS_Store","Thumbs.db"];function ae(t){return k(this,void 0,void 0,function(){return S(this,function(e){return[2,function(e){return!!e.dataTransfer}(t)&&t.dataTransfer?function(n,r){return k(this,void 0,void 0,function(){var t;return S(this,function(e){switch(e.label){case 0:return n.items?(t=L(n.items).filter(function(e){return"file"===e.kind}),"drop"!==r?[2,t]:[4,Promise.all(t.map(C))]):[3,2];case 1:return[2,M(function n(e){return e.reduce(function(e,t){return D(e,Array.isArray(t)?n(t):[t])},[])}(e.sent()))];case 2:return[2,M(L(n.files).map(function(e){return R(e)}))]}})})}(t.dataTransfer,t.type):function(e){return(function(e){return null!==e}(e.target)&&e.target.files?L(e.target.files):[]).map(function(e){return R(e)})}(t)]})})}function M(e){return e.filter(function(e){return-1===t.indexOf(e.name)})}function L(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];t.push(r)}return t}function C(e){if("function"!=typeof e.webkitGetAsEntry)return F(e);var t=e.webkitGetAsEntry();return t&&t.isDirectory?I(t):F(e)}function F(e){var t=e.getAsFile();if(!t)return Promise.reject(e+" is not a File");var n=R(t);return Promise.resolve(n)}function A(t){return k(this,void 0,void 0,function(){return S(this,function(e){return[2,t.isDirectory?I(t):function(r){return k(this,void 0,void 0,function(){return S(this,function(e){return[2,new Promise(function(n,t){r.file(function(e){var t=R(e,r.fullPath);n(t)},function(e){t(e)})})]})})}(t)]})})}function I(e){var t=e.createReader();return new Promise(function(a,u){var l=[];!function i(){var e=this;t.readEntries(function(o){return k(e,void 0,void 0,function(){var t,n,r;return S(this,function(e){switch(e.label){case 0:if(o.length)return[3,5];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Promise.all(l)];case 2:return t=e.sent(),a(t),[3,4];case 3:return n=e.sent(),u(n),[3,4];case 4:return[3,6];case 5:r=Promise.all(o.map(A)),l.push(r),i(),e.label=6;case 6:return[2]}})})},function(e){u(e)})}()})}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function V(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function N(e,t){return e(t={exports:{}},t.exports),t.exports}var B=V(N(function(e){function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o;e.exports=(o={},r.m=n=[function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t){var n=e.exports={version:"2.5.0"};"number"==typeof __e&&(__e=n)},function(e,t,n){e.exports=!n(4)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(32)("wks"),o=n(9),i=n(0).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){var h=n(0),v=n(2),m=n(8),b=n(22),g=n(10),P=function(e,t,n){var r,o,i,a,u=e&P.F,l=e&P.G,c=e&P.S,s=e&P.P,f=e&P.B,p=l?h:c?h[t]||(h[t]={}):(h[t]||{}).prototype,y=l?v:v[t]||(v[t]={}),d=y.prototype||(y.prototype={});for(r in l&&(n=t),n)i=((o=!u&&p&&void 0!==p[r])?p:n)[r],a=f&&o?g(i,h):s&&"function"==typeof i?g(Function.call,i):i,p&&b(p,r,i,e&P.U),y[r]!=i&&m(y,r,a),s&&d[r]!=i&&(d[r]=i)};h.core=v,P.F=1,P.G=2,P.S=4,P.P=8,P.B=16,P.W=32,P.U=64,P.R=128,e.exports=P},function(e,t,n){var r=n(16),o=n(21);e.exports=n(3)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var i=n(24);e.exports=function(r,o,e){if(i(r),void 0===o)return r;switch(e){case 1:return function(e){return r.call(o,e)};case 2:return function(e,t){return r.call(o,e,t)};case 3:return function(e,t,n){return r.call(o,e,t,n)}}return function(){return r.apply(o,arguments)}}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(28),o=Math.min;e.exports=function(e){return 0<e?o(r(e),9007199254740991):0}},function(e,t,n){t.__esModule=!0,t.default=function(e,t){if(e&&t){var n=Array.isArray(t)?t:t.split(","),r=e.name||"",o=e.type||"",i=o.replace(/\/.*$/,"");return n.some(function(e){var t=e.trim();return"."===t.charAt(0)?r.toLowerCase().endsWith(t.toLowerCase()):t.endsWith("/*")?i===t.replace(/\/.*$/,""):o===t})}return!0},n(14),n(34)},function(e,t,n){n(15),e.exports=n(2).Array.some},function(e,t,n){var r=n(7),o=n(25)(3);r(r.P+r.F*!n(33)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(17),o=n(18),i=n(20),a=Object.defineProperty;t.f=n(3)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(1);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){e.exports=!n(3)&&!n(4)(function(){return 7!=Object.defineProperty(n(19)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(1),o=n(0).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var o=n(1);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var i=n(0),a=n(8),u=n(23),l=n(9)("src"),r=Function.toString,c=(""+r).split("toString");n(2).inspectSource=function(e){return r.call(e)},(e.exports=function(e,t,n,r){var o="function"==typeof n;o&&(u(n,"name")||a(n,"name",t)),e[t]!==n&&(o&&(u(n,l)||a(n,l,e[t]?""+e[t]:c.join(String(t)))),e===i?e[t]=n:r?e[t]?e[t]=n:a(e,t,n):(delete e[t],a(e,t,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[l]||r.call(this)})},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var g=n(10),P=n(26),w=n(27),O=n(12),r=n(29);e.exports=function(f,e){var p=1==f,y=2==f,d=3==f,h=4==f,v=6==f,m=5==f||v,b=e||r;return function(e,t,n){for(var r,o,i=w(e),a=P(i),u=g(t,n,3),l=O(a.length),c=0,s=p?b(e,l):y?b(e,0):void 0;c<l;c++)if((m||c in a)&&(o=u(r=a[c],c,i),f))if(p)s[c]=o;else if(o)switch(f){case 3:return!0;case 5:return r;case 6:return c;case 2:s.push(r)}else if(h)return!1;return v?-1:d||h?h:s}}},function(e,t,n){var r=n(5);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(11);e.exports=function(e){return Object(r(e))}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(0<e?r:n)(e)}},function(e,t,n){var r=n(30);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){var r=n(1),o=n(31),i=n(6)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){var r=n(5);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(0),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,n){var r=n(4);e.exports=function(e,t){return!!e&&r(function(){t?e.call(null,function(){},1):e.call(null)})}},function(e,t,n){n(35),e.exports=n(2).String.endsWith},function(e,t,n){var r=n(7),a=n(12),u=n(36),l="".endsWith;r(r.P+r.F*n(38)("endsWith"),"String",{endsWith:function(e){var t=u(this,e,"endsWith"),n=1<arguments.length?arguments[1]:void 0,r=a(t.length),o=void 0===n?r:Math.min(a(n),r),i=String(e);return l?l.call(t,i,o):t.slice(o-i.length,o)===i}})},function(e,t,n){var r=n(37),o=n(11);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(1),o=n(5),i=n(6)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(6)("match");e.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=13))}));function ue(e,t){return"application/x-moz-file"===e.type||B(e,t)}function le(e,t,n){return e.size<=t&&e.size>=n}function ce(e){return"function"==typeof e.isPropagationStopped?e.isPropagationStopped():void 0!==e.cancelBubble&&e.cancelBubble}function se(e){return e.dataTransfer?Array.prototype.some.call(e.dataTransfer.types,function(e){return"Files"===e||"application/x-moz-file"===e}):!!e.target&&!!e.target.files}function fe(e){e.preventDefault()}function pe(e){var t=0<arguments.length&&void 0!==e?e:window.navigator.userAgent;return function(e){return-1!==e.indexOf("MSIE")||-1!==e.indexOf("Trident/")}(t)||function(e){return-1!==e.indexOf("Edge/")}(t)}function ye(){for(var e=arguments.length,o=new Array(e),t=0;t<e;t++)o[t]=arguments[t];return function(t){for(var e=arguments.length,n=new Array(1<e?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return o.some(function(e){return!ce(t)&&e&&e.apply(void 0,[t].concat(n)),ce(t)})}}function de(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function he(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function W(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function ve(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?W(n,!0).forEach(function(e){me(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):W(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function me(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function U(e){return(U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function be(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],0<=t.indexOf(n)||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],0<=t.indexOf(n)||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var z=ie.forwardRef(function(e,t){var n=e.children,r=function(){function t(){x.current&&(F({type:"openDialog"}),x.current.value=null,x.current.click())}function e(){I&&setTimeout(function(){x.current&&(x.current.files.length||(F({type:"closeDialog"}),"function"==typeof P&&P()))},300)}var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},a=n.accept,r=n.disabled,p=void 0!==r&&r,o=n.getFilesFromEvent,i=void 0===o?ae:o,u=n.maxSize,l=void 0===u?1/0:u,c=n.minSize,s=void 0===c?0:c,f=n.multiple,y=void 0===f||f,d=n.onDragEnter,h=n.onDragLeave,v=n.onDragOver,m=n.onDrop,b=n.onDropAccepted,g=n.onDropRejected,P=n.onFileDialogCancel,w=n.preventDropOnDocument,O=void 0===w||w,j=n.noClick,E=void 0!==j&&j,k=n.noKeyboard,S=void 0!==k&&k,_=n.noDrag,D=void 0!==_&&_,T=n.noDragEventsBubbling,R=void 0!==T&&T,M=ie.useRef(null),x=ie.useRef(null),L=he(ie.useReducer(Pe,ge),2),C=L[0],F=L[1],A=C.isFocused,I=C.isFileDialogActive,V=C.draggedFiles;ie.useEffect(function(){return window.addEventListener("focus",e,!1),function(){window.removeEventListener("focus",e,!1)}},[x,I,P]);function N(e){M.current&&M.current.contains(e.target)||(e.preventDefault(),G.current=[])}var B=ie.useCallback(function(e){M.current&&M.current.isEqualNode(e.target)&&(32!==e.keyCode&&13!==e.keyCode||(e.preventDefault(),t()))},[M,x]),W=ie.useCallback(function(){F({type:"focus"})},[]),U=ie.useCallback(function(){F({type:"blur"})},[]),z=ie.useCallback(function(){E||(pe()?setTimeout(t,0):t())},[x,E]),G=ie.useRef([]);ie.useEffect(function(){return O&&(document.addEventListener("dragover",fe,!1),document.addEventListener("drop",N,!1)),function(){O&&(document.removeEventListener("dragover",fe),document.removeEventListener("drop",N))}},[M,O]);function H(e){return p?null:e}function K(e){return S?null:H(e)}function q(e){return D?null:H(e)}var Y=ie.useCallback(function(t){t.preventDefault(),t.persist(),J(t),-1===G.current.indexOf(t.target)&&(G.current=[].concat(de(G.current),[t.target])),se(t)&&Promise.resolve(i(t)).then(function(e){ce(t)&&!R||(F({draggedFiles:e,isDragActive:!0,type:"setDraggedFiles"}),d&&d(t))})},[i,d,R]),$=ie.useCallback(function(e){if(e.preventDefault(),e.persist(),J(e),e.dataTransfer)try{e.dataTransfer.dropEffect="copy"}catch(e){}return se(e)&&v&&v(e),!1},[v,R]),X=ie.useCallback(function(t){t.preventDefault(),t.persist(),J(t);var e=G.current.filter(function(e){return e!==t.target&&M.current&&M.current.contains(e)});0<(G.current=e).length||(F({isDragActive:!1,type:"setDraggedFiles",draggedFiles:[]}),se(t)&&h&&h(t))},[M,h,R]),Z=ie.useCallback(function(r){r.preventDefault(),r.persist(),J(r),G.current=[],F({type:"reset"}),se(r)&&Promise.resolve(i(r)).then(function(e){if(!ce(r)||R){var t=[],n=[];e.forEach(function(e){ue(e,a)&&le(e,l,s)?t.push(e):n.push(e)}),!y&&1<t.length&&n.push.apply(n,de(t.splice(0))),F({acceptedFiles:t,rejectedFiles:n,type:"setFiles"}),m&&m(t,n,r),0<n.length&&g&&g(n,r),0<t.length&&b&&b(t,r)}})},[y,a,s,l,i,m,b,g,R]),J=function(e){R&&e.stopPropagation()},Q=ie.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,r=e.onKeyDown,o=e.onFocus,i=e.onBlur,a=e.onClick,u=e.onDragEnter,l=e.onDragOver,c=e.onDragLeave,s=e.onDrop,f=be(e,["refKey","onKeyDown","onFocus","onBlur","onClick","onDragEnter","onDragOver","onDragLeave","onDrop"]);return ve(me({onKeyDown:K(ye(r,B)),onFocus:K(ye(o,W)),onBlur:K(ye(i,U)),onClick:H(ye(a,z)),onDragEnter:q(ye(u,Y)),onDragOver:q(ye(l,$)),onDragLeave:q(ye(c,X)),onDrop:q(ye(s,Z))},n,M),p||S?{}:{tabIndex:0},{},f)}},[M,B,W,U,z,Y,$,X,Z,S,D,p]),ee=ie.useCallback(function(e){e.stopPropagation()},[]),te=ie.useMemo(function(){return function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=e.refKey,n=void 0===t?"ref":t,r=e.onChange,o=e.onClick,i=be(e,["refKey","onChange","onClick"]);return ve({},me({accept:a,multiple:y,type:"file",style:{display:"none"},onChange:H(ye(r,Z)),onClick:H(ye(o,ee)),autoComplete:"off",tabIndex:-1},n,x),{},i)}},[x,a,y,Z,p]),ne=V.length,re=y||ne<=1,oe=0<ne&&function(e,t,n,r){return e.every(function(e){return ue(e,t)&&le(e,n,r)})}(V,a,l,s);return ve({},C,{isDragAccept:oe,isDragReject:0<ne&&(!oe||!re),isFocused:A&&!p,getRootProps:Q,getInputProps:te,rootRef:M,inputRef:x,open:H(t)})}(be(e,["children"])),o=r.open,i=be(r,["open"]);return ie.useEffect(function(){return"function"==typeof t?t({open:o}):"object"===U(t)&&null!==t&&(t.current={open:o}),function(){"function"==typeof t?t(null):"object"===U(t)&&null!==t&&(t.current=null)}},[t]),x.createElement(ie.Fragment,null,n(ve({},i,{open:o})))});z.displayName="Dropzone";var ge={isFocused:!(z.propTypes={children:y.func,accept:y.oneOfType([y.string,y.arrayOf(y.string)]),multiple:y.bool,preventDropOnDocument:y.bool,noClick:y.bool,noKeyboard:y.bool,noDrag:y.bool,noDragEventsBubbling:y.bool,minSize:y.number,maxSize:y.number,disabled:y.bool,getFilesFromEvent:y.func,onFileDialogCancel:y.func,onDragEnter:y.func,onDragLeave:y.func,onDragOver:y.func,onDrop:y.func,onDropAccepted:y.func,onDropRejected:y.func}),isFileDialogActive:!1,isDragActive:!1,isDragAccept:!1,isDragReject:!1,draggedFiles:[],acceptedFiles:[],rejectedFiles:[]};function Pe(e,t){switch(t.type){case"focus":return ve({},e,{isFocused:!0});case"blur":return ve({},e,{isFocused:!1});case"openDialog":return ve({},e,{isFileDialogActive:!0});case"closeDialog":return ve({},e,{isFileDialogActive:!1});case"setDraggedFiles":var n=t.isDragActive;return ve({},e,{draggedFiles:t.draggedFiles,isDragActive:n});case"setFiles":return ve({},e,{acceptedFiles:t.acceptedFiles,rejectedFiles:t.rejectedFiles});case"reset":return ve({},e,{isFileDialogActive:!1,isDragActive:!1,draggedFiles:[]});default:return e}}function G(n){function o(e){return Math.round(e/1e6)}var e=ie.useCallback(function(e){if(e.length){var t=e[0];(n.onFileSelected||v)(t)}},[]),i=n.maxSize||10000024,a=n.minSize||0;return x.createElement(z,{onDrop:e,maxSize:i,minSize:a,accept:"video/*"},function(e){var t=e.getRootProps,n=e.getInputProps,r=e.isDragActive;return x.createElement("div",u({},t(),{className:"rvt-file-picker"}),x.createElement(E,{name:"music"}),x.createElement("input",n()),r?x.createElement("p",null,"Drop the video here ..."):x.createElement(x.Fragment,null,x.createElement("p",null,"Drag 'n' drop a video here, or click to select one"),x.createElement("p",null,x.createElement("small",null,"(",o(a)," - ",o(i),"MB)"))))})}function H(e){var t=e.children;return x.createElement("div",{className:"rvt-status"},t)}var K=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DEPRECATED_CONFIG_PROPS=t.defaultProps=t.propTypes=void 0;var n,r=(n=y)&&n.__esModule?n:{default:n};var o=r.default.string,i=r.default.bool,a=r.default.number,u=r.default.array,l=r.default.oneOfType,c=r.default.shape,s=r.default.object,f=r.default.func,p={url:l([o,u,s]),playing:i,loop:i,controls:i,volume:a,muted:i,playbackRate:a,width:l([o,a]),height:l([o,a]),style:s,progressInterval:a,playsinline:i,pip:i,light:l([i,o]),wrapper:l([o,f,c({render:f.isRequired})]),config:c({soundcloud:c({options:s,preload:i}),youtube:c({playerVars:s,embedOptions:s,preload:i}),facebook:c({appId:o}),dailymotion:c({params:s,preload:i}),vimeo:c({playerOptions:s,preload:i}),file:c({attributes:s,tracks:u,forceVideo:i,forceAudio:i,forceHLS:i,forceDASH:i,hlsOptions:s,hlsVersion:o,dashVersion:o}),wistia:c({options:s}),mixcloud:c({options:s}),twitch:c({options:s})}),onReady:f,onStart:f,onPlay:f,onPause:f,onBuffer:f,onBufferEnd:f,onEnded:f,onError:f,onDuration:f,onSeek:f,onProgress:f,onEnablePIP:f,onDisablePIP:f};t.propTypes=p;t.defaultProps={playing:!1,loop:!1,controls:!1,volume:null,muted:!1,playbackRate:1,width:"640px",height:"360px",style:{},progressInterval:1e3,playsinline:!1,pip:!1,light:!1,wrapper:"div",config:{soundcloud:{options:{visual:!0,buying:!1,liking:!1,download:!1,sharing:!1,show_comments:!1,show_playcount:!1}},youtube:{playerVars:{playsinline:1,showinfo:0,rel:0,iv_load_policy:3,modestbranding:1},embedOptions:{},preload:!1},facebook:{appId:"1309697205772819"},dailymotion:{params:{api:1,"endscreen-enable":!1},preload:!1},vimeo:{playerOptions:{autopause:!1,byline:!1,portrait:!1,title:!1},preload:!1},file:{attributes:{},tracks:[],forceVideo:!1,forceAudio:!1,forceHLS:!1,forceDASH:!1,hlsOptions:{},hlsVersion:"0.10.1",dashVersion:"2.9.2"},wistia:{options:{}},mixcloud:{options:{hide_cover:1}},twitch:{options:{}}},onReady:function(){},onStart:function(){},onPlay:function(){},onPause:function(){},onBuffer:function(){},onBufferEnd:function(){},onEnded:function(){},onError:function(){},onDuration:function(){},onSeek:function(){},onProgress:function(){},onEnablePIP:function(){},onDisablePIP:function(){}};t.DEPRECATED_CONFIG_PROPS=["soundcloudConfig","youtubeConfig","facebookConfig","dailymotionConfig","vimeoConfig","fileConfig","wistiaConfig"]});V(K);function q(e,t,n){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("script");"function"==typeof t&&(n=t,t={}),t=t||{},n=n||function(){},o.type=t.type||"text/javascript",o.charset=t.charset||"utf8",o.async=!("async"in t)||!!t.async,o.src=e,t.attrs&&function(e,t){for(var n in t)e.setAttribute(n,t[n])}(o,t.attrs),t.text&&(o.text=""+t.text),("onload"in o?Y:$)(o,n),o.onload||Y(o,n),r.appendChild(o)}K.DEPRECATED_CONFIG_PROPS,K.defaultProps,K.propTypes;function Y(e,t){e.onload=function(){this.onerror=this.onload=null,t(null,e)},e.onerror=function(){this.onerror=this.onload=null,t(new Error("Failed to load "+this.src),e)}}function $(e,t){e.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||(this.onreadystatechange=null,t(null,e))}}var X=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===Z}(e)}(e)};var Z="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function J(e,t){return!1!==t.clone&&t.isMergeableObject(e)?re(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function Q(e,t,n){return e.concat(t).map(function(e){return J(e,n)})}function ee(e){return Object.keys(e).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter(function(e){return t.propertyIsEnumerable(e)}):[]}(e))}function te(e,t){try{return t in e}catch(e){return!1}}function ne(t,n,r){var o={};return r.isMergeableObject(t)&&ee(t).forEach(function(e){o[e]=J(t[e],r)}),ee(n).forEach(function(e){!function(e,t){return te(e,t)&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))}(t,e)&&(r.isMergeableObject(n[e])&&te(t,e)?o[e]=function(e,t){if(!t.customMerge)return re;var n=t.customMerge(e);return"function"==typeof n?n:re}(e,r)(t[e],n[e],r):o[e]=J(n[e],r))}),o}function re(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||Q,n.isMergeableObject=n.isMergeableObject||X,n.cloneUnlessOtherwiseSpecified=J;var r=Array.isArray(t);return r===Array.isArray(e)?r?n.arrayMerge(e,t,n):ne(e,t,n):J(t,n)}re.all=function(e,n){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,t){return re(e,t,n)},{})};var oe=re,we=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.parseStartTime=function(e){return s(e,i)},t.parseEndTime=function(e){return s(e,u)},t.randomString=function(){return Math.random().toString(36).substr(2,5)},t.queryString=function(t){return Object.keys(t).map(function(e){return"".concat(e,"=").concat(t[e])}).join("&")},t.getSDK=function(o,i){var a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:function(){return!0},u=4<arguments.length&&void 0!==arguments[4]?arguments[4]:n.default;if(window[i]&&e(window[i]))return Promise.resolve(window[i]);return new Promise(function(e,t){if(f[o])f[o].push({resolve:e,reject:t});else{f[o]=[{resolve:e,reject:t}];var n=function(t){f[o].forEach(function(e){return e.resolve(t)})};if(a){var r=window[a];window[a]=function(){r&&r(),n(window[i])}}u(o,function(t){t?(f[o].forEach(function(e){return e.reject(t)}),f[o]=[]):a||n(window[i])})}})},t.getConfig=function(e,t,n){var r=(0,p.default)(t.config,e.config),o=!0,i=!1,a=void 0;try{for(var u,l=K.DEPRECATED_CONFIG_PROPS[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var c=u.value;if(e[c]){var s=c.replace(/Config$/,"");if(r=(0,p.default)(r,y({},s,e[c])),n){var f="ReactPlayer: %c".concat(c," %cis deprecated, please use the config prop instead – ").concat("https://github.com/CookPete/react-player#config-prop");console.warn(f,"font-weight: bold","")}}}}catch(e){i=!0,a=e}finally{try{o||null==l.return||l.return()}finally{if(i)throw a}}return r},t.omit=function(e){for(var t,n=arguments.length,r=new Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];for(var i=(t=[]).concat.apply(t,r),a={},u=Object.keys(e),l=0,c=u;l<c.length;l++){var s=c[l];-1===i.indexOf(s)&&(a[s]=e[s])}return a},t.callPlayer=function(e){var t;if(!this.player||!this.player[e]){var n="ReactPlayer: ".concat(this.constructor.displayName," player could not call %c").concat(e,"%c – ");return this.player?this.player[e]||(n+="The method was not available"):n+="The player was not available",console.warn(n,"font-weight: bold",""),null}for(var r=arguments.length,o=new Array(1<r?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return(t=this.player)[e].apply(t,o)},t.isObject=d,t.isEqual=function e(t,n){if("function"==typeof t&&"function"==typeof n)return!0;if(t instanceof Array&&n instanceof Array){if(t.length!==n.length)return!1;for(var r=0;r!==t.length;r++)if(!e(t[r],n[r]))return!1;return!0}if(d(t)&&d(n)){if(Object.keys(t).length!==Object.keys(n).length)return!1;for(var o=0,i=Object.keys(t);o<i.length;o++){var a=i[o];if(!e(t[a],n[a]))return!1}return!0}return t===n},t.isMediaStream=function(e){return"undefined"!=typeof window&&void 0!==window.MediaStream&&e instanceof window.MediaStream};var n=r(q),p=r(oe);function r(e){return e&&e.__esModule?e:{default:e}}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var i=/[?&#](?:start|t)=([0-9hms]+)/,u=/[?&#]end=([0-9hms]+)/,l=/(\d+)(h|m|s)/g,c=/^\d+$/;function s(e,t){var n=e.match(t);if(n){var r=n[1];if(r.match(l))return function(e){var t=0,n=l.exec(e);for(;null!==n;){var r=a(n,3),o=r[1],i=r[2];"h"===i&&(t+=60*parseInt(o,10)*60),"m"===i&&(t+=60*parseInt(o,10)),"s"===i&&(t+=parseInt(o,10)),n=l.exec(e)}return t}(r);if(c.test(r))return parseInt(r)}}var f={};function d(e){return null!==e&&"object"===o(e)}});V(we);we.parseStartTime,we.parseEndTime,we.randomString,we.queryString,we.getSDK,we.getConfig,we.omit,we.callPlayer,we.isObject,we.isEqual,we.isMediaStream;var Oe=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x);function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var o=function(){function o(){var e,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return f(c(i=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?c(e):t}(this,(e=l(o)).call.apply(e,[this].concat(n)))),"mounted",!1),f(c(i),"isReady",!1),f(c(i),"isPlaying",!1),f(c(i),"isLoading",!0),f(c(i),"loadOnReady",null),f(c(i),"startOnPlay",!0),f(c(i),"seekOnPlay",null),f(c(i),"onDurationCalled",!1),f(c(i),"getInternalPlayer",function(e){return i.player?i.player[e]:null}),f(c(i),"progress",function(){if(i.props.url&&i.player&&i.isReady){var e=i.getCurrentTime()||0,t=i.getSecondsLoaded(),n=i.getDuration();if(n){var r={playedSeconds:e,played:e/n};null!==t&&(r.loadedSeconds=t,r.loaded=t/n),r.playedSeconds===i.prevPlayed&&r.loadedSeconds===i.prevLoaded||i.props.onProgress(r),i.prevPlayed=r.playedSeconds,i.prevLoaded=r.loadedSeconds}}i.progressTimeout=setTimeout(i.progress,i.props.progressFrequency||i.props.progressInterval)}),f(c(i),"handleReady",function(){if(i.mounted){i.isReady=!0,i.isLoading=!1;var e=i.props,t=e.onReady,n=e.playing,r=e.volume,o=e.muted;t(),o||null===r||i.player.setVolume(r),i.loadOnReady?(i.player.load(i.loadOnReady,!0),i.loadOnReady=null):n&&i.player.play(),i.handleDurationCheck()}}),f(c(i),"handlePlay",function(){i.isPlaying=!0,i.isLoading=!1;var e=i.props,t=e.onStart,n=e.onPlay,r=e.playbackRate;i.startOnPlay&&(i.player.setPlaybackRate&&1!==r&&i.player.setPlaybackRate(r),t(),i.startOnPlay=!1),n(),i.seekOnPlay&&(i.seekTo(i.seekOnPlay),i.seekOnPlay=null),i.handleDurationCheck()}),f(c(i),"handlePause",function(e){i.isPlaying=!1,i.isLoading||i.props.onPause(e)}),f(c(i),"handleEnded",function(){var e=i.props,t=e.activePlayer,n=e.loop,r=e.onEnded;t.loopOnEnded&&n&&i.seekTo(0),n||(i.isPlaying=!1,r())}),f(c(i),"handleError",function(){var e;i.isLoading=!1,(e=i.props).onError.apply(e,arguments)}),f(c(i),"handleDurationCheck",function(){clearTimeout(i.durationCheckTimeout);var e=i.getDuration();e?i.onDurationCalled||(i.props.onDuration(e),i.onDurationCalled=!0):i.durationCheckTimeout=setTimeout(i.handleDurationCheck,100)}),f(c(i),"handleLoaded",function(){i.isLoading=!1}),f(c(i),"ref",function(e){e&&(i.player=e)}),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(o,n.Component),function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(o,[{key:"componentDidMount",value:function(){this.mounted=!0,this.player.load(this.props.url),this.progress()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.progressTimeout),clearTimeout(this.durationCheckTimeout),this.isReady&&this.player.stop(),this.player.disablePIP&&this.player.disablePIP(),this.mounted=!1}},{key:"componentDidUpdate",value:function(e){var t=this,n=this.props,r=n.url,o=n.playing,i=n.volume,a=n.muted,u=n.playbackRate,l=n.pip,c=n.loop,s=n.activePlayer;if(!(0,we.isEqual)(e.url,r)){if(this.isLoading&&!s.forceLoad)return console.warn("ReactPlayer: the attempt to load ".concat(r," is being deferred until the player has loaded")),void(this.loadOnReady=r);this.isLoading=!0,this.startOnPlay=!0,this.onDurationCalled=!1,this.player.load(r,this.isReady)}e.playing||!o||this.isPlaying||this.player.play(),e.playing&&!o&&this.isPlaying&&this.player.pause(),!e.pip&&l&&this.player.enablePIP&&this.player.enablePIP(),e.pip&&!l&&this.player.disablePIP&&this.player.disablePIP(),e.volume!==i&&null!==i&&this.player.setVolume(i),e.muted!==a&&(a?this.player.mute():(this.player.unmute(),null!==i&&setTimeout(function(){return t.player.setVolume(i)}))),e.playbackRate!==u&&this.player.setPlaybackRate&&this.player.setPlaybackRate(u),e.loop!==c&&this.player.setLoop&&this.player.setLoop(c)}},{key:"getDuration",value:function(){return this.isReady?this.player.getDuration():null}},{key:"getCurrentTime",value:function(){return this.isReady?this.player.getCurrentTime():null}},{key:"getSecondsLoaded",value:function(){return this.isReady?this.player.getSecondsLoaded():null}},{key:"seekTo",value:function(e,t){var n=this;if(!this.isReady&&0!==e)return this.seekOnPlay=e,void setTimeout(function(){n.seekOnPlay=null},5e3);if(t?"fraction"===t:0<e&&e<1){var r=this.player.getDuration();return r?void this.player.seekTo(r*e):void console.warn("ReactPlayer: could not seek using fraction – duration not yet available")}this.player.seekTo(e)}},{key:"render",value:function(){var e=this.props.activePlayer;return e?n.default.createElement(e,r({},this.props,{ref:this.ref,onReady:this.handleReady,onPlay:this.handlePlay,onPause:this.handlePause,onEnded:this.handleEnded,onLoaded:this.handleLoaded,onError:this.handleError})):null}}]),o}();f(t.default=o,"displayName","Player"),f(o,"propTypes",K.propTypes),f(o,"defaultProps",K.defaultProps)});V(Oe);var je=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(p){var e,t;return t=e=function(){function i(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return m(c(n=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?c(e):t}(this,(e=l(i)).call.apply(e,[this].concat(r)))),"config",(0,we.getConfig)(n.props,K.defaultProps,!0)),m(c(n),"getDuration",function(){return n.player?n.player.getDuration():null}),m(c(n),"getCurrentTime",function(){return n.player?n.player.getCurrentTime():null}),m(c(n),"getSecondsLoaded",function(){return n.player?n.player.getSecondsLoaded():null}),m(c(n),"getInternalPlayer",function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null}),m(c(n),"seekTo",function(e,t){if(!n.player)return null;n.player.seekTo(e,t)}),m(c(n),"ref",function(e){n.player=e}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}(i,y.Component),function(e,t,n){t&&r(e.prototype,t);n&&r(e,n)}(i,[{key:"shouldComponentUpdate",value:function(e){return!(0,we.isEqual)(this.props,e)}},{key:"componentDidUpdate",value:function(){this.config=(0,we.getConfig)(this.props,K.defaultProps)}},{key:"render",value:function(){var e=this.config.file,t=e.forceVideo,n=e.forceAudio,r=e.forceHLS,o=e.forceDASH,i=t||n||r||o;if(!p.canPlay(this.props.url)&&!i)return null;var a=this.props,u=a.style,l=a.width,c=a.height,s=a.wrapper,f=(0,we.omit)(this.props,b,K.DEPRECATED_CONFIG_PROPS);return y.default.createElement(s,h({style:function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?v(n,!0).forEach(function(e){m(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):v(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},u,{width:l,height:c})},f),y.default.createElement(d.default,h({},this.props,{ref:this.ref,activePlayer:p,config:this.config})))}}]),i}(),m(e,"displayName","".concat(p.displayName,"Player")),m(e,"propTypes",K.propTypes),m(e,"defaultProps",K.defaultProps),m(e,"canPlay",p.canPlay),t};var n,y=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),d=(n=Oe)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(){return(h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function v(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=Object.keys(K.propTypes)});V(je);var Ee=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.YouTube=void 0;var n,r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),o=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function h(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?u(n,!0).forEach(function(e){p(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var v=/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})|youtube\.com\/playlist\?list=/,m=/list=([a-zA-Z0-9_-]+)/;function b(e){return m.test(e)?{listType:"playlist",list:y(e.match(m),2)[1]}:{}}var d=function(){function o(){var e,m;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return p(s(m=function(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?s(e):t}(this,(e=c(o)).call.apply(e,[this].concat(n)))),"callPlayer",we.callPlayer),p(s(m),"onStateChange",function(e){var t=e.data,n=m.props,r=n.onPlay,o=n.onPause,i=n.onBuffer,a=n.onBufferEnd,u=n.onEnded,l=n.onReady,c=n.loop,s=window.YT.PlayerState,f=s.PLAYING,p=s.PAUSED,y=s.BUFFERING,d=s.ENDED,h=s.CUED;if(t===f&&(r(),a()),t===p&&o(),t===y&&i(),t===d){var v=!!m.callPlayer("getPlaylist");c&&!v&&m.play(),u()}t===h&&l()}),p(s(m),"mute",function(){m.callPlayer("mute")}),p(s(m),"unmute",function(){m.callPlayer("unMute")}),p(s(m),"ref",function(e){m.container=e}),m}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(o,r.Component),function(e,t,n){t&&l(e.prototype,t),n&&l(e,n)}(o,[{key:"load",value:function(t,e){var n=this,r=this.props,o=r.playing,i=r.muted,a=r.playsinline,u=r.controls,l=r.loop,c=r.config,s=r.onError,f=c.youtube,p=f.playerVars,y=f.embedOptions,d=t&&t.match(v)[1];if(e)return m.test(t)?void this.player.loadPlaylist(b(t)):void this.player.cueVideoById({videoId:d,startSeconds:(0,we.parseStartTime)(t)||p.start,endSeconds:(0,we.parseEndTime)(t)||p.end});(0,we.getSDK)("https://www.youtube.com/iframe_api","YT","onYouTubeIframeAPIReady",function(e){return e.loaded}).then(function(e){n.container&&(n.player=new e.Player(n.container,h({width:"100%",height:"100%",videoId:d,playerVars:h({autoplay:o?1:0,mute:i?1:0,controls:u?1:0,start:(0,we.parseStartTime)(t),end:(0,we.parseEndTime)(t),origin:window.location.origin,playsinline:a},b(t),{},p),events:{onReady:function(){l&&n.player.setLoop(!0),n.props.onReady()},onStateChange:n.onStateChange,onError:function(e){return s(e.data)}}},y)))},s)}},{key:"play",value:function(){this.callPlayer("playVideo")}},{key:"pause",value:function(){this.callPlayer("pauseVideo")}},{key:"stop",value:function(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",e),this.props.playing||this.pause()}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("setPlaybackRate",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}},{key:"render",value:function(){var e={width:"100%",height:"100%",display:this.props.display};return r.default.createElement("div",{style:e},r.default.createElement("div",{ref:this.ref}))}}]),o}();p(t.YouTube=d,"displayName","YouTube"),p(d,"canPlay",function(e){return v.test(e)});var g=(0,o.default)(d);t.default=g});V(Ee);Ee.YouTube;var ke=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.SoundCloud=void 0;var n,r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),o=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=/(soundcloud\.com|snd\.sc)\/.+$/,d=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return y(f(t=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?f(e):t}(this,(e=c(i)).call.apply(e,[this].concat(r)))),"callPlayer",we.callPlayer),y(f(t),"duration",null),y(f(t),"currentTime",null),y(f(t),"fractionLoaded",null),y(f(t),"mute",function(){t.setVolume(0)}),y(f(t),"unmute",function(){null!==t.props.volume&&t.setVolume(t.props.volume)}),y(f(t),"ref",function(e){t.iframe=e}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(i,r.Component),function(e,t,n){t&&l(e.prototype,t),n&&l(e,n)}(i,[{key:"load",value:function(u,l){var c=this;(0,we.getSDK)("https://w.soundcloud.com/player/api.js","SC").then(function(e){if(c.iframe){var t=e.Widget.Events,n=t.PLAY,r=t.PLAY_PROGRESS,o=t.PAUSE,i=t.FINISH,a=t.ERROR;l||(c.player=e.Widget(c.iframe),c.player.bind(n,c.props.onPlay),c.player.bind(o,c.props.onPause),c.player.bind(r,function(e){c.currentTime=e.currentPosition/1e3,c.fractionLoaded=e.loadedProgress}),c.player.bind(i,function(){return c.props.onEnded()}),c.player.bind(a,function(e){return c.props.onError(e)})),c.player.load(u,function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?s(n,!0).forEach(function(e){y(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):s(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},c.props.config.soundcloud.options,{callback:function(){c.player.getDuration(function(e){c.duration=e/1e3,c.props.onReady()})}}))}})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",1e3*e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.fractionLoaded*this.duration}},{key:"render",value:function(){var e={width:"100%",height:"100%",display:this.props.display};return r.default.createElement("iframe",{ref:this.ref,src:"https://w.soundcloud.com/player/?url=".concat(encodeURIComponent(this.props.url)),style:e,frameBorder:0,allow:"autoplay"})}}]),i}();y(t.SoundCloud=d,"displayName","SoundCloud"),y(d,"canPlay",function(e){return i.test(e)}),y(d,"loopOnEnded",!0);var h=(0,o.default)(d);t.default=h});V(ke);ke.SoundCloud;var Se=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Vimeo=void 0;var n,r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),o=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i=/vimeo\.com\/.+/,d=/vimeo\.com\/external\/[0-9]+\..+/,h=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return y(f(t=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?f(e):t}(this,(e=s(i)).call.apply(e,[this].concat(r)))),"callPlayer",we.callPlayer),y(f(t),"duration",null),y(f(t),"currentTime",null),y(f(t),"secondsLoaded",null),y(f(t),"mute",function(){t.setVolume(0)}),y(f(t),"unmute",function(){null!==t.props.volume&&t.setVolume(t.props.volume)}),y(f(t),"ref",function(e){t.container=e}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(i,r.Component),function(e,t,n){t&&c(e.prototype,t),n&&c(e,n)}(i,[{key:"load",value:function(t){var n=this;this.duration=null,(0,we.getSDK)("https://player.vimeo.com/api/player.js","Vimeo").then(function(e){n.container&&(n.player=new e.Player(n.container,function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(n,!0).forEach(function(e){y(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({url:t,autoplay:n.props.playing,muted:n.props.muted,loop:n.props.loop,playsinline:n.props.playsinline,controls:n.props.controls},n.props.config.vimeo.playerOptions)),n.player.ready().then(function(){var e=n.container.querySelector("iframe");e.style.width="100%",e.style.height="100%"}).catch(n.props.onError),n.player.on("loaded",function(){n.props.onReady(),n.refreshDuration()}),n.player.on("play",function(){n.props.onPlay(),n.refreshDuration()}),n.player.on("pause",n.props.onPause),n.player.on("seeked",function(e){return n.props.onSeek(e.seconds)}),n.player.on("ended",n.props.onEnded),n.player.on("error",n.props.onError),n.player.on("timeupdate",function(e){var t=e.seconds;n.currentTime=t}),n.player.on("progress",function(e){var t=e.seconds;n.secondsLoaded=t}))},this.props.onError)}},{key:"refreshDuration",value:function(){var t=this;this.player.getDuration().then(function(e){t.duration=e})}},{key:"play",value:function(){var e=this.callPlayer("play");e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("unload")}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("setPlaybackRate",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){var e={width:"100%",height:"100%",overflow:"hidden",display:this.props.display};return r.default.createElement("div",{key:this.props.url,ref:this.ref,style:e})}}]),i}();y(t.Vimeo=h,"displayName","Vimeo"),y(h,"forceLoad",!0),y(h,"canPlay",function(e){return!d.test(e)&&i.test(e)});var v=(0,o.default)(h);t.default=v});V(Se);Se.Vimeo;var _e=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Facebook=void 0;var n,r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),o=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y="//connect.facebook.net/en_US/sdk.js",d="fbAsyncInit",i=/facebook\.com\/([^/?].+\/)?video(s|\.php)[/?].*$/,h=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return p(s(t=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?s(e):t}(this,(e=c(i)).call.apply(e,[this].concat(r)))),"callPlayer",we.callPlayer),p(s(t),"playerID","facebook-player-"+(0,we.randomString)()),p(s(t),"mute",function(){t.callPlayer("mute")}),p(s(t),"unmute",function(){t.callPlayer("unmute")}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(i,r.Component),function(e,t,n){t&&l(e.prototype,t),n&&l(e,n)}(i,[{key:"load",value:function(e,t){var n=this;t?(0,we.getSDK)(y,"FB",d).then(function(e){return e.XFBML.parse()}):(0,we.getSDK)(y,"FB",d).then(function(e){e.init({appId:n.props.config.facebook.appId,xfbml:!0,version:"v2.5"}),e.Event.subscribe("xfbml.render",function(e){n.props.onLoaded()}),e.Event.subscribe("xfbml.ready",function(e){"video"===e.type&&e.id===n.playerID&&(n.player=e.instance,n.player.subscribe("startedPlaying",n.props.onPlay),n.player.subscribe("paused",n.props.onPause),n.player.subscribe("finishedPlaying",n.props.onEnded),n.player.subscribe("startedBuffering",n.props.onBuffer),n.player.subscribe("finishedBuffering",n.props.onBufferEnd),n.player.subscribe("error",n.props.onError),n.props.muted||n.callPlayer("unmute"),n.props.onReady(),document.getElementById(n.playerID).querySelector("iframe").style.visibility="visible")})})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentPosition")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return r.default.createElement("div",{style:{width:"100%",height:"100%"},id:this.playerID,className:"fb-video","data-href":this.props.url,"data-autoplay":this.props.playing?"true":"false","data-allowfullscreen":"true","data-controls":this.props.controls?"true":"false"})}}]),i}();p(t.Facebook=h,"displayName","Facebook"),p(h,"canPlay",function(e){return i.test(e)}),p(h,"loopOnEnded",!0);var v=(0,o.default)(h);t.default=v});V(_e);_e.Facebook;var De=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Streamable=void 0;var n,r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),o=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=/streamable\.com\/([a-z0-9]+)$/,i=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return p(s(t=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?s(e):t}(this,(e=c(i)).call.apply(e,[this].concat(r)))),"callPlayer",we.callPlayer),p(s(t),"duration",null),p(s(t),"currentTime",null),p(s(t),"secondsLoaded",null),p(s(t),"mute",function(){t.callPlayer("mute")}),p(s(t),"unmute",function(){t.callPlayer("unmute")}),p(s(t),"ref",function(e){t.iframe=e}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(i,r.Component),function(e,t,n){t&&l(e.prototype,t),n&&l(e,n)}(i,[{key:"load",value:function(){var r=this;(0,we.getSDK)("//cdn.embed.ly/player-0.1.0.min.js","playerjs").then(function(e){r.iframe&&(r.player=new e.Player(r.iframe),r.player.setLoop(r.props.loop),r.player.on("ready",r.props.onReady),r.player.on("play",r.props.onPlay),r.player.on("pause",r.props.onPause),r.player.on("seeked",r.props.onSeek),r.player.on("ended",r.props.onEnded),r.player.on("error",r.props.onError),r.player.on("timeupdate",function(e){var t=e.duration,n=e.seconds;r.duration=t,r.currentTime=n}),r.player.on("buffered",function(e){var t=e.percent;r.duration&&(r.secondsLoaded=r.duration*t)}),r.props.muted&&r.player.mute())},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){var e=this.props.url.match(y)[1];return r.default.createElement("iframe",{ref:this.ref,src:"https://streamable.com/o/".concat(e),frameBorder:"0",scrolling:"no",style:{width:"100%",height:"100%"},allowFullScreen:!0})}}]),i}();p(t.Streamable=i,"displayName","Streamable"),p(i,"canPlay",function(e){return y.test(e)});var d=(0,o.default)(i);t.default=d});V(De);De.Streamable;var Te=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Wistia=void 0;var n,r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),o=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=/(?:wistia\.com|wi\.st)\/(?:medias|embed)\/(.*)$/,i=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return d(s(t=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?s(e):t}(this,(e=c(i)).call.apply(e,[this].concat(r)))),"callPlayer",we.callPlayer),d(s(t),"mute",function(){t.callPlayer("mute")}),d(s(t),"unmute",function(){t.callPlayer("unmute")}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(i,r.Component),function(e,t,n){t&&l(e.prototype,t),n&&l(e,n)}(i,[{key:"getID",value:function(e){return e&&e.match(p)[1]}},{key:"load",value:function(e){var t=this,n=this.props,r=n.playing,o=n.muted,i=n.controls,a=n.onReady,u=n.onPlay,l=n.onPause,c=n.onSeek,s=n.onEnded,f=n.config,p=n.onError;(0,we.getSDK)("//fast.wistia.com/assets/external/E-v1.js","Wistia").then(function(){window._wq=window._wq||[],window._wq.push({id:t.getID(e),options:function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?y(n,!0).forEach(function(e){d(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):y(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({autoPlay:r,silentAutoPlay:"allow",muted:o,controlsVisibleOnLoad:i},f.wistia.options),onReady:function(e){t.player=e,t.unbind(),t.player.bind("play",u),t.player.bind("pause",l),t.player.bind("seek",c),t.player.bind("end",s),a()}})},p)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"unbind",value:function(){var e=this.props,t=e.onPlay,n=e.onPause,r=e.onSeek,o=e.onEnded;this.player.unbind("play",t),this.player.unbind("pause",n),this.player.unbind("seek",r),this.player.unbind("end",o)}},{key:"stop",value:function(){this.unbind(),this.callPlayer("remove")}},{key:"seekTo",value:function(e){this.callPlayer("time",e)}},{key:"setVolume",value:function(e){this.callPlayer("volume",e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("playbackRate",e)}},{key:"getDuration",value:function(){return this.callPlayer("duration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("time")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.getID(this.props.url),t="wistia_embed wistia_async_".concat(e);return r.default.createElement("div",{key:e,className:t,style:{width:"100%",height:"100%"}})}}]),i}();d(t.Wistia=i,"displayName","Wistia"),d(i,"canPlay",function(e){return p.test(e)}),d(i,"loopOnEnded",!0);var h=(0,o.default)(i);t.default=h});V(Te);Te.Wistia;var Re=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Twitch=void 0;var n,r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),o=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=/(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/,v=/(?:www\.|go\.)?twitch\.tv\/([a-z0-9_]+)($|\?)/,i=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return d(s(t=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?s(e):t}(this,(e=c(i)).call.apply(e,[this].concat(r)))),"callPlayer",we.callPlayer),d(s(t),"playerID","twitch-player-"+(0,we.randomString)()),d(s(t),"mute",function(){t.callPlayer("setMuted",!0)}),d(s(t),"unmute",function(){t.callPlayer("setMuted",!1)}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(i,r.Component),function(e,t,n){t&&l(e.prototype,t),n&&l(e,n)}(i,[{key:"load",value:function(e,t){var l=this,n=this.props,c=n.playsinline,r=n.onError,s=n.config,f=v.test(e),p=f?e.match(v)[1]:e.match(h)[1];t?f?this.player.setChannel(p):this.player.setVideo("v"+p):(0,we.getSDK)("https://player.twitch.tv/js/embed/v1.js","Twitch").then(function(e){l.player=new e.Player(l.playerID,function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?y(n,!0).forEach(function(e){d(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):y(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({video:f?"":p,channel:f?p:"",height:"100%",width:"100%",playsinline:c,autoplay:l.props.playing,muted:l.props.muted,controls:l.props.controls},s.twitch.options));var t=e.Player,n=t.READY,r=t.PLAYING,o=t.PAUSE,i=t.ENDED,a=t.ONLINE,u=t.OFFLINE;l.player.addEventListener(n,l.props.onReady),l.player.addEventListener(r,l.props.onPlay),l.player.addEventListener(o,l.props.onPause),l.player.addEventListener(i,l.props.onEnded),l.player.addEventListener(a,l.props.onLoaded),l.player.addEventListener(u,l.props.onLoaded)},r)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("pause")}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return r.default.createElement("div",{style:{width:"100%",height:"100%"},id:this.playerID})}}]),i}();d(t.Twitch=i,"displayName","Twitch"),d(i,"canPlay",function(e){return h.test(e)||v.test(e)}),d(i,"loopOnEnded",!0);var p=(0,o.default)(i);t.default=p});V(Re);Re.Twitch;var Me=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.DailyMotion=void 0;var n,r=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),o=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function c(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=/^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/,i=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return d(p(t=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?p(e):t}(this,(e=f(i)).call.apply(e,[this].concat(r)))),"callPlayer",we.callPlayer),d(p(t),"onDurationChange",function(){var e=t.getDuration();t.props.onDuration(e)}),d(p(t),"mute",function(){t.callPlayer("setMuted",!0)}),d(p(t),"unmute",function(){t.callPlayer("setMuted",!1)}),d(p(t),"ref",function(e){t.container=e}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(i,r.Component),function(e,t,n){t&&s(e.prototype,t),n&&s(e,n)}(i,[{key:"load",value:function(n){var r=this,e=this.props,o=e.controls,i=e.config,a=e.onError,t=e.playing,u=c(n.match(h),2)[1];this.player?this.player.load(u,{start:(0,we.parseStartTime)(n),autoplay:t}):(0,we.getSDK)("https://api.dmcdn.net/all.js","DM","dmAsyncInit",function(e){return e.player}).then(function(e){if(r.container){var t=e.player;r.player=new t(r.container,{width:"100%",height:"100%",video:u,params:function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(n,!0).forEach(function(e){d(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({controls:o,autoplay:r.props.playing,mute:r.props.muted,start:(0,we.parseStartTime)(n),origin:window.location.origin},i.dailymotion.params),events:{apiready:r.props.onReady,seeked:function(){return r.props.onSeek(r.player.currentTime)},video_end:r.props.onEnded,durationchange:r.onDurationChange,pause:r.props.onPause,playing:r.props.onPlay,waiting:r.props.onBuffer,error:function(e){return a(e)}}})}},a)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.player.duration||null}},{key:"getCurrentTime",value:function(){return this.player.currentTime}},{key:"getSecondsLoaded",value:function(){return this.player.bufferedTime}},{key:"render",value:function(){var e={width:"100%",height:"100%",display:this.props.display};return r.default.createElement("div",{style:e},r.default.createElement("div",{ref:this.ref}))}}]),i}();d(t.DailyMotion=i,"displayName","DailyMotion"),d(i,"canPlay",function(e){return h.test(e)}),d(i,"loopOnEnded",!0);var v=(0,o.default)(i);t.default=v});V(Me);Me.DailyMotion;var xe=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.Mixcloud=void 0;var n,a=function(e){if(e&&e.__esModule)return e;var t=u();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),r=(n=je)&&n.__esModule?n:{default:n};function u(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return u=function(){return e},e}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t){return(p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d=/mixcloud\.com\/([^/]+\/[^/]+)/,i=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return y(f(t=function(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?f(e):t}(this,(e=s(i)).call.apply(e,[this].concat(r)))),"callPlayer",we.callPlayer),y(f(t),"duration",null),y(f(t),"currentTime",null),y(f(t),"secondsLoaded",null),y(f(t),"mute",function(){}),y(f(t),"unmute",function(){}),y(f(t),"ref",function(e){t.iframe=e}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&p(e,t)}(i,a.Component),function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(i,[{key:"load",value:function(){var n=this;(0,we.getSDK)("//widget.mixcloud.com/media/js/widgetApi.js","Mixcloud").then(function(e){n.player=e.PlayerWidget(n.iframe),n.player.ready.then(function(){n.player.events.play.on(n.props.onPlay),n.player.events.pause.on(n.props.onPause),n.player.events.ended.on(n.props.onEnded),n.player.events.error.on(n.props.error),n.player.events.progress.on(function(e,t){n.currentTime=e,n.duration=t}),n.props.onReady()})},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(){}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.config,r=t.match(d)[1],o=(0,we.queryString)(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(n,!0).forEach(function(e){y(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},n.mixcloud.options,{feed:"/".concat(r,"/")}));return a.default.createElement("iframe",{key:r,ref:this.ref,style:{width:"100%",height:"100%"},src:"https://www.mixcloud.com/widget/iframe/?".concat(o),frameBorder:"0"})}}]),i}();y(t.Mixcloud=i,"displayName","Mixcloud"),y(i,"canPlay",function(e){return d.test(e)}),y(i,"loopOnEnded",!0);var h=(0,r.default)(i);t.default=h});V(xe);xe.Mixcloud;var Le=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.FilePlayer=void 0;var n,f=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x),r=(n=je)&&n.__esModule?n:{default:n};function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,h=/\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i,v=/\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i,m=/\.(m3u8)($|\?)/i,b=/\.(mpd)($|\?)/i,g=/www\.dropbox\.com\/.+/;function P(e){if(e instanceof Array){var t=!0,n=!1,r=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;if("string"==typeof a&&P(a))return!0;if(P(a.src))return!0}}catch(e){n=!0,r=e}finally{try{t||null==i.return||i.return()}finally{if(n)throw r}}return!1}return!!(0,we.isMediaStream)(e)||(h.test(e)||v.test(e)||m.test(e)||b.test(e))}var i=function(){function i(){var e,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return y(c(o=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?c(e):t}(this,(e=l(i)).call.apply(e,[this].concat(n)))),"onReady",function(){var e;return(e=o.props).onReady.apply(e,arguments)}),y(c(o),"onPlay",function(){var e;return(e=o.props).onPlay.apply(e,arguments)}),y(c(o),"onBuffer",function(){var e;return(e=o.props).onBuffer.apply(e,arguments)}),y(c(o),"onBufferEnd",function(){var e;return(e=o.props).onBufferEnd.apply(e,arguments)}),y(c(o),"onPause",function(){var e;return(e=o.props).onPause.apply(e,arguments)}),y(c(o),"onEnded",function(){var e;return(e=o.props).onEnded.apply(e,arguments)}),y(c(o),"onError",function(){var e;return(e=o.props).onError.apply(e,arguments)}),y(c(o),"onEnablePIP",function(){var e;return(e=o.props).onEnablePIP.apply(e,arguments)}),y(c(o),"onDisablePIP",function(e){var t=o.props,n=t.onDisablePIP,r=t.playing;n(e),r&&o.play()}),y(c(o),"onSeek",function(e){o.props.onSeek(e.target.currentTime)}),y(c(o),"mute",function(){o.player.muted=!0}),y(c(o),"unmute",function(){o.player.muted=!1}),y(c(o),"renderSourceElement",function(e,t){return"string"==typeof e?f.default.createElement("source",{key:t,src:e}):f.default.createElement("source",p({key:t},e))}),y(c(o),"renderTrack",function(e,t){return f.default.createElement("track",p({key:t},e))}),y(c(o),"ref",function(e){o.player&&(o.prevPlayer=o.player),o.player=e}),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(i,f.Component),function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(i,[{key:"componentDidMount",value:function(){this.addListeners(this.player),d&&this.player.load()}},{key:"componentDidUpdate",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&(this.removeListeners(this.prevPlayer),this.addListeners(this.player))}},{key:"componentWillUnmount",value:function(){this.removeListeners(this.player)}},{key:"addListeners",value:function(e){var t=this.props.playsinline;e.addEventListener("canplay",this.onReady),e.addEventListener("play",this.onPlay),e.addEventListener("waiting",this.onBuffer),e.addEventListener("playing",this.onBufferEnd),e.addEventListener("pause",this.onPause),e.addEventListener("seeked",this.onSeek),e.addEventListener("ended",this.onEnded),e.addEventListener("error",this.onError),e.addEventListener("enterpictureinpicture",this.onEnablePIP),e.addEventListener("leavepictureinpicture",this.onDisablePIP),t&&(e.setAttribute("playsinline",""),e.setAttribute("webkit-playsinline",""),e.setAttribute("x5-playsinline",""))}},{key:"removeListeners",value:function(e){e.removeEventListener("canplay",this.onReady),e.removeEventListener("play",this.onPlay),e.removeEventListener("waiting",this.onBuffer),e.removeEventListener("playing",this.onBufferEnd),e.removeEventListener("pause",this.onPause),e.removeEventListener("seeked",this.onSeek),e.removeEventListener("ended",this.onEnded),e.removeEventListener("error",this.onError),e.removeEventListener("enterpictureinpicture",this.onEnablePIP),e.removeEventListener("leavepictureinpicture",this.onDisablePIP)}},{key:"shouldUseAudio",value:function(e){return!e.config.file.forceVideo&&(!e.config.file.attributes.poster&&(h.test(e.url)||e.config.file.forceAudio))}},{key:"shouldUseHLS",value:function(e){return m.test(e)&&!d||this.props.config.file.forceHLS}},{key:"shouldUseDASH",value:function(e){return b.test(e)||this.props.config.file.forceDASH}},{key:"load",value:function(t){var r=this,e=this.props.config.file,n=e.hlsVersion,o=e.dashVersion;if(this.shouldUseHLS(t)&&(0,we.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/hls.js/VERSION/hls.min.js".replace("VERSION",n),"Hls").then(function(n){r.hls=new n(r.props.config.file.hlsOptions),r.hls.on(n.Events.ERROR,function(e,t){r.props.onError(e,t,r.hls,n)}),r.hls.loadSource(t),r.hls.attachMedia(r.player)}),this.shouldUseDASH(t)&&(0,we.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js".replace("VERSION",o),"dashjs").then(function(e){r.dash=e.MediaPlayer().create(),r.dash.initialize(r.player,t,r.props.playing),r.dash.getDebug().setLogToBrowserConsole(!1)}),t instanceof Array)this.player.load();else if((0,we.isMediaStream)(t))try{this.player.srcObject=t}catch(e){this.player.src=window.URL.createObjectURL(t)}}},{key:"play",value:function(){var e=this.player.play();e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.player.pause()}},{key:"stop",value:function(){this.player.removeAttribute("src"),this.hls&&this.hls.destroy(),this.dash&&this.dash.reset()}},{key:"seekTo",value:function(e){this.player.currentTime=e}},{key:"setVolume",value:function(e){this.player.volume=e}},{key:"enablePIP",value:function(){this.player.requestPictureInPicture&&document.pictureInPictureElement!==this.player&&this.player.requestPictureInPicture()}},{key:"disablePIP",value:function(){document.exitPictureInPicture&&document.pictureInPictureElement===this.player&&document.exitPictureInPicture()}},{key:"setPlaybackRate",value:function(e){this.player.playbackRate=e}},{key:"getDuration",value:function(){if(!this.player)return null;var e=this.player,t=e.duration,n=e.seekable;return t===1/0&&0<n.length?n.end(n.length-1):t}},{key:"getCurrentTime",value:function(){return this.player?this.player.currentTime:null}},{key:"getSecondsLoaded",value:function(){if(!this.player)return null;var e=this.player.buffered;if(0===e.length)return 0;var t=e.end(e.length-1),n=this.getDuration();return n<t?n:t}},{key:"getSource",value:function(e){var t=this.shouldUseHLS(e),n=this.shouldUseDASH(e);if(!(e instanceof Array||(0,we.isMediaStream)(e)||t||n))return g.test(e)?e.replace("www.dropbox.com","dl.dropboxusercontent.com"):e}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.playing,r=e.loop,o=e.controls,i=e.muted,a=e.config,u=e.width,l=e.height,c=this.shouldUseAudio(this.props)?"audio":"video",s={width:"auto"===u?u:"100%",height:"auto"===l?l:"100%"};return f.default.createElement(c,p({ref:this.ref,src:this.getSource(t),style:s,preload:"auto",autoPlay:n||void 0,controls:o,muted:i,loop:r},a.file.attributes),t instanceof Array&&t.map(this.renderSourceElement),a.file.tracks.map(this.renderTrack))}}]),i}();y(t.FilePlayer=i,"displayName","FilePlayer"),y(i,"canPlay",P),y(i,"canEnablePIP",function(e){return P(e)&&!!document.pictureInPictureEnabled&&!h.test(e)});var w=(0,r.default)(i);t.default=w});V(Le);Le.FilePlayer;var Ce=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=[Ee.YouTube,ke.SoundCloud,Se.Vimeo,_e.Facebook,De.Streamable,Te.Wistia,Re.Twitch,Me.DailyMotion,xe.Mixcloud,Le.FilePlayer];t.default=n});V(Ce);var Fe=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){if(e&&e.__esModule)return e;var t=a();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}n.default=e,t&&t.set(e,n);return n}(x);function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(n,!0).forEach(function(e){p(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y="64px",i=function(){function i(){var e,t;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return p(f(t=function(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?f(e):t}(this,(e=s(i)).call.apply(e,[this].concat(r)))),"mounted",!1),p(f(t),"state",{image:null}),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}(i,o.Component),function(e,t,n){t&&c(e.prototype,t),n&&c(e,n)}(i,[{key:"componentDidMount",value:function(){this.mounted=!0,this.fetchImage(this.props)}},{key:"componentDidUpdate",value:function(e){var t=this.props,n=t.url,r=t.light;e.url===n&&e.light===r||this.fetchImage(this.props)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"fetchImage",value:function(e){var n=this,t=e.url,r=e.light;if("string"!=typeof r)return this.setState({image:null}),window.fetch("https://noembed.com/embed?url=".concat(t)).then(function(e){return e.json()}).then(function(e){if(e.thumbnail_url&&n.mounted){var t=e.thumbnail_url.replace("height=100","height=480");n.setState({image:t})}});this.setState({image:r})}},{key:"render",value:function(){var e=this.props.onClick,t=this.state.image,n={display:"flex",alignItems:"center",justifyContent:"center"},r={preview:l({width:"100%",height:"100%",backgroundImage:t?"url(".concat(t,")"):void 0,backgroundSize:"cover",backgroundPosition:"center",cursor:"pointer"},n),shadow:l({background:"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",borderRadius:y,width:y,height:y},n),playIcon:{borderStyle:"solid",borderWidth:"16px 0 16px 26px",borderColor:"transparent transparent transparent white",marginLeft:"7px"}};return o.default.createElement("div",{style:r.preview,className:"react-player__preview",onClick:e},o.default.createElement("div",{style:r.shadow,className:"react-player__shadow"},o.default.createElement("div",{style:r.playIcon,className:"react-player__play-icon"})))}}]),i}();t.default=i});V(Fe);var Ae=N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=[],o=!0,i=!1,a=void 0;try{for(var u,l=p[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var c=u.value;!c.Player.canPlay(e)&&n[c.configKey].preload&&r.push(s.default.createElement(f.default,{key:c.Player.displayName,activePlayer:c.Player,url:c.url,controls:t,playing:!0,muted:!0,display:"none"}))}}catch(e){i=!0,a=e}finally{try{o||null==l.return||l.return()}finally{if(i)throw a}}return r};var s=n(x),f=n(Oe);function n(e){return e&&e.__esModule?e:{default:e}}var p=[{Player:Ee.YouTube,configKey:"youtube",url:"https://www.youtube.com/watch?v=GlCmAC4MHek"},{Player:ke.SoundCloud,configKey:"soundcloud",url:"https://soundcloud.com/seucheu/john-cage-433-8-bit-version"},{Player:Se.Vimeo,configKey:"vimeo",url:"https://vimeo.com/300970506"},{Player:Me.DailyMotion,configKey:"dailymotion",url:"http://www.dailymotion.com/video/xqdpyk"}]});V(Ae);function Ie(e){var t=e.onPlayPauseClick,n=e.playing,r=e.onReselectFile,o=e.processing,i=e.onEncode,a=e.showEncodeBtn,u=e.canDownload,l=e.onDownload;return x.createElement("div",{className:"rvt-controls-cont"},x.createElement("a",{className:"rvt-controller-item",title:"Pause",onClick:t},x.createElement(E,{name:n?"pause":"play"})),x.createElement("a",{className:"rvt-controller-item",title:"Select File",onClick:r},x.createElement(E,{name:"music"})),a&&x.createElement("div",{className:"rvt-controller-dropdown rvt-controller-list-wrap"},u?x.createElement("a",{className:"rvt-controller-item",onClick:l},x.createElement(E,{name:"download"})):x.createElement("a",{className:"rvt-controller-item",onClick:i},x.createElement(E,{name:o?"spin":"replay"}))))}var Ve=V(N(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"FilePlayer",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"YouTube",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"SoundCloud",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"Vimeo",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"Facebook",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"Streamable",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"Wistia",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"Twitch",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"DailyMotion",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"Mixcloud",{enumerable:!0,get:function(){return y.default}}),t.default=void 0;var h=g(x),o=d(Ce),n=d(Oe),v=d(Fe),a=g(Le),m=d(Ae),r=d(Ee),i=d(ke),u=d(Se),l=d(_e),c=d(De),s=d(Te),f=d(Re),p=d(Me),y=d(xe);function d(e){return e&&e.__esModule?e:{default:e}}function b(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return b=function(){return e},e}function g(e){if(e&&e.__esModule)return e;var t=b();if(t&&t.has(e))return t.get(e);var n={};if(null!=e){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=r?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}}return n.default=e,t&&t.set(e,n),n}function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function O(){return(O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function j(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _(e,t){return(_=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var T=Object.keys(K.propTypes),R=[],M=function(){function i(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return D(S(n=function(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?S(e):t}(this,(e=k(i)).call.apply(e,[this].concat(r)))),"config",(0,we.getConfig)(n.props,K.defaultProps,!0)),D(S(n),"state",{showPreview:!!n.props.light}),D(S(n),"handleClickPreview",function(){n.setState({showPreview:!1})}),D(S(n),"showPreview",function(){n.setState({showPreview:!0})}),D(S(n),"getDuration",function(){return n.player?n.player.getDuration():null}),D(S(n),"getCurrentTime",function(){return n.player?n.player.getCurrentTime():null}),D(S(n),"getSecondsLoaded",function(){return n.player?n.player.getSecondsLoaded():null}),D(S(n),"getInternalPlayer",function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null}),D(S(n),"seekTo",function(e,t){if(!n.player)return null;n.player.seekTo(e,t)}),D(S(n),"handleReady",function(){n.props.onReady(S(n))}),D(S(n),"wrapperRef",function(e){n.wrapper=e}),D(S(n),"activePlayerRef",function(e){n.player=e}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_(e,t)}(i,h.Component),function(e,t,n){t&&E(e.prototype,t),n&&E(e,n)}(i,[{key:"componentDidMount",value:function(){if(this.props.progressFrequency){console.warn("ReactPlayer: %cprogressFrequency%c is deprecated, please use %cprogressInterval%c instead","font-weight: bold","","font-weight: bold","")}}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,we.isEqual)(this.props,e)||!(0,we.isEqual)(this.state,t)}},{key:"componentDidUpdate",value:function(e){var t=this.props.light;this.config=(0,we.getConfig)(this.props,K.defaultProps),!e.light&&t&&this.setState({showPreview:!0}),e.light&&!t&&this.setState({showPreview:!1})}},{key:"getActivePlayer",value:function(e){for(var t=0,n=[].concat(j(R),j(o.default));t<n.length;t++){var r=n[t];if(r.canPlay(e))return r}return a.FilePlayer}},{key:"renderActivePlayer",value:function(e,t){return e?h.default.createElement(n.default,O({},this.props,{key:t.displayName,ref:this.activePlayerRef,config:this.config,activePlayer:t,onReady:this.handleReady})):null}},{key:"sortPlayers",value:function(e,t){return e&&t?e.key<t.key?-1:1:0}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.controls,r=e.style,o=e.width,i=e.height,a=e.light,u=e.wrapper,l=this.state.showPreview&&t,c=(0,we.omit)(this.props,T,K.DEPRECATED_CONFIG_PROPS),s=this.getActivePlayer(t),f=this.renderActivePlayer(t,s),p=(0,m.default)(t,n,this.config),y=[f].concat(j(p)).sort(this.sortPlayers),d=h.default.createElement(v.default,{url:t,light:a,onClick:this.handleClickPreview});return h.default.createElement(u,O({ref:this.wrapperRef,style:function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?w(n,!0).forEach(function(e){D(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):w(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}({},r,{width:o,height:i})},c),l?d:y)}}]),i}();D(t.default=M,"addCustomPlayer",function(e){R.push(e)}),D(M,"removeCustomPlayers",function(){R=[]}),D(M,"displayName","ReactPlayer"),D(M,"propTypes",K.propTypes),D(M,"defaultProps",K.defaultProps),D(M,"canPlay",function(e){for(var t=0,n=[].concat(j(R),j(o.default));t<n.length;t++){if(n[t].canPlay(e))return!0}return!1}),D(M,"canEnablePIP",function(e){for(var t=0,n=[].concat(j(R),j(o.default));t<n.length;t++){var r=n[t];if(r.canEnablePIP&&r.canEnablePIP(e))return!0}return!1})})),Ne=function(){function i(){var e,o;c(this,i);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return s(d(o=h(this,(e=p(i)).call.apply(e,[this].concat(n)))),"state",{playing:o.props.playVideo||!1}),s(d(o),"handlePlayerProgress",function(e){if(e.loaded){var t=e.playedSeconds,n=o.props.timeRange.start,r=o.props.timeRange.end<=t;t<=n&&o.player.seekTo(n,"seconds"),r&&o.player.seekTo(n,"seconds"),(o.props.onPlayerProgress||v)(t)}}),s(d(o),"handleOnPause",function(){(o.props.onPlayerPause||v)()}),s(d(o),"handleOnPlay",function(){(o.props.onPlayerPlay||v)()}),o}return f(i,x.Component),a(i,[{key:"componentWillReceiveProps",value:function(e){var t=e.timeRange,n=this.props.timeRange;(n&&t.start!==n.start||!n&&0<t.start)&&(this.setState({playing:!1}),this.player.seekTo(t.start,"seconds")),e.playVideo!==this.props.playVideo&&this.setState({playing:e.playVideo})}},{key:"displaySeconds",value:function(e){return e.toFixed(2)+"s"}},{key:"render",value:function(){var e,t=this,n=this.props.timeRange,r=n.start,o=n.end;return x.createElement("div",{className:"rvt-player-cont",onContextMenu:function(){}},x.createElement(Ve,(s(e={onPlay:this.handleOnPause},"onPlay",this.handleOnPlay),s(e,"onProgress",this.handlePlayerProgress),s(e,"url",this.props.src),s(e,"ref",function(e){return t.player=e}),s(e,"playing",this.state.playing),s(e,"style",{margin:"0 auto"}),e)),x.createElement("div",{className:"rvt-player-time-range-cont"},x.createElement("span",{className:"rvt-player-time-range"},"From: ",x.createElement("strong",null,this.displaySeconds(r))),x.createElement("span",{className:"rvt-player-time-range"},"To: ",x.createElement("strong",null,this.displaySeconds(o))),x.createElement("span",{className:"rvt-player-time-range"},"Selected ",x.createElement("strong",null,this.displaySeconds(o-r))," of"," ",x.createElement("strong",null,this.displaySeconds(this.props.timeLimit))," allowed")))}}]),i}(),Be=function(){function i(){var e,t;c(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return s(d(t=h(this,(e=p(i)).call.apply(e,[this].concat(r)))),"_screenX",null),s(d(t),"_screenY",null),s(d(t),"_ox",null),s(d(t),"_oy",null),s(d(t),"handleMouseDown",function(e){t._screenX=e.screenX,t._screenY=e.screenY,t._ox=t.props.x,t._oy=t.props.y,window.addEventListener("mousemove",t.handleMouseMove,!1),window.addEventListener("mouseup",t.handleMouseUp,!1)}),s(d(t),"handleMouseMove",function(e){t.props.onDrag({x:e.screenX-t._screenX+t._ox,y:e.screenY-t._screenY+t._oy})}),s(d(t),"handleMouseUp",function(){window.removeEventListener("mousemove",t.handleMouseMove),window.removeEventListener("mouseup",t.handleMouseUp),(t.props.onDragStop||function(){})()}),t}return f(i,ie.PureComponent),a(i,[{key:"render",value:function(){return x.createElement("div",{className:"rvt-dragger "+this.props.className||"",onMouseDown:this.handleMouseDown,style:{left:this.props.x+"px",top:this.props.y+"px"}},this.props.children)}}]),i}();s(Be,"defaultProps",{onDrag:function(){},x:0,y:0}),s(Be,"propTypes",{x:y.number,y:y.number,onDrag:y.func,className:y.string,children:y.element});function We(e){return x.createElement("div",{className:"rvt-trimmer",style:{width:e.width,left:e.left,right:e.right}})}function Ue(e){var t=function(e){return[Math.floor(e/60),Math.floor(e%60),Math.round(e%1*100)]}(e.time);return x.createElement("div",{className:"rvt-player-cursor-current"},x.createElement("span",{className:"rvt-player-num"},t[0]),"'",x.createElement("span",{className:"rvt-player-num"},t[1]),!e.noMicroSeconds&&x.createElement(x.Fragment,null,".",x.createElement("span",{className:"rvt-player-num"},function(e,t){return("000000"+e).slice(-t)}(t[2],2))))}var ze=function(){function o(){var e,a;c(this,o);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return s(d(a=h(this,(e=p(o)).call.apply(e,[this].concat(n)))),"pos2Time",function(e){return e/a.props.widthDurationRatio}),s(d(a),"time2pos",function(e){return e*a.props.widthDurationRatio}),s(d(a),"keepInRange",function(e){var t=a.props.containerWidth;return e<0?0:t<e?t:e}),s(d(a),"withinTimeLimit",function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=a.props.timeLimit,r=a.props.startTime,o=e;t||(r=e,o=a.props.endTime);var i=a.props.duration;return!n||i-r-(i-o)<=n}),s(d(a),"withinTimeRange",function(e){var t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],n=a.props.timeRangeLimit,r=e-a.props.startTime;return t||(r=a.props.endTime-e),!n||n<=r}),s(d(a),"handleDragStart",function(e){var t=a.pos2Time(a.keepInRange(e.x)),n=a.props.currentTime,r=a.withinTimeRange(t,!1),o=a.withinTimeLimit(t,!1);!(n<=t)&&r&&o||(t=a.props.startTime,(a.props.onPausePlayer||function(){})());a.props.onStartTimeChange(t)}),s(d(a),"handleDragEnd",function(e){var t=a.pos2Time(a.keepInRange(e.x)),n=(a.props.endTime,a.props.currentTime),r=a.withinTimeRange(t),o=a.withinTimeLimit(t);!(t<=n)&&r&&o||(t=a.props.endTime,(a.props.onPausePlayer||function(){})());a.props.onEndTimeChange(t)}),s(d(a),"handleDragStop",function(){(a.props.onGetData||v)({start:a.props.startTime,end:a.props.endTime})}),s(d(a),"getTrimmerWidth",function(e){return a.props.containerWidth-e}),a}return f(o,ie.PureComponent),a(o,[{key:"render",value:function(){var e=this.time2pos(this.props.startTime),t=this.time2pos(this.props.endTime),n=this.time2pos(this.props.currentTime);return x.createElement(x.Fragment,null,x.createElement(We,{left:0,width:e}),x.createElement(Be,{x:e,onDrag:this.handleDragStart,onDragStop:this.handleDragStop},x.createElement(Ue,{time:this.props.startTime})),x.createElement(Be,{x:n,onDrag:function(){},onDragStop:function(){}},x.createElement(Ue,{noMicroSeconds:!0,time:this.props.currentTime})),x.createElement(Be,{x:t,onDrag:this.handleDragEnd,onDragStop:this.handleDragStop},x.createElement(Ue,{time:this.props.endTime})),x.createElement(We,{right:0,width:this.getTrimmerWidth(t)}))}}]),o}(),Ge=function(){function i(){var e,t;c(this,i);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return s(d(t=h(this,(e=p(i)).call.apply(e,[this].concat(r)))),"state",{start:0,end:0}),s(d(t),"handleStartTimeChange",function(e){t.setState({start:e})}),s(d(t),"handleGetTrimData",function(){var e=t.props.onTrim||v;setTimeout(function(){return e({start:t.state.start||t.props.timeRange.start,end:t.state.end||t.props.timeRange.end})},200)}),s(d(t),"handleEndTimeChange",function(e){t.setState({end:e})}),t}return f(i,ie.PureComponent),a(i,[{key:"render",value:function(){var t=this;return x.createElement("div",{className:"rvt-trimmer-cont",ref:function(e){return t.containerRef=e}},this.props.showTrimmer&&x.createElement(ze,{timeLimit:this.props.timeLimit,onStartTimeChange:this.handleStartTimeChange,onEndTimeChange:this.handleEndTimeChange,widthDurationRatio:this.widthDurationRatio,containerWidth:this.containerWidth,startTime:this.state.start||this.props.timeRange.start,endTime:this.state.end||this.props.timeRange.end,currentTime:this.props.currentTime,duration:this.props.duration,onGetData:this.handleGetTrimData,onPausePlayer:this.onPausePlayer}))}},{key:"widthDurationRatio",get:function(){return this.containerWidth/this.props.duration}},{key:"containerWidth",get:function(){return this.containerRef.getBoundingClientRect().width}}]),i}();function He(){}function Ke(){Ke.init.call(this)}function qe(e){return void 0===e._maxListeners?Ke.defaultMaxListeners:e._maxListeners}function Ye(e,t,n,r){var o,i,a;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((i=e._events)?(i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),a=i[t]):(i=e._events=new He,e._eventsCount=0),a){if("function"==typeof a?a=i[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),!a.warned&&(o=qe(e))&&0<o&&a.length>o){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,function(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(u)}}else a=i[t]=n,++e._eventsCount;return e}function $e(e,t,n){var r=!1;function o(){e.removeListener(t,o),r||(r=!0,n.apply(e,arguments))}return o.listener=n,o}function Xe(e){var t=this._events;if(t){var n=t[e];if("function"==typeof n)return 1;if(n)return n.length}return 0}function Ze(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}He.prototype=Object.create(null),(Ke.EventEmitter=Ke).usingDomains=!1,Ke.prototype.domain=void 0,Ke.prototype._events=void 0,Ke.prototype._maxListeners=void 0,Ke.defaultMaxListeners=10,Ke.init=function(){this.domain=null,Ke.usingDomains&&(void 0).active&&(void 0).Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new He,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},Ke.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},Ke.prototype.getMaxListeners=function(){return qe(this)},Ke.prototype.emit=function(e,t,n,r){var o,i,a,u,l,c,s,f="error"===e;if(c=this._events)f=f&&null==c.error;else if(!f)return!1;if(s=this.domain,f){if(o=t,s)return(o=o||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,o.domain=s,o.domainThrown=!1,s.emit("error",o),!1;if(o instanceof Error)throw o;var p=new Error('Uncaught, unspecified "error" event. ('+o+")");throw p.context=o,p}if(!(i=c[e]))return!1;var y="function"==typeof i;switch(a=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,o=Ze(e,r),i=0;i<r;++i)o[i].call(n)}(i,y,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var o=e.length,i=Ze(e,o),a=0;a<o;++a)i[a].call(n,r)}(i,y,this,t);break;case 3:!function(e,t,n,r,o){if(t)e.call(n,r,o);else for(var i=e.length,a=Ze(e,i),u=0;u<i;++u)a[u].call(n,r,o)}(i,y,this,t,n);break;case 4:!function(e,t,n,r,o,i){if(t)e.call(n,r,o,i);else for(var a=e.length,u=Ze(e,a),l=0;l<a;++l)u[l].call(n,r,o,i)}(i,y,this,t,n,r);break;default:for(u=new Array(a-1),l=1;l<a;l++)u[l-1]=arguments[l];!function(e,t,n,r){if(t)e.apply(n,r);else for(var o=e.length,i=Ze(e,o),a=0;a<o;++a)i[a].apply(n,r)}(i,y,this,u)}return!0},Ke.prototype.on=Ke.prototype.addListener=function(e,t){return Ye(this,e,t,!1)},Ke.prototype.prependListener=function(e,t){return Ye(this,e,t,!0)},Ke.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,$e(this,e,t)),this},Ke.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,$e(this,e,t)),this},Ke.prototype.removeListener=function(e,t){var n,r,o,i,a;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new He:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length;0<i--;)if(n[i]===t||n[i].listener&&n[i].listener===t){a=n[i].listener,o=i;break}if(o<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new He,this;delete r[e]}else!function(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}(n,o);r.removeListener&&this.emit("removeListener",e,a||t)}return this},Ke.prototype.removeAllListeners=function(e){var t,n;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=new He,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new He:delete n[e]),this;if(0===arguments.length){for(var r,o=Object.keys(n),i=0;i<o.length;++i)"removeListener"!==(r=o[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new He,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},Ke.prototype.listeners=function(e){var t,n=this._events;return n&&(t=n[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(t):[]},Ke.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):Xe.call(e,t)},Ke.prototype.listenerCount=Xe,Ke.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};function Je(){importScripts("https://cdn.rawgit.com/bgrins/videoconverter.js/master/build/ffmpeg-all-codecs.js");var a=Date.now;function u(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;if("command"===t.type){var n={print:u,printErr:u,files:t.files||[],arguments:t.arguments||[],TOTAL_MEMORY:t.TOTAL_MEMORY||!1};postMessage({type:"start",data:n.arguments.join(" ")}),postMessage({type:"stdout",data:"Received command: "+n.arguments.join(" ")+(n.TOTAL_MEMORY?".  Processing with "+n.TOTAL_MEMORY+" bits.":"")});var r=a(),o=ffmpeg_run(n),i=a()-r;postMessage({type:"stdout",data:"Finished processing (took "+i+"ms)"}),postMessage({type:"done",data:o,time:i})}},postMessage({type:"ready"})}var Qe="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},et=V(N(function(e,t){var n;(n=t).default=function t(e){if(function(e){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this),"function"!=typeof e)throw new Error("File content must export a function");var n=e.toString(),r=new Blob(["("+n+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(r))},Object.defineProperty(n,"__esModule",{value:!0})}));function tt(e){return(tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function nt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function rt(e){return(rt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ot(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function it(e,t){return(it=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function at(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ut=function(){function e(){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),at(ot(o=function(e,t){return!t||"object"!==tt(t)&&"function"!=typeof t?ot(e):t}(this,rt(e).call(this))),"_worker",{}),at(ot(o),"_inputFile",{}),at(ot(o),"workerIsReady",!1),at(ot(o),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),at(ot(o),"runCommand",function(r){if("string"!=typeof r||!r.length)throw new Error("command should be string and not empty");o.inputFile&&o.inputFile.type?o.convertInputFileToArrayBuffer().then(function(e){for(;!o.workerIsReady;);var t="video.webm",n="-i ".concat(t," ").concat(r);o.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}]})}):o.worker.postMessage({type:"command",arguments:r.split(" ")})}),at(ot(o),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),at(ot(o),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),o.initWebWorker(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&it(e,t)}(e,Ke),function(e,t,n){t&&nt(e.prototype,t),n&&nt(e,n)}(e,[{key:"initWebWorker",value:function(){var n=this;this.worker=new et(Je),this.log;var r=this.worker.onmessage=function(e){var t=e.data;e&&e.type&&("ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),r("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data))}}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}},{key:"worker",set:function(e){this._worker=e},get:function(){return this._worker}},{key:"inputFile",set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e},get:function(){return this._inputFile}}]),e}(),lt={on:function(){},emit:function(){}},ct=Qe||window;ct&&ct.Blob&&(lt=new ut);var st=lt,ft=function n(r,e,t){return void 0===e?function(e,t){return n(r,e,t)}:(void 0===t&&(t="0"),0<(r-=e.toString().length)?new Array(r+(/\./.test(e)?2:1)).join(t)+e:e+"")},pt=36e5,yt=6e4,dt=1e3,ht="Time format error";function vt(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");var r=Math.abs(e);return function(e,t){var n,r,o;switch(t.toLowerCase()){case"hh:mm:ss.sss":o=r=n=!0;break;case"hh:mm:ss":n=!!e.miliseconds,o=r=!0;break;case"hh:mm":n=!!e.miliseconds,r=n||!!e.seconds,o=!0;break;case"mm:ss":n=!!e.miliseconds,r=!0,o=!!e.hours;break;case"mm:ss.sss":r=n=!0,o=!!e.hours;break;default:throw new Error(ht)}var i=ft(2,e.hours),a=ft(2,e.minutes),u=ft(2,e.seconds),l=ft(3,e.miliseconds);return(e.negative?"-":"")+(o?n?"".concat(i,":").concat(a,":").concat(u,".").concat(l):r?"".concat(i,":").concat(a,":").concat(u):"".concat(i,":").concat(a):n?"".concat(a,":").concat(u,".").concat(l):"".concat(a,":").concat(u))}({negative:e<0,hours:Math.floor(r/pt),minutes:Math.floor(r%pt/yt),seconds:Math.floor(r%yt/dt),miliseconds:Math.floor(r%dt)},n)}var mt=function(){function t(e){var v;return c(this,t),s(d(v=h(this,p(t).call(this))),"trimVideo",function(){var e=1<arguments.length?arguments[1]:void 0,t=function(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");return vt(e*dt,n)}(0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,"hh:mm:ss");st.runCommand("-ss ".concat(t," -c copy -t ").concat(e," sliced-output.mp4"))}),s(d(v),"_videoData",{}),s(d(v),"_videoFile",null),s(d(v),"_videoBuffer",{}),s(d(v),"readAsArrayBuffer",m(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t=v._videoFile,o(t,"ArrayBuffer");case 2:return v._videoBuffer=e.sent,e.abrupt("return",v.videoBuffer);case 4:case"end":return e.stop()}var t},e)}))),s(d(v),"convertBufferToBlob",function(e){var t=null;return(e=e||v.videoBuffer).byteLength&&(t=i(e)),t}),s(d(v),"readAsDataURL",function(){var n=m(regeneratorRuntime.mark(function e(t,n){var r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=t||v.videoBuffer,n=n||v.convertBufferToBlob(t),r=null,n)return e.next=6,o(n,"DataURL");e.next=7;break;case 6:r=e.sent;case 7:return e.abrupt("return",r);case 8:case"end":return e.stop()}},e)}));return function(e,t){return n.apply(this,arguments)}}()),s(d(v),"decode",function(){var t=m(regeneratorRuntime.mark(function e(t){var n,r,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return v.videoFile=t,v.emit("processingFile"),e.next=4,v.readAsArrayBuffer();case 4:return n=e.sent,e.next=7,v.readAsDataURL(n);case 7:r=e.sent,o=URL.createObjectURL(v.videoFile),(i=document.createElement("video")).src=o;case 11:if((i.duration===1/0||isNaN(i.duration))&&i.readyState<2)return e.next=14,new Promise(function(e){return setTimeout(e,1e3)});e.next=17;break;case 14:i.currentTime=1e7*Math.random(),e.next=11;break;case 17:return v._videoData=i,v.emit("processedFile"),e.abrupt("return",{dataURL:r,arrayBuffer:n,blob:v.convertBufferToBlob()});case 20:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),s(d(v),"generateBufferChunks",function(){var u=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];return new Promise(function(e,t){try{var n=[];u=u.byteLength?u:v.videoBuffer;for(var r=new Uint8Array(u),o=0,i=6e4;i<r.byteLength;i+=6e4){var a=u.slice(o,i);n.push(a),o=i}e(n)}catch(e){t(e)}})}),s(d(v),"extractFramesFromVideo",function(){var h=0<arguments.length&&void 0!==arguments[0]?arguments[0]:25;return new Promise(function(){var n=m(regeneratorRuntime.mark(function e(t,n){var r,o,i,a,u,l,c,s,f,p,y,d;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,v.emit("extractingFrames"),(r=v._videoData).addEventListener("seeked",m(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o&&o();case 1:case"end":return e.stop()}},e)}))),i=r.duration,a=document.createElement("canvas"),u=a.getContext("2d"),l=[r.videoWidth,r.videoHeight],c=l[0],s=l[1],a.width=c,a.height=s,f=[],p=125/h,y=0;case 13:if(y<i)return r.currentTime=y,e.next=17,new Promise(function(e){return o=e});e.next=23;break;case 17:u.drawImage(r,0,0,c,s),d=a.toDataURL(),f.push(d),y+=p,e.next=13;break;case 23:v.emit("extractedFrames"),t(f),e.next=30;break;case 27:e.prev=27,e.t0=e.catch(0),n(e.t0);case 30:case"end":return e.stop()}},e,null,[[0,27]])}));return function(e,t){return n.apply(this,arguments)}}())}),v.videoFile=e,st.on("onReady",function(){return v.emit("FFMPEGReady")}),st.on("onStdout",function(e){return v.emit("FFMPEGStdout",e)}),st.on("onFileReceived",function(){return v.emit("FFMPEGFileReceived")}),st.on("onDone",function(e){return v.emit("FFMPEGDone",e)}),v}return f(t,Ke),a(t,[{key:"videoFile",set:function(e){e&&e.type&&(st.inputFile=e),this._videoFile=e},get:function(){return this._videoFile}},{key:"duration",get:function(){return this._videoData.duration||0}},{key:"videoData",get:function(){return this._videoData}},{key:"videoBuffer",get:function(){return this._videoBuffer}}]),t}(),bt=function(){function n(e){var u,t=this;return c(this,n),s(d(u=h(this,p(n).call(this,e))),"webVideo",new mt({})),s(d(u),"handleFFMPEGStdout",function(e){}),s(d(u),"handleFFMPEGReady",function(){}),s(d(u),"handleFFMPEGFileReceived",function(){}),s(d(u),"handleFFMPEGDone",function(e){u.setState({timeRange:{start:0,end:u.state.timeRange.end}});var t=i(e[0].data);u.decodeVideoFile(t,function(){(u.props.onVideoEncode||v)(e),u.setState({encoding:!1,encoded:!0,encodedVideo:t})})}),s(d(u),"state",{decoding:!1,encoding:!1,encoded:!1,playVideo:!1,videoDataURL:"",videoFrames:[],isDecoding:!1,timeRange:{start:5,end:u.props.timeLimit||15},encodedVideo:null,playedSeconds:0}),s(d(u),"updateVideoDataURL",function(e){return u.setState({videoDataURL:e})}),s(d(u),"updateVideoFrames",function(e){return u.setState({videoFrames:e})}),s(d(u),"updateIsDecoding",function(e){return u.setState({updateIsDecoding:e})}),s(d(u),"updateVideoDuration",function(e){return u.setState({updateVideoDuration:e})}),s(d(u),"decodeVideoFile",function(e){var a=1<arguments.length&&void 0!==arguments[1]?arguments[1]:v;u.setState({decoding:!0});var t=u.webVideo;t.videoFile=e,t.decode(e).then(function(e){e.blob,e.arrayBuffer;var t=e.dataURL;u.updateVideoDataURL(t);var n=u.state.timeRange.start,r=u.webVideo.videoData.duration,o=n+(u.props.timeLimit||10),i=o<r?o:r;u.setState({timeRange:{start:n,end:i},playedSeconds:(i-n)/2+n}),u.setState({decoding:!1}),a()})}),s(d(u),"handleFileSelected",function(e){u.decodeVideoFile(e)}),s(d(u),"handleVideoTrim",function(e){u.setState({timeRange:e})}),s(d(u),"handleEncodeVideo",function(e){u.setState({encoding:!0,videoDataURL:"",playVideo:!1});var t=e.end-e.start;u.webVideo.trimVideo(e.start,t)}),s(d(u),"handlePlayPauseVideo",function(){var e=u.state.playVideo;u.setState({playVideo:!e})}),s(d(u),"handlePlayerPause",function(){console.log("pause video"),u.setState({playVideo:!1})}),s(d(u),"handlePlayerPlay",function(){u.setState({playVideo:!0})}),s(d(u),"handlePlayerProgress",function(e){u.state.playVideo&&u.setState({playedSeconds:e})}),s(d(u),"handleReselectFile",function(){var e={decoding:!1,encoding:!1,encoded:!1,encodedVideo:null,playVideo:!1,videoDataURL:"",videoFrames:[],isExtractingFrame:!1,isDecoding:!1,timeRange:u.props.timeRange||{start:0,end:0}};u.setState(e)}),s(d(u),"VideoPlayerWithTrimmer",function(e){var t=e.showTrimmer,n=u.state,r=n.decoding,o=n.encoding,i=n.encoded,a=n.videoDataURL;return x.createElement(x.Fragment,null,!r&&!o&&a&&x.createElement(Ne,{src:u.state.videoDataURL,timeRange:u.state.timeRange,timeLimit:u.props.timeLimit,playVideo:u.state.playVideo,onPlayerPlay:u.handlePlayerPlay,onPlayerPause:u.handlePlayerPause,onPlayerProgress:u.handlePlayerProgress}),t&&x.createElement(Ge,{onPausePlayer:u.handlePlayerPause,showTrimmer:u.state.videoDataURL,duration:u.webVideo.videoData.duration,onTrim:u.handleVideoTrim,timeLimit:u.props.timeLimit,timeRangeLimit:u.props.timeRange,timeRange:u.state.timeRange,currentTime:u.state.playedSeconds}),!r&&!o&&a&&x.createElement(Ie,{onDownload:function(){return u.handleDownloadVideo(u.state.encodedVideo)},canDownload:i,showEncodeBtn:u.props.showEncodeBtn,onReselectFile:u.handleReselectFile,onEncode:function(){return u.handleEncodeVideo(u.state.timeRange)},onPlayPauseClick:u.handlePlayPauseVideo,processing:o,playing:u.state.playVideo}))}),s(d(u),"handleDownloadVideo",function(e){!function(e,t){var n=document.createElement("a");n.href=e,n.download=t,n.click()}(function(e){return URL.createObjectURL(e)}(e),"trimmed.mp4")}),s(d(u),"VideoPlayerNoTrimmer",function(){return x.createElement(t.VideoPlayerWithTrimmer,null)}),u.webVideo.on("processingFile",function(){return u.updateIsDecoding(!0)}),u.webVideo.on("processedFile",function(){return u.updateIsDecoding(!1)}),u.webVideo.on("FFMPEGStdout",u.handleFFMPEGStdout),u.webVideo.on("FFMPEGReady",u.handleFFMPEGReady),u.webVideo.on("FFMPEGFileReceived",u.handleFFMPEGFileReceived),u.webVideo.on("FFMPEGDone",u.handleFFMPEGDone),u}return f(n,x.PureComponent),a(n,[{key:"render",value:function(){var e=this.state,t=e.decoding,n=e.encoding,r=e.encoded,o=e.videoDataURL;return x.createElement("div",{className:"rvt-main-container"},r?x.createElement(this.VideoPlayerNoTrimmer,null):x.createElement(x.Fragment,null,!t&&!n&&!o&&x.createElement(G,{onFileSelected:this.handleFileSelected,minSize:this.props.minSize,maxSize:this.props.maxSize}),(t||n)&&x.createElement(H,null,x.createElement(E,{name:"spin",className:"rvt-icon-spin"}),n?"ENCODING VIDEO":"DECODING VIDEO","..."),x.createElement(this.VideoPlayerWithTrimmer,{showTrimmer:!0})))}}]),n}();s(bt,"propTypes",{onVideoEncode:y.func,showEncodeBtn:y.bool,timeLimit:y.number}),e.default=bt,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
