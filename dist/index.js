!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],t):t((e=e||self).reactVideoTrimmer={},e.React,e.PropTypes)}(this,function(e,o,f){"use strict";var P="default"in o?o.default:o;function u(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function m(l){return function(){var e=this,i=arguments;return new Promise(function(t,n){var r=l.apply(e,i);function o(e){u(r,t,n,o,a,"next",e)}function a(e){u(r,t,n,o,a,"throw",e)}o(void 0)})}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?d(e):t}f=f&&f.hasOwnProperty("default")?f.default:f;function a(r,e){var o=1<arguments.length&&void 0!==e?e:"ArrayBuffer";return new Promise(function(e,t){var n=new FileReader;n["readAs"+o](r),n.onload=function(){return e(n.result)},n.onerror=function(e){return t(e)}})}function h(){}function g(e){return new Blob([new Uint8Array(e,0,e.byteLength)],{type:"video/webm",name:"video.webm"})}function v(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"}),P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}))}function b(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z"}))}function w(e){var t=e.className;return P.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"}))}function k(e){var t=e.className;return P.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z"}))}function E(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"}))}function _(e){var t=e.className;return P.createElement("svg",{className:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 42 42"},P.createElement("path",{d:"M21 37c-4.3 0-8.3-1.7-11.3-4.7S5 25.3 5 21c0-3 .8-6 2.5-8.5C9 10 11.2 8 13.8 6.7l1.3 2.7c-2.1 1.1-3.9 2.7-5.2 4.7-1.3 2.1-2 4.5-2 6.9 0 7.2 5.8 13 13 13s13-5.8 13-13c0-2.5-.7-4.9-2-6.9s-3.1-3.6-5.2-4.7L28 6.7c2.8 1.3 5 3.3 6.5 5.8C36.2 15 37 18 37 21c0 4.3-1.7 8.3-4.7 11.3S25.3 37 21 37z"}))}function O(e){var t=v;switch(e.name){case"music":t=b;break;case"play":t=w;break;case"pause":t=k;break;case"replay":t=E;break;case"spin":t=_;break;default:t=v}return P.createElement(t,{className:"rvt-icon rat-icon-".concat(e.name," ").concat(e.className).trim()})}function S(n){var e=o.useRef(),t=o.useCallback(function(e){if(e.target.files.length){var t=e.target.files[0];if(!function(e){return-1<e.type.indexOf("video")}(t))return alert("Unsupported File Type");(n.onFileSelected||h)(t)}}),r=o.useCallback(function(){e.current.click()});return P.createElement("div",{className:"rvt-file-picker",onClick:r},P.createElement(O,{name:"music"}),"Pick A Video",P.createElement("input",{type:"file",accept:"video/*",onChange:t,ref:e}))}O.propTypes={name:f.string};function T(e){var t=e.children;return P.createElement("div",{className:"rvt-status"},t)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function t(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function j(e,t){return e(t={exports:{}},t.exports),t.exports}function R(e,t,n){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("script");"function"==typeof t&&(n=t,t={}),t=t||{},n=n||function(){},o.type=t.type||"text/javascript",o.charset=t.charset||"utf8",o.async=!("async"in t)||!!t.async,o.src=e,t.attrs&&function(e,t){for(var n in t)e.setAttribute(n,t[n])}(o,t.attrs),t.text&&(o.text=""+t.text),("onload"in o?D:L)(o,n),o.onload||D(o,n),r.appendChild(o)}function D(e,t){e.onload=function(){this.onerror=this.onload=null,t(null,e)},e.onerror=function(){this.onerror=this.onload=null,t(new Error("Failed to load "+this.src),e)}}function L(e,t){e.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||(this.onreadystatechange=null,t(null,e))}}var C=j(function(e,t){function i(e,t){return!1!==t.clone&&t.isMergeableObject(e)?s(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function l(e,t,n){return e.concat(t).map(function(e){return i(e,n)})}function a(e){return Object.keys(e).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter(function(e){return t.propertyIsEnumerable(e)}):[]}(e))}function u(t,n,r){var o={};return r.isMergeableObject(t)&&a(t).forEach(function(e){o[e]=i(t[e],r)}),a(n).forEach(function(e){r.isMergeableObject(n[e])&&t[e]?o[e]=function(e,t){if(!t.customMerge)return s;var n=t.customMerge(e);return"function"==typeof n?n:s}(e,r)(t[e],n[e],r):o[e]=i(n[e],r)}),o}function s(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||l,n.isMergeableObject=n.isMergeableObject||c;var r=Array.isArray(t),o=Array.isArray(e),a=r===o;return a?r?n.arrayMerge(e,t,n):u(e,t,n):i(t,n)}var c,n;e.exports=(c=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)},n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103,s.all=function(e,n){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,t){return s(e,t,n)},{})},s)}),M=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DEPRECATED_CONFIG_PROPS=t.defaultProps=t.propTypes=void 0;var n,r=(n=f)&&n.__esModule?n:{default:n};var o=r.default.string,a=r.default.bool,i=r.default.number,l=r.default.array,u=r.default.oneOfType,s=r.default.shape,c=r.default.object,p=r.default.func;t.propTypes={url:u([o,l,c]),playing:a,loop:a,controls:a,volume:i,muted:a,playbackRate:i,width:u([o,i]),height:u([o,i]),style:c,progressInterval:i,playsinline:a,pip:a,light:u([a,o]),wrapper:u([o,p,s({render:p.isRequired})]),config:s({soundcloud:s({options:c,preload:a}),youtube:s({playerVars:c,embedOptions:c,preload:a}),facebook:s({appId:o}),dailymotion:s({params:c,preload:a}),vimeo:s({playerOptions:c,preload:a}),file:s({attributes:c,tracks:l,forceVideo:a,forceAudio:a,forceHLS:a,forceDASH:a,hlsOptions:c,hlsVersion:o,dashVersion:o}),wistia:s({options:c}),mixcloud:s({options:c}),twitch:s({options:c})}),onReady:p,onStart:p,onPlay:p,onPause:p,onBuffer:p,onBufferEnd:p,onEnded:p,onError:p,onDuration:p,onSeek:p,onProgress:p,onEnablePIP:p,onDisablePIP:p},t.defaultProps={playing:!1,loop:!1,controls:!1,volume:null,muted:!1,playbackRate:1,width:"640px",height:"360px",style:{},progressInterval:1e3,playsinline:!1,pip:!1,light:!1,wrapper:"div",config:{soundcloud:{options:{visual:!0,buying:!1,liking:!1,download:!1,sharing:!1,show_comments:!1,show_playcount:!1}},youtube:{playerVars:{playsinline:1,showinfo:0,rel:0,iv_load_policy:3,modestbranding:1},embedOptions:{},preload:!1},facebook:{appId:"1309697205772819"},dailymotion:{params:{api:1,"endscreen-enable":!1},preload:!1},vimeo:{playerOptions:{autopause:!1,byline:!1,portrait:!1,title:!1},preload:!1},file:{attributes:{},tracks:[],forceVideo:!1,forceAudio:!1,forceHLS:!1,forceDASH:!1,hlsOptions:{},hlsVersion:"0.10.1",dashVersion:"2.9.2"},wistia:{options:{}},mixcloud:{options:{hide_cover:1}},twitch:{options:{}}},onReady:function(){},onStart:function(){},onPlay:function(){},onPause:function(){},onBuffer:function(){},onBufferEnd:function(){},onEnded:function(){},onError:function(){},onDuration:function(){},onSeek:function(){},onProgress:function(){},onEnablePIP:function(){},onDisablePIP:function(){}},t.DEPRECATED_CONFIG_PROPS=["soundcloudConfig","youtubeConfig","facebookConfig","dailymotionConfig","vimeoConfig","fileConfig","wistiaConfig"]});t(M);M.DEPRECATED_CONFIG_PROPS,M.defaultProps,M.propTypes;var x=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.parseStartTime=function(e){return c(e,a)},t.parseEndTime=function(e){return c(e,l)},t.randomString=function(){return Math.random().toString(36).substr(2,5)},t.queryString=function(t){return Object.keys(t).map(function(e){return e+"="+t[e]}).join("&")},t.getSDK=function(o,a){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:function(){return!0},l=4<arguments.length&&void 0!==arguments[4]?arguments[4]:r.default;if(window[a]&&e(window[a]))return Promise.resolve(window[a]);return new Promise(function(e,t){if(p[o])p[o].push(e);else{p[o]=[e];var n=function(t){p[o].forEach(function(e){return e(t)})};if(i){var r=window[i];window[i]=function(){r&&r(),n(window[a])}}l(o,function(e){e&&t(e),i||n(window[a])})}})},t.getConfig=function(e,t,n){var r=(0,f.default)(t.config,e.config),o=!0,a=!1,i=void 0;try{for(var l,u=M.DEPRECATED_CONFIG_PROPS[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;if(e[s]){var c=s.replace(/Config$/,"");if(r=(0,f.default)(r,d({},c,e[s])),n){var p="ReactPlayer: %c"+s+" %cis deprecated, please use the config prop instead – https://github.com/CookPete/react-player#config-prop";console.warn(p,"font-weight: bold","")}}}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return r},t.omit=function(e){for(var t,n=arguments.length,r=Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=(t=[]).concat.apply(t,r),i={},l=Object.keys(e),u=!0,s=!1,c=void 0;try{for(var p,f=l[Symbol.iterator]();!(u=(p=f.next()).done);u=!0){var d=p.value;-1===a.indexOf(d)&&(i[d]=e[d])}}catch(e){s=!0,c=e}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}return i},t.callPlayer=function(e){var t;if(!this.player||!this.player[e]){var n="ReactPlayer: "+this.constructor.displayName+" player could not call %c"+e+"%c – ";return this.player?this.player[e]||(n+="The method was not available"):n+="The player was not available",console.warn(n,"font-weight: bold",""),null}for(var r=arguments.length,o=Array(1<r?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return(t=this.player)[e].apply(t,o)},t.isObject=y,t.isEqual=function e(t,n){if("function"==typeof t&&"function"==typeof n)return!0;if(t instanceof Array&&n instanceof Array){if(t.length!==n.length)return!1;for(var r=0;r!==t.length;r++)if(!e(t[r],n[r]))return!1;return!0}if(y(t)&&y(n)){if(Object.keys(t).length!==Object.keys(n).length)return!1;var o=!0,a=!1,i=void 0;try{for(var l,u=Object.keys(t)[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;if(!e(t[s],n[s]))return!1}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return!0}return t===n},t.isMediaStream=function(e){return"undefined"!=typeof window&&void 0!==window.MediaStream&&e instanceof window.MediaStream};var r=o(R),f=o(C);function o(e){return e&&e.__esModule?e:{default:e}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=/[?&#](?:start|t)=([0-9hms]+)/,l=/[?&#]end=([0-9hms]+)/,u=/(\d+)(h|m|s)/g,s=/^\d+$/;function c(e,t){var n=e.match(t);if(n){var r=n[1];if(r.match(u))return function(e){var t=0,n=u.exec(e);for(;null!==n;){var r=i(n,3),o=r[1],a=r[2];"h"===a&&(t+=60*parseInt(o,10)*60),"m"===a&&(t+=60*parseInt(o,10)),"s"===a&&(t+=parseInt(o,10)),n=u.exec(e)}return t}(r);if(s.test(r))return parseInt(r)}}var p={};function y(e){return null!==e&&"object"===(void 0===e?"undefined":n(e))}});t(x);x.parseStartTime,x.parseEndTime,x.randomString,x.queryString,x.getSDK,x.getConfig,x.omit,x.callPlayer,x.isObject,x.isEqual,x.isMediaStream;var F=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,i=(a=P)&&a.__esModule?a:{default:a};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,P.Component),r(s,[{key:"componentDidMount",value:function(){this.mounted=!0,this.player.load(this.props.url),this.progress()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.progressTimeout),clearTimeout(this.durationCheckTimeout),this.isReady&&this.player.stop(),this.player.disablePIP&&this.player.disablePIP(),this.mounted=!1}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=this.props,r=n.url,o=n.playing,a=n.volume,i=n.muted,l=n.playbackRate,u=n.pip,s=n.loop;if(!(0,x.isEqual)(r,e.url)){if(this.isLoading)return console.warn("ReactPlayer: the attempt to load "+e.url+" is being deferred until the player has loaded"),void(this.loadOnReady=e.url);this.isLoading=!0,this.startOnPlay=!0,this.onDurationCalled=!1,this.player.load(e.url,this.isReady)}o||!e.playing||this.isPlaying||this.player.play(),o&&!e.playing&&this.isPlaying&&this.player.pause(),!u&&e.pip&&this.player.enablePIP?this.player.enablePIP():u&&!e.pip&&this.player.disablePIP&&this.player.disablePIP(),a!==e.volume&&null!==e.volume&&this.player.setVolume(e.volume),i!==e.muted&&(e.muted?this.player.mute():(this.player.unmute(),null!==e.volume&&setTimeout(function(){return t.player.setVolume(e.volume)}))),l!==e.playbackRate&&this.player.setPlaybackRate&&this.player.setPlaybackRate(e.playbackRate),s!==e.loop&&this.player.setLoop&&this.player.setLoop(e.loop)}},{key:"getDuration",value:function(){return this.isReady?this.player.getDuration():null}},{key:"getCurrentTime",value:function(){return this.isReady?this.player.getCurrentTime():null}},{key:"getSecondsLoaded",value:function(){return this.isReady?this.player.getSecondsLoaded():null}},{key:"seekTo",value:function(e,t){var n=this;if(!this.isReady&&0!==e)return this.seekOnPlay=e,void setTimeout(function(){n.seekOnPlay=null},5e3);if(t?"fraction"===t:0<e&&e<1){var r=this.player.getDuration();return r?void this.player.seekTo(r*e):void console.warn("ReactPlayer: could not seek using fraction – duration not yet available")}this.player.seekTo(e)}},{key:"render",value:function(){var e=this.props.activePlayer;return e?i.default.createElement(e,n({},this.props,{ref:this.ref,onReady:this.onReady,onPlay:this.onPlay,onPause:this.onPause,onEnded:this.onEnded,onLoaded:this.onLoaded,onError:this.onError})):null}}]),s);function s(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return t=n=l(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o))),c.call(n),l(n,t)}u.displayName="Player",u.propTypes=M.propTypes,u.defaultProps=M.defaultProps;var c=function(){var a=this;this.mounted=!1,this.isReady=!1,this.isPlaying=!1,this.isLoading=!0,this.loadOnReady=null,this.startOnPlay=!0,this.seekOnPlay=null,this.onDurationCalled=!1,this.getInternalPlayer=function(e){return a.player?a.player[e]:null},this.progress=function(){if(a.props.url&&a.player&&a.isReady){var e=a.getCurrentTime()||0,t=a.getSecondsLoaded(),n=a.getDuration();if(n){var r={playedSeconds:e,played:e/n};null!==t&&(r.loadedSeconds=t,r.loaded=t/n),r.playedSeconds===a.prevPlayed&&r.loadedSeconds===a.prevLoaded||a.props.onProgress(r),a.prevPlayed=r.playedSeconds,a.prevLoaded=r.loadedSeconds}}a.progressTimeout=setTimeout(a.progress,a.props.progressFrequency||a.props.progressInterval)},this.onReady=function(){if(a.mounted){a.isReady=!0,a.isLoading=!1;var e=a.props,t=e.onReady,n=e.playing,r=e.volume,o=e.muted;t(),o||null===r||a.player.setVolume(r),a.loadOnReady?(a.player.load(a.loadOnReady,!0),a.loadOnReady=null):n&&a.player.play(),a.onDurationCheck()}},this.onPlay=function(){a.isPlaying=!0,a.isLoading=!1;var e=a.props,t=e.onStart,n=e.onPlay,r=e.playbackRate;a.startOnPlay&&(a.player.setPlaybackRate&&a.player.setPlaybackRate(r),t(),a.startOnPlay=!1),n(),a.seekOnPlay&&(a.seekTo(a.seekOnPlay),a.seekOnPlay=null),a.onDurationCheck()},this.onPause=function(e){a.isPlaying=!1,a.isLoading||a.props.onPause(e)},this.onEnded=function(){var e=a.props,t=e.activePlayer,n=e.loop,r=e.onEnded;t.loopOnEnded&&n&&a.seekTo(0),n||(a.isPlaying=!1,r())},this.onError=function(){var e;a.isLoading=!1,(e=a.props).onError.apply(e,arguments)},this.onDurationCheck=function(){clearTimeout(a.durationCheckTimeout);var e=a.getDuration();e?a.onDurationCalled||(a.props.onDuration(e),a.onDurationCalled=!0):a.durationCheckTimeout=setTimeout(a.onDurationCheck,100)},this.onLoaded=function(){a.isLoading=!1},this.ref=function(e){e&&(a.player=e)}};t.default=u});t(F);var V=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.default=function(f){var e,t;return t=e=function(){function i(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=i.__proto__||Object.getPrototypeOf(i)).call.apply(e,[this].concat(o)))).config=(0,x.getConfig)(n.props,M.defaultProps,!0),n.getDuration=function(){return n.player?n.player.getDuration():null},n.getCurrentTime=function(){return n.player?n.player.getCurrentTime():null},n.getSecondsLoaded=function(){return n.player?n.player.getSecondsLoaded():null},n.getInternalPlayer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null},n.seekTo=function(e,t){if(!n.player)return null;n.player.seekTo(e,t)},n.ref=function(e){n.player=e},l(n,t)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,P.Component),n(i,[{key:"shouldComponentUpdate",value:function(e){return!(0,x.isEqual)(this.props,e)}},{key:"componentWillUpdate",value:function(e){this.config=(0,x.getConfig)(e,M.defaultProps)}},{key:"render",value:function(){var e=this.config.file,t=e.forceVideo,n=e.forceAudio,r=e.forceHLS,o=e.forceDASH,a=t||n||r||o;if(!f.canPlay(this.props.url)&&!a)return null;var i=this.props,l=i.style,u=i.width,s=i.height,c=i.wrapper,p=(0,x.omit)(this.props,v,M.DEPRECATED_CONFIG_PROPS);return y.default.createElement(c,d({style:d({},l,{width:u,height:s})},p),y.default.createElement(h.default,d({},this.props,{ref:this.ref,activePlayer:f,config:this.config})))}}]),i}(),e.displayName=f.displayName+"Player",e.propTypes=M.propTypes,e.defaultProps=M.defaultProps,e.canPlay=f.canPlay,t};var y=o(P),h=o(F);function o(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=Object.keys(M.propTypes)});t(V);var A=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.YouTube=void 0;var h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},a=l(P),i=l(V);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})|youtube\.com\/playlist\?list=/,m=/list=([a-zA-Z0-9_-]+)/;function g(e){if(m.test(e)){var t=e.match(m);return{listType:"playlist",list:o(t,2)[1]}}return{}}var s=t.YouTube=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"load",value:function(t,e){var n=this,r=this.props,o=r.playing,a=r.muted,i=r.playsinline,l=r.controls,u=r.loop,s=r.config,c=r.onError,p=s.youtube,f=p.playerVars,d=p.embedOptions,y=t&&t.match(v)[1];if(e)return m.test(t)?void this.player.loadPlaylist(g(t)):void this.player.cueVideoById({videoId:y,startSeconds:(0,x.parseStartTime)(t)||f.start,endSeconds:(0,x.parseEndTime)(t)||f.end});(0,x.getSDK)("https://www.youtube.com/iframe_api","YT","onYouTubeIframeAPIReady",function(e){return e.loaded}).then(function(e){n.container&&(n.player=new e.Player(n.container,h({width:"100%",height:"100%",videoId:y,playerVars:h({autoplay:o?1:0,mute:a?1:0,controls:l?1:0,start:(0,x.parseStartTime)(t),end:(0,x.parseEndTime)(t),origin:window.location.origin,playsinline:i},g(t),f),events:{onReady:function(){u&&n.player.setLoop(!0),n.props.onReady()},onStateChange:n.onStateChange,onError:function(e){return c(e.data)}}},d)))},c)}},{key:"play",value:function(){this.callPlayer("playVideo")}},{key:"pause",value:function(){this.callPlayer("pauseVideo")}},{key:"stop",value:function(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",e),this.props.playing||this.pause()}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("setPlaybackRate",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}},{key:"render",value:function(){return a.default.createElement("div",{style:{width:"100%",height:"100%"}},a.default.createElement("div",{ref:this.ref}))}}]),c);function c(){var e,t,m;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=m=u(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(r)))).callPlayer=x.callPlayer,m.onStateChange=function(e){var t=e.data,n=m.props,r=n.onPlay,o=n.onPause,a=n.onBuffer,i=n.onBufferEnd,l=n.onEnded,u=n.onReady,s=n.loop,c=window.YT.PlayerState,p=c.PLAYING,f=c.PAUSED,d=c.BUFFERING,y=c.ENDED,h=c.CUED;if(t===p&&(r(),i()),t===f&&o(),t===d&&a(),t===y){var v=!!m.callPlayer("getPlaylist");s&&!v&&m.play(),l()}t===h&&u()},m.mute=function(){m.callPlayer("mute")},m.unmute=function(){m.callPlayer("unMute")},m.ref=function(e){m.container=e},u(m,t)}s.displayName="YouTube",s.canPlay=function(e){return v.test(e)},t.default=(0,i.default)(s)});t(A);A.YouTube;var I=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.SoundCloud=void 0;var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(V);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/(soundcloud\.com|snd\.sc)\/.+$/,s=t.SoundCloud=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(p,P.Component),n(p,[{key:"load",value:function(l,u){var s=this;(0,x.getSDK)("https://w.soundcloud.com/player/api.js","SC").then(function(e){if(s.iframe){var t=e.Widget.Events,n=t.PLAY,r=t.PLAY_PROGRESS,o=t.PAUSE,a=t.FINISH,i=t.ERROR;u||(s.player=e.Widget(s.iframe),s.player.bind(n,s.props.onPlay),s.player.bind(o,s.props.onPause),s.player.bind(r,function(e){s.currentTime=e.currentPosition/1e3,s.fractionLoaded=e.loadedProgress}),s.player.bind(a,function(){return s.props.onEnded()}),s.player.bind(i,function(e){return s.props.onError(e)})),s.player.load(l,c({},s.props.config.soundcloud.options,{callback:function(){s.player.getDuration(function(e){s.duration=e/1e3,s.props.onReady()})}}))}})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",1e3*e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.fractionLoaded*this.duration}},{key:"render",value:function(){return o.default.createElement("iframe",{ref:this.ref,src:"https://w.soundcloud.com/player/?url="+encodeURIComponent(this.props.url),style:{width:"100%",height:"100%"},frameBorder:0,allow:"autoplay"})}}]),p);function p(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=p.__proto__||Object.getPrototypeOf(p)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.duration=null,n.currentTime=null,n.fractionLoaded=null,n.mute=function(){n.setVolume(0)},n.unmute=function(){null!==n.props.volume&&n.setVolume(n.props.volume)},n.ref=function(e){n.iframe=e},l(n,t)}s.displayName="SoundCloud",s.canPlay=function(e){return u.test(e)},s.loopOnEnded=!0,t.default=(0,a.default)(s)});t(I);I.SoundCloud;var N=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Vimeo=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=l(P),i=l(V);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=/vimeo\.com\/.+/,c=/vimeo\.com\/external\/[0-9]+\..+/,p=t.Vimeo=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(t){var n=this;this.duration=null,(0,x.getSDK)("https://player.vimeo.com/api/player.js","Vimeo").then(function(e){n.container&&(n.player=new e.Player(n.container,r({url:t,autoplay:n.props.playing,muted:n.props.muted,loop:n.props.loop,playsinline:n.props.playsinline},n.props.config.vimeo.playerOptions)),n.player.ready().then(function(){var e=n.container.querySelector("iframe");e.style.width="100%",e.style.height="100%"}).catch(n.props.onError),n.player.on("loaded",function(){n.props.onReady(),n.refreshDuration()}),n.player.on("play",function(){n.props.onPlay(),n.refreshDuration()}),n.player.on("pause",n.props.onPause),n.player.on("seeked",function(e){return n.props.onSeek(e.seconds)}),n.player.on("ended",n.props.onEnded),n.player.on("error",n.props.onError),n.player.on("timeupdate",function(e){var t=e.seconds;n.currentTime=t}),n.player.on("progress",function(e){var t=e.seconds;n.secondsLoaded=t}))},this.props.onError)}},{key:"refreshDuration",value:function(){var t=this;this.player.getDuration().then(function(e){t.duration=e})}},{key:"play",value:function(){var e=this.callPlayer("play");e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("unload")}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){return a.default.createElement("div",{key:this.props.url,ref:this.ref,style:{width:"100%",height:"100%",overflow:"hidden",backgroundColor:"black"}})}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=u(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){n.setVolume(0)},n.unmute=function(){null!==n.props.volume&&n.setVolume(n.props.volume)},n.ref=function(e){n.container=e},u(n,t)}p.displayName="Vimeo",p.canPlay=function(e){return!c.test(e)&&s.test(e)},t.default=(0,i.default)(p)});t(N);N.Vimeo;var B=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Facebook=void 0;var n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(V);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u="//connect.facebook.net/en_US/sdk.js",s="fbAsyncInit",c=/facebook\.com\/([^/?].+\/)?video(s|\.php)[/?].*$/,p=t.Facebook=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(e,t){var n=this;t?(0,x.getSDK)(u,"FB",s).then(function(e){return e.XFBML.parse()}):(0,x.getSDK)(u,"FB",s).then(function(e){e.init({appId:n.props.config.facebook.appId,xfbml:!0,version:"v2.5"}),e.Event.subscribe("xfbml.render",function(e){n.props.onLoaded()}),e.Event.subscribe("xfbml.ready",function(e){"video"===e.type&&e.id===n.playerID&&(n.player=e.instance,n.player.subscribe("startedPlaying",n.props.onPlay),n.player.subscribe("paused",n.props.onPause),n.player.subscribe("finishedPlaying",n.props.onEnded),n.player.subscribe("startedBuffering",n.props.onBuffer),n.player.subscribe("finishedBuffering",n.props.onBufferEnd),n.player.subscribe("error",n.props.onError),n.props.muted||n.callPlayer("unmute"),n.props.onReady(),document.getElementById(n.playerID).querySelector("iframe").style.visibility="visible")})})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentPosition")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%",backgroundColor:"black"},id:this.playerID,className:"fb-video","data-href":this.props.url,"data-autoplay":this.props.playing?"true":"false","data-allowfullscreen":"true","data-controls":this.props.controls?"true":"false"})}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.playerID="facebook-player-"+(0,x.randomString)(),n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},l(n,t)}p.displayName="Facebook",p.canPlay=function(e){return c.test(e)},p.loopOnEnded=!0,t.default=(0,a.default)(p)});t(B);B.Facebook;var U=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Streamable=void 0;var n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(V);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/streamable\.com\/([a-z0-9]+)$/,s=t.Streamable=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"load",value:function(e){var r=this;(0,x.getSDK)("//cdn.embed.ly/player-0.1.0.min.js","playerjs").then(function(e){r.iframe&&(r.player=new e.Player(r.iframe),r.player.setLoop(r.props.loop),r.player.on("ready",r.props.onReady),r.player.on("play",r.props.onPlay),r.player.on("pause",r.props.onPause),r.player.on("seeked",r.props.onSeek),r.player.on("ended",r.props.onEnded),r.player.on("error",r.props.onError),r.player.on("timeupdate",function(e){var t=e.duration,n=e.seconds;r.duration=t,r.currentTime=n}),r.player.on("buffered",function(e){var t=e.percent;r.duration&&(r.secondsLoaded=r.duration*t)}),r.props.muted&&r.player.mute())},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){var e=this.props.url.match(u)[1];return o.default.createElement("iframe",{ref:this.ref,src:"https://streamable.com/o/"+e,frameBorder:"0",scrolling:"no",style:{width:"100%",height:"100%"},allowFullScreen:!0})}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},n.ref=function(e){n.iframe=e},l(n,t)}s.displayName="Streamable",s.canPlay=function(e){return u.test(e)},t.default=(0,a.default)(s)});t(U);U.Streamable;var W=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Wistia=void 0;var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(V);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/(?:wistia\.com|wi\.st)\/(?:medias|embed)\/(.*)$/,s=t.Wistia=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"getID",value:function(e){return e&&e.match(u)[1]}},{key:"load",value:function(e){var t=this,n=this.props,r=n.playing,o=n.muted,a=n.controls,i=n.onReady,l=n.onPlay,u=n.onPause,s=n.onSeek,c=n.onEnded,p=n.config,f=n.onError;(0,x.getSDK)("//fast.wistia.com/assets/external/E-v1.js","Wistia").then(function(){window._wq=window._wq||[],window._wq.push({id:t.getID(e),options:d({autoPlay:r,silentAutoPlay:"allow",muted:o,controlsVisibleOnLoad:a},p.wistia.options),onReady:function(e){t.player=e,t.unbind(),t.player.bind("play",l),t.player.bind("pause",u),t.player.bind("seek",s),t.player.bind("end",c),i()}})},f)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"unbind",value:function(){var e=this.props,t=e.onPlay,n=e.onPause,r=e.onSeek,o=e.onEnded;this.player.unbind("play",t),this.player.unbind("pause",n),this.player.unbind("seek",r),this.player.unbind("end",o)}},{key:"stop",value:function(){this.unbind(),this.callPlayer("remove")}},{key:"seekTo",value:function(e){this.callPlayer("time",e)}},{key:"setVolume",value:function(e){this.callPlayer("volume",e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("playbackRate",e)}},{key:"getDuration",value:function(){return this.callPlayer("duration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("time")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.getID(this.props.url),t="wistia_embed wistia_async_"+e;return o.default.createElement("div",{key:e,className:t,style:{width:"100%",height:"100%"}})}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},l(n,t)}s.displayName="Wistia",s.canPlay=function(e){return u.test(e)},s.loopOnEnded=!0,t.default=(0,a.default)(s)});t(W);W.Wistia;var G=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Twitch=void 0;var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(V);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=/(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/,h=/(?:www\.|go\.)?twitch\.tv\/([a-z0-9_]+)($|\?)/,u=t.Twitch=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,P.Component),n(s,[{key:"load",value:function(e,t){var u=this,n=this.props,s=n.playsinline,r=n.onError,c=n.config,p=h.test(e),f=p?e.match(h)[1]:e.match(y)[1];t?p?this.player.setChannel(f):this.player.setVideo("v"+f):(0,x.getSDK)("https://player.twitch.tv/js/embed/v1.js","Twitch").then(function(e){u.player=new e.Player(u.playerID,d({video:p?"":f,channel:p?f:"",height:"100%",width:"100%",playsinline:s,autoplay:u.props.playing,muted:u.props.muted},c.twitch.options));var t=e.Player,n=t.READY,r=t.PLAYING,o=t.PAUSE,a=t.ENDED,i=t.ONLINE,l=t.OFFLINE;u.player.addEventListener(n,u.props.onReady),u.player.addEventListener(r,u.props.onPlay),u.player.addEventListener(o,u.props.onPause),u.player.addEventListener(a,u.props.onEnded),u.player.addEventListener(i,u.props.onLoaded),u.player.addEventListener(l,u.props.onLoaded)},r)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("pause")}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%"},id:this.playerID})}}]),s);function s(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.playerID="twitch-player-"+(0,x.randomString)(),n.mute=function(){n.callPlayer("setMuted",!0)},n.unmute=function(){n.callPlayer("setMuted",!1)},l(n,t)}u.displayName="Twitch",u.canPlay=function(e){return y.test(e)||h.test(e)},u.loopOnEnded=!0,t.default=(0,a.default)(u)});t(G);G.Twitch;var H=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DailyMotion=void 0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(V);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=/^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/,u=t.DailyMotion=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(n){var r=this,e=this.props,o=e.controls,a=e.config,i=e.onError,t=e.playing,l=n.match(p),u=c(l,2)[1];this.player?this.player.load(u,{start:(0,x.parseStartTime)(n),autoplay:t}):(0,x.getSDK)("https://api.dmcdn.net/all.js","DM","dmAsyncInit",function(e){return e.player}).then(function(e){if(r.container){var t=e.player;r.player=new t(r.container,{width:"100%",height:"100%",video:u,params:s({controls:o,autoplay:r.props.playing,mute:r.props.muted,start:(0,x.parseStartTime)(n),origin:window.location.origin},a.dailymotion.params),events:{apiready:r.props.onReady,seeked:function(){return r.props.onSeek(r.player.currentTime)},video_end:r.props.onEnded,durationchange:r.onDurationChange,pause:r.props.onPause,playing:r.props.onPlay,waiting:r.props.onBuffer,error:function(e){return i(e)}}})}},i)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.player.duration||null}},{key:"getCurrentTime",value:function(){return this.player.currentTime}},{key:"getSecondsLoaded",value:function(){return this.player.bufferedTime}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%",backgroundColor:"black"}},o.default.createElement("div",{ref:this.ref}))}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.onDurationChange=function(){var e=n.getDuration();n.props.onDuration(e)},n.mute=function(){n.callPlayer("setMuted",!0)},n.unmute=function(){n.callPlayer("setMuted",!1)},n.ref=function(e){n.container=e},l(n,t)}u.displayName="DailyMotion",u.canPlay=function(e){return p.test(e)},u.loopOnEnded=!0,t.default=(0,a.default)(u)});t(H);H.DailyMotion;var z=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Mixcloud=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=l(P),o=l(V);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=/mixcloud\.com\/([^/]+\/[^/]+)/,c=t.Mixcloud=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(p,P.Component),n(p,[{key:"load",value:function(e){var n=this;(0,x.getSDK)("//widget.mixcloud.com/media/js/widgetApi.js","Mixcloud").then(function(e){n.player=e.PlayerWidget(n.iframe),n.player.ready.then(function(){n.player.events.play.on(n.props.onPlay),n.player.events.pause.on(n.props.onPause),n.player.events.ended.on(n.props.onEnded),n.player.events.error.on(n.props.error),n.player.events.progress.on(function(e,t){n.currentTime=e,n.duration=t}),n.props.onReady()})},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.config,r=t.match(s)[1],o=(0,x.queryString)(a({},n.mixcloud.options,{feed:"/"+r+"/"}));return i.default.createElement("iframe",{key:r,ref:this.ref,style:{width:"100%",height:"100%"},src:"https://www.mixcloud.com/widget/iframe/?"+o,frameBorder:"0"})}}]),p);function p(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=u(this,(e=p.__proto__||Object.getPrototypeOf(p)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){},n.unmute=function(){},n.ref=function(e){n.iframe=e},u(n,t)}c.displayName="Mixcloud",c.canPlay=function(e){return s.test(e)},c.loopOnEnded=!0,t.default=(0,o.default)(c)});t(z);z.Mixcloud;var Y=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FilePlayer=void 0;var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=a(P),o=a(V);function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,u=/\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i,s=/\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i,c=/\.(m3u8)($|\?)/i,d=/\.(mpd)($|\?)/i,y=/www\.dropbox\.com\/.+/;function h(e){if(e instanceof Array){var t=!0,n=!1,r=void 0;try{for(var o,a=e[Symbol.iterator]();!(t=(o=a.next()).done);t=!0){var i=o.value;if("string"==typeof i&&h(i))return!0;if(h(i.src))return!0}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}return!1}return!!(0,x.isMediaStream)(e)||(u.test(e)||s.test(e)||c.test(e)||d.test(e))}var v=t.FilePlayer=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(m,P.Component),n(m,[{key:"componentDidMount",value:function(){this.addListeners(),l&&this.player.load()}},{key:"componentWillReceiveProps",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&this.removeListeners()}},{key:"componentDidUpdate",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&this.addListeners()}},{key:"componentWillUnmount",value:function(){this.removeListeners()}},{key:"addListeners",value:function(){var e=this.props,t=e.onReady,n=e.onPlay,r=e.onBuffer,o=e.onBufferEnd,a=e.onPause,i=e.onEnded,l=e.onError,u=e.playsinline,s=e.onEnablePIP;this.player.addEventListener("canplay",t),this.player.addEventListener("play",n),this.player.addEventListener("waiting",r),this.player.addEventListener("playing",o),this.player.addEventListener("pause",a),this.player.addEventListener("seeked",this.onSeek),this.player.addEventListener("ended",i),this.player.addEventListener("error",l),this.player.addEventListener("enterpictureinpicture",s),this.player.addEventListener("leavepictureinpicture",this.onDisablePIP),u&&(this.player.setAttribute("playsinline",""),this.player.setAttribute("webkit-playsinline",""),this.player.setAttribute("x5-playsinline",""))}},{key:"removeListeners",value:function(){var e=this.props,t=e.onReady,n=e.onPlay,r=e.onBuffer,o=e.onBufferEnd,a=e.onPause,i=e.onEnded,l=e.onError,u=e.onEnablePIP;this.player.removeEventListener("canplay",t),this.player.removeEventListener("play",n),this.player.removeEventListener("waiting",r),this.player.removeEventListener("playing",o),this.player.removeEventListener("pause",a),this.player.removeEventListener("seeked",this.onSeek),this.player.removeEventListener("ended",i),this.player.removeEventListener("error",l),this.player.removeEventListener("enterpictureinpicture",u),this.player.removeEventListener("leavepictureinpicture",this.onDisablePIP)}},{key:"shouldUseAudio",value:function(e){return!e.config.file.forceVideo&&!e.config.file.attributes.poster&&(u.test(e.url)||e.config.file.forceAudio)}},{key:"shouldUseHLS",value:function(e){return c.test(e)&&!l||this.props.config.file.forceHLS}},{key:"shouldUseDASH",value:function(e){return d.test(e)||this.props.config.file.forceDASH}},{key:"load",value:function(t){var r=this,e=this.props.config.file,n=e.hlsVersion,o=e.dashVersion;if(this.shouldUseHLS(t)&&(0,x.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/hls.js/VERSION/hls.min.js".replace("VERSION",n),"Hls").then(function(n){r.hls=new n(r.props.config.file.hlsOptions),r.hls.on(n.Events.ERROR,function(e,t){r.props.onError(e,t,r.hls,n)}),r.hls.loadSource(t),r.hls.attachMedia(r.player)}),this.shouldUseDASH(t)&&(0,x.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js".replace("VERSION",o),"dashjs").then(function(e){r.dash=e.MediaPlayer().create(),r.dash.initialize(r.player,t,r.props.playing),r.dash.getDebug().setLogToBrowserConsole(!1)}),t instanceof Array)this.player.load();else if((0,x.isMediaStream)(t))try{this.player.srcObject=t}catch(e){this.player.src=window.URL.createObjectURL(t)}}},{key:"play",value:function(){var e=this.player.play();e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.player.pause()}},{key:"stop",value:function(){this.player.removeAttribute("src"),this.hls&&this.hls.destroy(),this.dash&&this.dash.reset()}},{key:"seekTo",value:function(e){this.player.currentTime=e}},{key:"setVolume",value:function(e){this.player.volume=e}},{key:"enablePIP",value:function(){this.player.requestPictureInPicture&&document.pictureInPictureElement!==this.player&&this.player.requestPictureInPicture()}},{key:"disablePIP",value:function(){document.exitPictureInPicture&&document.pictureInPictureElement===this.player&&document.exitPictureInPicture()}},{key:"setPlaybackRate",value:function(e){this.player.playbackRate=e}},{key:"getDuration",value:function(){if(!this.player)return null;var e=this.player,t=e.duration,n=e.seekable;return t===1/0&&0<n.length?n.end(n.length-1):t}},{key:"getCurrentTime",value:function(){return this.player?this.player.currentTime:null}},{key:"getSecondsLoaded",value:function(){if(!this.player)return null;var e=this.player.buffered;if(0===e.length)return 0;var t=e.end(e.length-1),n=this.getDuration();return n<t?n:t}},{key:"getSource",value:function(e){var t=this.shouldUseHLS(e),n=this.shouldUseDASH(e);if(!(e instanceof Array||(0,x.isMediaStream)(e)||t||n))return y.test(e)?e.replace("www.dropbox.com","dl.dropboxusercontent.com"):e}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.playing,r=e.loop,o=e.controls,a=e.muted,i=e.config,l=e.width,u=e.height,s=this.shouldUseAudio(this.props)?"audio":"video",c={width:"auto"===l?l:"100%",height:"auto"===u?u:"100%"};return f.default.createElement(s,p({ref:this.ref,src:this.getSource(t),style:c,preload:"auto",autoPlay:n||void 0,controls:o,muted:a,loop:r},i.file.attributes),t instanceof Array&&t.map(this.renderSourceElement),i.file.tracks.map(this.renderTrack))}}]),m);function m(){var e,t,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,m);for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=o=i(this,(e=m.__proto__||Object.getPrototypeOf(m)).call.apply(e,[this].concat(r)))).onDisablePIP=function(e){var t=o.props,n=t.onDisablePIP,r=t.playing;n(e),r&&o.play()},o.onSeek=function(e){o.props.onSeek(e.target.currentTime)},o.mute=function(){o.player.muted=!0},o.unmute=function(){o.player.muted=!1},o.renderSourceElement=function(e,t){return"string"==typeof e?f.default.createElement("source",{key:t,src:e}):f.default.createElement("source",p({key:t},e))},o.renderTrack=function(e,t){return f.default.createElement("track",p({key:t},e))},o.ref=function(e){o.player=e},i(o,t)}v.displayName="FilePlayer",v.canPlay=h,v.canEnablePIP=function(e){return h(e)&&!!document.pictureInPictureEnabled&&!u.test(e)},t.default=(0,o.default)(v)});t(Y);Y.FilePlayer;var q=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=[A.YouTube,I.SoundCloud,N.Vimeo,B.Facebook,U.Streamable,W.Wistia,G.Twitch,H.DailyMotion,z.Mixcloud,Y.FilePlayer]});t(q);var K=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,i=(a=P)&&a.__esModule?a:{default:a};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u="64px",s=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"componentDidMount",value:function(){this.mounted=!0,this.fetchImage(this.props)}},{key:"componentWillReceiveProps",value:function(e){var t=this.props,n=t.url,r=t.light;n===e.url&&r===e.light||this.fetchImage(e)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"fetchImage",value:function(e){var n=this,t=e.url,r=e.light;if("string"!=typeof r)return this.setState({image:null}),window.fetch("https://noembed.com/embed?url="+t).then(function(e){return e.json()}).then(function(e){if(e.thumbnail_url&&n.mounted){var t=e.thumbnail_url.replace("height=100","height=480");n.setState({image:t})}});this.setState({image:r})}},{key:"render",value:function(){var e=this.props.onClick,t=this.state.image,n={display:"flex",alignItems:"center",justifyContent:"center"},r={preview:o({width:"100%",height:"100%",backgroundImage:t?"url("+t+")":void 0,backgroundSize:"cover",backgroundPosition:"center",cursor:"pointer"},n),shadow:o({background:"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",borderRadius:u,width:u,height:u},n),playIcon:{borderStyle:"solid",borderWidth:"16px 0 16px 26px",borderColor:"transparent transparent transparent white",marginLeft:"7px"}};return i.default.createElement("div",{style:r.preview,className:"react-player__preview",onClick:e},i.default.createElement("div",{style:r.shadow,className:"react-player__shadow"},i.default.createElement("div",{style:r.playIcon,className:"react-player__play-icon"})))}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).mounted=!1,n.state={image:null},l(n,t)}t.default=s});t(K);var $=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=[],o=!0,a=!1,i=void 0;try{for(var l,u=f[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;!s.Player.canPlay(e)&&n[s.configKey].preload&&r.push(c.default.createElement(p.default,{key:s.Player.displayName,activePlayer:s.Player,url:s.url,controls:t,playing:!0,muted:!0,style:{display:"none"}}))}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return r};var c=n(P),p=n(F);function n(e){return e&&e.__esModule?e:{default:e}}var f=[{Player:A.YouTube,configKey:"youtube",url:"https://www.youtube.com/watch?v=GlCmAC4MHek"},{Player:I.SoundCloud,configKey:"soundcloud",url:"https://soundcloud.com/seucheu/john-cage-433-8-bit-version"},{Player:N.Vimeo,configKey:"vimeo",url:"https://vimeo.com/300970506"},{Player:H.DailyMotion,configKey:"dailymotion",url:"http://www.dailymotion.com/video/xqdpyk"}]});t($);function X(e){var t=e.onPlayPauseClick,n=e.playing,r=e.onReselectFile,o=e.processing,a=e.onEncode,i=e.showEncodeBtn,l=e.canDownload,u=e.onDownload;return P.createElement("div",{className:"rvt-controls-cont"},P.createElement("a",{className:"rvt-controller-item",title:"Pause",onClick:t},P.createElement(O,{name:n?"pause":"play"})),P.createElement("a",{className:"rvt-controller-item",title:"Select File",onClick:r},P.createElement(O,{name:"music"})),i&&P.createElement("div",{className:"rvt-controller-dropdown rvt-controller-list-wrap"},l?P.createElement("a",{className:"rvt-controller-item",onClick:u},P.createElement(O,{name:"download"})):P.createElement("a",{className:"rvt-controller-item",onClick:a},P.createElement(O,{name:o?"spin":"replay"}))))}var Z=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FilePlayer=t.Mixcloud=t.DailyMotion=t.Twitch=t.Wistia=t.Streamable=t.Facebook=t.Vimeo=t.SoundCloud=t.YouTube=void 0;var h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"YouTube",{enumerable:!0,get:function(){return i(A).default}}),Object.defineProperty(t,"SoundCloud",{enumerable:!0,get:function(){return i(I).default}}),Object.defineProperty(t,"Vimeo",{enumerable:!0,get:function(){return i(N).default}}),Object.defineProperty(t,"Facebook",{enumerable:!0,get:function(){return i(B).default}}),Object.defineProperty(t,"Streamable",{enumerable:!0,get:function(){return i(U).default}}),Object.defineProperty(t,"Wistia",{enumerable:!0,get:function(){return i(W).default}}),Object.defineProperty(t,"Twitch",{enumerable:!0,get:function(){return i(G).default}}),Object.defineProperty(t,"DailyMotion",{enumerable:!0,get:function(){return i(H).default}}),Object.defineProperty(t,"Mixcloud",{enumerable:!0,get:function(){return i(z).default}}),Object.defineProperty(t,"FilePlayer",{enumerable:!0,get:function(){return i(Y).default}});var v=i(P),o=i(q),a=i(F),m=i(K),g=i($);function i(e){return e&&e.__esModule?e:{default:e}}function b(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var w=Object.keys(M.propTypes),u=[],s=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"componentDidMount",value:function(){this.props.progressFrequency&&console.warn("ReactPlayer: %cprogressFrequency%c is deprecated, please use %cprogressInterval%c instead","font-weight: bold","","font-weight: bold","")}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,x.isEqual)(this.props,e)||!(0,x.isEqual)(this.state,t)}},{key:"componentWillUpdate",value:function(e){this.config=(0,x.getConfig)(e,M.defaultProps),!this.props.light&&e.light&&this.setState({showPreview:!0})}},{key:"getActivePlayer",value:function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){var r=t[n];if(r.canPlay(e))return r}return Y.FilePlayer}},{key:"renderActivePlayer",value:function(e,t){return e?v.default.createElement(a.default,h({},this.props,{key:t.displayName,ref:this.activePlayerRef,config:this.config,activePlayer:t,onReady:this.onReady})):null}},{key:"sortPlayers",value:function(e,t){return e&&t?e.key<t.key?-1:1:0}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.controls,r=e.style,o=e.width,a=e.height,i=e.light,l=e.wrapper,u=this.state.showPreview&&t,s=(0,x.omit)(this.props,w,M.DEPRECATED_CONFIG_PROPS),c=this.getActivePlayer(t),p=this.renderActivePlayer(t,c),f=(0,g.default)(t,n,this.config),d=[p].concat(b(f)).sort(this.sortPlayers),y=v.default.createElement(m.default,{url:t,light:i,onClick:this.onClickPreview});return v.default.createElement(l,h({ref:this.wrapperRef,style:h({},r,{width:o,height:a})},s),u?y:d)}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).config=(0,x.getConfig)(n.props,M.defaultProps,!0),n.state={showPreview:!!n.props.light},n.onClickPreview=function(){n.setState({showPreview:!1})},n.getDuration=function(){return n.player?n.player.getDuration():null},n.getCurrentTime=function(){return n.player?n.player.getCurrentTime():null},n.getSecondsLoaded=function(){return n.player?n.player.getSecondsLoaded():null},n.getInternalPlayer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null},n.seekTo=function(e,t){if(!n.player)return null;n.player.seekTo(e,t)},n.onReady=function(){n.props.onReady(n)},n.wrapperRef=function(e){n.wrapper=e},n.activePlayerRef=function(e){n.player=e},l(n,t)}s.addCustomPlayer=function(e){u.push(e)},s.removeCustomPlayers=function(){u=[]},s.displayName="ReactPlayer",s.propTypes=M.propTypes,s.defaultProps=M.defaultProps,s.canPlay=function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){if(t[n].canPlay(e))return!0}return!1},s.canEnablePIP=function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){var r=t[n];if(r.canEnablePIP&&r.canEnablePIP(e))return!0}return!1},t.default=s}),J=t(Z),Q=(Z.FilePlayer,Z.Mixcloud,Z.DailyMotion,Z.Twitch,Z.Wistia,Z.Streamable,Z.Facebook,Z.Vimeo,Z.SoundCloud,Z.YouTube,function(){function a(){var e,o;i(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return s(d(o=y(this,(e=p(a)).call.apply(e,[this].concat(n)))),"state",{playing:o.props.playVideo||!1}),s(d(o),"handlePlayerProgress",function(e){if(e.loaded){var t=e.playedSeconds,n=o.props.timeRange.start,r=o.props.timeRange.end<=t;t<=n&&o.player.seekTo(n,"seconds"),r&&o.player.seekTo(n,"seconds"),(o.props.onPlayerProgress||h)(t)}}),s(d(o),"handleOnPause",function(){(o.props.onPlayerPause||h)()}),s(d(o),"handleOnPlay",function(){(o.props.onPlayerPlay||h)()}),o}return c(a,P.Component),l(a,[{key:"componentWillReceiveProps",value:function(e){var t=e.timeRange,n=this.props.timeRange,r=n&&t.start!==n.start||!n&&0<t.start;r&&(console.log({canSeek:r}),this.setState({playing:!1}),this.player.seekTo(t.start,"seconds")),e.playVideo!==this.props.playVideo&&(console.log("Playing Changed"),this.setState({playing:e.playVideo}))}},{key:"displaySeconds",value:function(e){return e.toFixed(2)+"s"}},{key:"render",value:function(){var e,t=this;return P.createElement("div",{className:"rvt-player-cont",onContextMenu:function(){}},P.createElement(J,(s(e={onPlay:this.handleOnPause},"onPlay",this.handleOnPlay),s(e,"onProgress",this.handlePlayerProgress),s(e,"url",this.props.src),s(e,"ref",function(e){return t.player=e}),s(e,"playing",this.state.playing),s(e,"style",{margin:"0 auto"}),e)))}}]),a}()),ee=function(){function a(){var e,t;i(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return s(d(t=y(this,(e=p(a)).call.apply(e,[this].concat(r)))),"_screenX",null),s(d(t),"_screenY",null),s(d(t),"_ox",null),s(d(t),"_oy",null),s(d(t),"handleMouseDown",function(e){t._screenX=e.screenX,t._screenY=e.screenY,t._ox=t.props.x,t._oy=t.props.y,window.addEventListener("mousemove",t.handleMouseMove,!1),window.addEventListener("mouseup",t.handleMouseUp,!1)}),s(d(t),"handleMouseMove",function(e){t.props.onDrag({x:e.screenX-t._screenX+t._ox,y:e.screenY-t._screenY+t._oy})}),s(d(t),"handleMouseUp",function(){window.removeEventListener("mousemove",t.handleMouseMove),window.removeEventListener("mouseup",t.handleMouseUp),(t.props.onDragStop||function(){})()}),t}return c(a,o.PureComponent),l(a,[{key:"render",value:function(){return P.createElement("div",{className:"rvt-dragger "+this.props.className||"",onMouseDown:this.handleMouseDown,style:{left:this.props.x+"px",top:this.props.y+"px"}},this.props.children)}}]),a}();s(ee,"defaultProps",{onDrag:function(){},x:0,y:0}),s(ee,"propTypes",{x:f.number,y:f.number,onDrag:f.func,className:f.string,children:f.element});function te(e){return P.createElement("div",{className:"rvt-trimmer",style:{width:e.width,left:e.left,right:e.right}})}function ne(e){var t=function(e){return[Math.floor(e/60),Math.floor(e%60),Math.round(e%1*100)]}(e.time);return P.createElement("div",{className:"rvt-player-cursor-current"},P.createElement("span",{className:"rvt-player-num"},t[0]),"'",P.createElement("span",{className:"rvt-player-num"},t[1]),".",P.createElement("span",{className:"rvt-player-num"},function(e,t){return("000000"+e).slice(-t)}(t[2],2)))}var re=function(){function a(){var e,n;i(this,a);for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return s(d(n=y(this,(e=p(a)).call.apply(e,[this].concat(r)))),"pos2Time",function(e){return e/n.props.widthDurationRatio}),s(d(n),"time2pos",function(e){return e*n.props.widthDurationRatio}),s(d(n),"keepInRange",function(e){var t=n.props.containerWidth;return e<0?0:t<e?t:e}),s(d(n),"handleDragStart",function(e){var t=n.pos2Time(n.keepInRange(e.x));n.props.onStartTimeChange(t)}),s(d(n),"handleDragEnd",function(e){var t=n.pos2Time(n.keepInRange(e.x));n.props.onEndTimeChange(t)}),s(d(n),"handleDragStop",function(){(n.props.onGetData||h)({start:n.props.startTime,end:n.props.endTime})}),s(d(n),"getTrimmerWidth",function(e){return n.props.containerWidth-e}),n}return c(a,o.PureComponent),l(a,[{key:"render",value:function(){var e=this.time2pos(this.props.startTime),t=this.time2pos(this.props.endTime);return P.createElement(P.Fragment,null,P.createElement(te,{left:0,width:e}),P.createElement(ee,{x:e,onDrag:this.handleDragStart,onDragStop:this.handleDragStop},P.createElement(ne,{time:this.props.startTime})),P.createElement(ee,{x:t,onDrag:this.handleDragEnd,onDragStop:this.handleDragStop},P.createElement(ne,{time:this.props.endTime})),P.createElement(te,{right:0,width:this.getTrimmerWidth(t)}))}}]),a}(),oe=function(){function a(){var e,t;i(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return s(d(t=y(this,(e=p(a)).call.apply(e,[this].concat(r)))),"state",{start:0,end:0}),s(d(t),"handleStartTimeChange",function(e){t.setState({start:e})}),s(d(t),"handleGetTrimData",function(){var e=t.props.onTrim||h;setTimeout(function(){return e({start:t.state.start||t.props.timeRange.start,end:t.state.end||t.props.timeRange.end})},200)}),s(d(t),"handleEndTimeChange",function(e){t.setState({end:e})}),t}return c(a,o.PureComponent),l(a,[{key:"render",value:function(){var t=this;return P.createElement("div",{className:"rvt-trimmer-cont",ref:function(e){return t.containerRef=e}},this.props.showTrimmer&&P.createElement(re,{onStartTimeChange:this.handleStartTimeChange,onEndTimeChange:this.handleEndTimeChange,widthDurationRatio:this.widthDurationRatio,containerWidth:this.containerWidth,startTime:this.state.start||this.props.timeRange.start,endTime:this.state.end||this.props.timeRange.end,onGetData:this.handleGetTrimData}))}},{key:"widthDurationRatio",get:function(){return this.containerWidth/this.props.duration}},{key:"containerWidth",get:function(){return this.containerRef.getBoundingClientRect().width}}]),a}();function ae(){}function ie(){ie.init.call(this)}function le(e){return void 0===e._maxListeners?ie.defaultMaxListeners:e._maxListeners}function ue(e,t,n,r){var o,a,i;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((a=e._events)?(a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),i=a[t]):(a=e._events=new ae,e._eventsCount=0),i){if("function"==typeof i?i=a[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),!i.warned&&(o=le(e))&&0<o&&i.length>o){i.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=i.length,function(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(l)}}else i=a[t]=n,++e._eventsCount;return e}function se(e,t,n){var r=!1;function o(){e.removeListener(t,o),r||(r=!0,n.apply(e,arguments))}return o.listener=n,o}function ce(e){var t=this._events;if(t){var n=t[e];if("function"==typeof n)return 1;if(n)return n.length}return 0}function pe(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}ae.prototype=Object.create(null),(ie.EventEmitter=ie).usingDomains=!1,ie.prototype.domain=void 0,ie.prototype._events=void 0,ie.prototype._maxListeners=void 0,ie.defaultMaxListeners=10,ie.init=function(){this.domain=null,ie.usingDomains&&(void 0).active&&(void 0).Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new ae,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},ie.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},ie.prototype.getMaxListeners=function(){return le(this)},ie.prototype.emit=function(e,t,n,r){var o,a,i,l,u,s,c,p="error"===e;if(s=this._events)p=p&&null==s.error;else if(!p)return!1;if(c=this.domain,p){if(o=t,c)return(o=o||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,o.domain=c,o.domainThrown=!1,c.emit("error",o),!1;if(o instanceof Error)throw o;var f=new Error('Uncaught, unspecified "error" event. ('+o+")");throw f.context=o,f}if(!(a=s[e]))return!1;var d="function"==typeof a;switch(i=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,o=pe(e,r),a=0;a<r;++a)o[a].call(n)}(a,d,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var o=e.length,a=pe(e,o),i=0;i<o;++i)a[i].call(n,r)}(a,d,this,t);break;case 3:!function(e,t,n,r,o){if(t)e.call(n,r,o);else for(var a=e.length,i=pe(e,a),l=0;l<a;++l)i[l].call(n,r,o)}(a,d,this,t,n);break;case 4:!function(e,t,n,r,o,a){if(t)e.call(n,r,o,a);else for(var i=e.length,l=pe(e,i),u=0;u<i;++u)l[u].call(n,r,o,a)}(a,d,this,t,n,r);break;default:for(l=new Array(i-1),u=1;u<i;u++)l[u-1]=arguments[u];!function(e,t,n,r){if(t)e.apply(n,r);else for(var o=e.length,a=pe(e,o),i=0;i<o;++i)a[i].apply(n,r)}(a,d,this,l)}return!0},ie.prototype.on=ie.prototype.addListener=function(e,t){return ue(this,e,t,!1)},ie.prototype.prependListener=function(e,t){return ue(this,e,t,!0)},ie.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,se(this,e,t)),this},ie.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,se(this,e,t)),this},ie.prototype.removeListener=function(e,t){var n,r,o,a,i;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new ae:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,a=n.length;0<a--;)if(n[a]===t||n[a].listener&&n[a].listener===t){i=n[a].listener,o=a;break}if(o<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new ae,this;delete r[e]}else!function(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}(n,o);r.removeListener&&this.emit("removeListener",e,i||t)}return this},ie.prototype.removeAllListeners=function(e){var t,n;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=new ae,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new ae:delete n[e]),this;if(0===arguments.length){for(var r,o=Object.keys(n),a=0;a<o.length;++a)"removeListener"!==(r=o[a])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new ae,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},ie.prototype.listeners=function(e){var t,n=this._events;return n&&(t=n[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(t):[]},ie.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):ce.call(e,t)},ie.prototype.listenerCount=ce,ie.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};function fe(){importScripts("https://archive.org/download/ffmpeg_asm/ffmpeg_asm.js");var i=Date.now;function l(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;if("command"===t.type){var n={print:l,printErr:l,files:t.files||[],arguments:t.arguments||[],TOTAL_MEMORY:t.TOTAL_MEMORY||!1};postMessage({type:"start",data:n.arguments.join(" ")}),postMessage({type:"stdout",data:"Received command: "+n.arguments.join(" ")+(n.TOTAL_MEMORY?".  Processing with "+n.TOTAL_MEMORY+" bits.":"")});var r=i(),o=ffmpeg_run(n),a=i()-r;postMessage({type:"stdout",data:"Finished processing (took "+a+"ms)"}),postMessage({type:"done",data:o,time:a})}},postMessage({type:"ready"})}var de="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},ye=t(j(function(e,t){var n;(n=t).default=function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"!=typeof t)throw new Error("File content must export a function");var n=t.toString(),r=new Blob(["("+n+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(r))},Object.defineProperty(n,"__esModule",{value:!0})}));function he(e){return(he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ve(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function me(e){return(me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ge(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function be(e,t){return(be=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function we(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Pe=function(){function e(){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),we(ge(o=function(e,t){return!t||"object"!==he(t)&&"function"!=typeof t?ge(e):t}(this,me(e).call(this))),"_worker",{}),we(ge(o),"_inputFile",{}),we(ge(o),"workerIsReady",!1),we(ge(o),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),we(ge(o),"runCommand",function(r){if("string"!=typeof r||!r.length)throw new Error("command should be string and not empty");o.convertInputFileToArrayBuffer().then(function(e){for(;!o.workerIsReady;);var t="video.webm",n="-i ".concat(t," ").concat(r);o.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}]})})}),we(ge(o),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),we(ge(o),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),o.initWebWorker(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&be(e,t)}(e,ie),function(e,t,n){t&&ve(e.prototype,t),n&&ve(e,n)}(e,[{key:"initWebWorker",value:function(){var n=this;this.worker=new ye(fe),this.worker.onmessage=function(e){var t=e.data;"ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),log("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data)}}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}},{key:"worker",set:function(e){this._worker=e},get:function(){return this._worker}},{key:"inputFile",set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e},get:function(){return this._inputFile}}]),e}(),ke={on:function(){},emit:function(){}},Ee=de||window;Ee&&Ee.Blob&&(ke=new Pe);var _e=ke,Oe=function n(r,e,t){return void 0===e?function(e,t){return n(r,e,t)}:(void 0===t&&(t="0"),0<(r-=e.toString().length)?new Array(r+(/\./.test(e)?2:1)).join(t)+e:e+"")},Se=36e5,Te=6e4,je=1e3,Re="Time format error";function De(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");var r=Math.abs(e);return function(e,t){var n,r,o;switch(t.toLowerCase()){case"hh:mm:ss.sss":o=r=n=!0;break;case"hh:mm:ss":n=!!e.miliseconds,o=r=!0;break;case"hh:mm":n=!!e.miliseconds,r=n||!!e.seconds,o=!0;break;case"mm:ss":n=!!e.miliseconds,r=!0,o=!!e.hours;break;case"mm:ss.sss":r=n=!0,o=!!e.hours;break;default:throw new Error(Re)}var a=Oe(2,e.hours),i=Oe(2,e.minutes),l=Oe(2,e.seconds),u=Oe(3,e.miliseconds);return(e.negative?"-":"")+(o?n?"".concat(a,":").concat(i,":").concat(l,".").concat(u):r?"".concat(a,":").concat(i,":").concat(l):"".concat(a,":").concat(i):n?"".concat(i,":").concat(l,".").concat(u):"".concat(i,":").concat(l))}({negative:e<0,hours:Math.floor(r/Se),minutes:Math.floor(r%Se/Te),seconds:Math.floor(r%Te/je),miliseconds:Math.floor(r%je)},n)}var Le=function(){function t(e){var v;return i(this,t),s(d(v=y(this,p(t).call(this))),"trimVideo",function(){var e=1<arguments.length?arguments[1]:void 0,t=function(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");return De(e*je,n)}(0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,"hh:mm:ss");_e.runCommand("-ss ".concat(t," -c copy -t ").concat(e," sliced-output.mp4"))}),s(d(v),"_videoData",{}),s(d(v),"_videoFile",null),s(d(v),"_videoBuffer",{}),s(d(v),"readAsArrayBuffer",m(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t=v._videoFile,a(t,"ArrayBuffer");case 2:return v._videoBuffer=e.sent,e.abrupt("return",v.videoBuffer);case 4:case"end":return e.stop()}var t},e)}))),s(d(v),"convertBufferToBlob",function(e){var t=null;return(e=e||v.videoBuffer).byteLength&&(t=g(e)),t}),s(d(v),"readAsDataURL",function(){var n=m(regeneratorRuntime.mark(function e(t,n){var r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=t||v.videoBuffer,n=n||v.convertBufferToBlob(t),r=null,n)return e.next=6,a(n,"DataURL");e.next=7;break;case 6:r=e.sent;case 7:return e.abrupt("return",r);case 8:case"end":return e.stop()}},e)}));return function(e,t){return n.apply(this,arguments)}}()),s(d(v),"decode",function(){var t=m(regeneratorRuntime.mark(function e(t){var n,r,o,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return v.videoFile=t,v.emit("processingFile"),e.next=4,v.readAsArrayBuffer();case 4:return n=e.sent,e.next=7,v.readAsDataURL(n);case 7:r=e.sent,o=URL.createObjectURL(v.videoFile),(a=document.createElement("video")).src=o;case 11:if((a.duration===1/0||isNaN(a.duration))&&a.readyState<2)return e.next=14,new Promise(function(e){return setTimeout(e,1e3)});e.next=17;break;case 14:a.currentTime=1e7*Math.random(),e.next=11;break;case 17:return v._videoData=a,v.emit("processedFile"),e.abrupt("return",{dataURL:r,arrayBuffer:n,blob:v.convertBufferToBlob()});case 20:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),s(d(v),"generateBufferChunks",function(){var l=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];return new Promise(function(e,t){try{var n=[];l=l.byteLength?l:v.videoBuffer;for(var r=new Uint8Array(l),o=0,a=6e4;a<r.byteLength;a+=6e4){var i=l.slice(o,a);n.push(i),o=a}e(n)}catch(e){t(e)}})}),s(d(v),"extractFramesFromVideo",function(){var h=0<arguments.length&&void 0!==arguments[0]?arguments[0]:25;return new Promise(function(){var n=m(regeneratorRuntime.mark(function e(t,n){var r,o,a,i,l,u,s,c,p,f,d,y;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,v.emit("extractingFrames"),(r=v._videoData).addEventListener("seeked",m(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o&&o();case 1:case"end":return e.stop()}},e)}))),a=r.duration,i=document.createElement("canvas"),l=i.getContext("2d"),u=[r.videoWidth,r.videoHeight],s=u[0],c=u[1],i.width=s,i.height=c,p=[],f=125/h,d=0;case 13:if(d<a)return r.currentTime=d,e.next=17,new Promise(function(e){return o=e});e.next=23;break;case 17:l.drawImage(r,0,0,s,c),y=i.toDataURL(),p.push(y),d+=f,e.next=13;break;case 23:v.emit("extractedFrames"),t(p),e.next=30;break;case 27:e.prev=27,e.t0=e.catch(0),n(e.t0);case 30:case"end":return e.stop()}},e,null,[[0,27]])}));return function(e,t){return n.apply(this,arguments)}}())}),v.videoFile=e,_e.on("onReady",function(){return v.emit("FFMPEGReady")}),_e.on("onStdout",function(e){return v.emit("FFMPEGStdout",e)}),_e.on("onFileReceived",function(){return v.emit("FFMPEGFileReceived")}),_e.on("onDone",function(e){return v.emit("FFMPEGDone",e)}),v}return c(t,ie),l(t,[{key:"videoFile",set:function(e){e&&e.type&&(_e.inputFile=e),this._videoFile=e},get:function(){return this._videoFile}},{key:"duration",get:function(){return this._videoData.duration||0}},{key:"videoData",get:function(){return this._videoData}},{key:"videoBuffer",get:function(){return this._videoBuffer}}]),t}(),Ce=function(){function n(e){var l,t=this;return i(this,n),s(d(l=y(this,p(n).call(this,e))),"webVideo",new Le({})),s(d(l),"handleFFMPEGStdout",function(e){}),s(d(l),"handleFFMPEGReady",function(){}),s(d(l),"handleFFMPEGFileReceived",function(){}),s(d(l),"handleFFMPEGDone",function(e){l.setState({timeRange:{start:0,end:l.state.timeRange.end}});var t=g(e[0].data);l.decodeVideoFile(t,function(){(l.onVideoEncode||h)(e),l.setState({encoding:!1,encoded:!0,encodedVideo:t})})}),s(d(l),"state",{decoding:!1,encoding:!1,encoded:!1,playVideo:!1,videoDataURL:"",videoFrames:[],isDecoding:!1,timeRange:{start:5,end:l.props.timeLimit||15},encodedVideo:null}),s(d(l),"updateVideoDataURL",function(e){return l.setState({videoDataURL:e})}),s(d(l),"updateVideoFrames",function(e){return l.setState({videoFrames:e})}),s(d(l),"updateIsDecoding",function(e){return l.setState({updateIsDecoding:e})}),s(d(l),"updateVideoDuration",function(e){return l.setState({updateVideoDuration:e})}),s(d(l),"decodeVideoFile",function(e){var i=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h;l.setState({decoding:!0});var t=l.webVideo;t.videoFile=e,t.decode(e).then(function(e){e.blob,e.arrayBuffer;var t=e.dataURL;l.setState({decoding:!1}),l.updateVideoDataURL(t);var n=l.state.timeRange.start,r=l.webVideo.videoData.duration,o=n+(l.props.timeLimit||10),a=o<r?o:r;l.setState({timeRange:{start:n,end:a}}),i()})}),s(d(l),"handleFileSelected",function(e){l.decodeVideoFile(e)}),s(d(l),"handleVideoTrim",function(e){l.setState({timeRange:e})}),s(d(l),"handleEncodeVideo",function(e){l.setState({encoding:!0,videoDataURL:"",playVideo:!1});var t=e.end-e.start;l.webVideo.trimVideo(e.start,t)}),s(d(l),"handlePlayPauseVideo",function(){var e=l.state.playVideo;l.setState({playVideo:!e})}),s(d(l),"handlePlayerPause",function(){l.setState({playVideo:!1})}),s(d(l),"handlePlayerPlay",function(){l.setState({playVideo:!0})}),s(d(l),"handleReselectFile",function(){var e={decoding:!1,encoding:!1,encoded:!1,encodedVideo:null,playVideo:!1,videoDataURL:"",videoFrames:[],isExtractingFrame:!1,isDecoding:!1,timeRange:l.props.timeRange||{start:0,end:0}};l.setState(e)}),s(d(l),"VideoPlayerWithTrimmer",function(e){var t=e.showTrimmer,n=l.state,r=n.decoding,o=n.encoding,a=n.encoded,i=n.videoDataURL;return P.createElement(P.Fragment,null,!r&&!o&&i&&P.createElement(Q,{src:l.state.videoDataURL,timeRange:l.state.timeRange,playVideo:l.state.playVideo,onPlayerPlay:l.handlePlayerPlay,onPlayerPause:l.handlePlayerPause}),t&&P.createElement(oe,{showTrimmer:l.state.videoDataURL,duration:l.webVideo.videoData.duration,onTrim:l.handleVideoTrim,timeRange:l.state.timeRange}),!r&&!o&&i&&P.createElement(X,{onDownload:function(){return l.handleDownloadVideo(l.state.encodedVideo)},canDownload:a,showEncodeBtn:l.props.showEncodeBtn,onReselectFile:l.handleReselectFile,onEncode:function(){return l.handleEncodeVideo(l.state.timeRange)},onPlayPauseClick:l.handlePlayPauseVideo,processing:o,playing:l.state.playVideo}))}),s(d(l),"handleDownloadVideo",function(e){!function(e,t){var n=document.createElement("a");n.href=e,n.download=t,n.click()}(function(e){return URL.createObjectURL(e)}(e),"trimmed.mp4")}),s(d(l),"VideoPlayerNoTrimmer",function(){return P.createElement(t.VideoPlayerWithTrimmer,null)}),l.webVideo.on("processingFile",function(){return l.updateIsDecoding(!0)}),l.webVideo.on("processedFile",function(){return l.updateIsDecoding(!1)}),l.webVideo.on("FFMPEGStdout",l.handleFFMPEGStdout),l.webVideo.on("FFMPEGReady",l.handleFFMPEGReady),l.webVideo.on("FFMPEGFileReceived",l.handleFFMPEGFileReceived),l.webVideo.on("FFMPEGDone",l.handleFFMPEGDone),l}return c(n,P.PureComponent),l(n,[{key:"render",value:function(){var e=this.state,t=e.decoding,n=e.encoding,r=e.encoded,o=e.videoDataURL;return P.createElement("div",{className:"rvt-main-container"},r?P.createElement(this.VideoPlayerNoTrimmer,null):P.createElement(P.Fragment,null,!t&&!n&&!o&&P.createElement(S,{onFileSelected:this.handleFileSelected}),(t||n)&&P.createElement(T,null,P.createElement(O,{name:"spin",className:"rvt-icon-spin"}),n?"ENCODING VIDEO":"DECODING VIDEO","..."),P.createElement(this.VideoPlayerWithTrimmer,{showTrimmer:!0})))}}]),n}();s(Ce,"propTypes",{onVideoEncode:f.func,showEncodeBtn:f.bool,timeLimit:f.number}),e.default=Ce,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
