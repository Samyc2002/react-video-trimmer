!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("prop-types")):"function"==typeof define&&define.amd?define(["exports","react","prop-types"],t):t((e=e||self).reactVideoTrimmer={},e.React,e.PropTypes)}(this,function(e,o,f){"use strict";var P="default"in o?o.default:o;function u(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function m(l){return function(){var e=this,i=arguments;return new Promise(function(t,n){var r=l.apply(e,i);function o(e){u(r,t,n,o,a,"next",e)}function a(e){u(r,t,n,o,a,"throw",e)}o(void 0)})}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function n(e,t){return(n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function d(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?d(e):t}f=f&&f.hasOwnProperty("default")?f.default:f;function a(r,e){var o=1<arguments.length&&void 0!==e?e:"ArrayBuffer";return new Promise(function(e,t){var n=new FileReader;n["readAs"+o](r),n.onload=function(){return e(n.result)},n.onerror=function(e){return t(e)}})}function h(){}function g(e){return new Blob([new Uint8Array(e,0,e.byteLength)],{type:"video/webm",name:"video.webm"})}function v(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"}),P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}))}function b(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M15 6H3v2h12V6zm0 4H3v2h12v-2zM3 16h8v-2H3v2zM17 6v8.18c-.31-.11-.65-.18-1-.18-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3V8h3V6h-5z"}))}function w(e){var t=e.className;return P.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"}))}function k(e){var t=e.className;return P.createElement("svg",{className:t,height:"24",viewBox:"0 0 24 24",width:"24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M9 16h2V8H9v8zm3-14C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm1-4h2V8h-2v8z"}))}function E(e){var t=e.className;return P.createElement("svg",{className:t,viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg"},P.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),P.createElement("path",{d:"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"}))}function _(e){var t=e.className;return P.createElement("svg",{className:t,xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 42 42"},P.createElement("path",{d:"M21 37c-4.3 0-8.3-1.7-11.3-4.7S5 25.3 5 21c0-3 .8-6 2.5-8.5C9 10 11.2 8 13.8 6.7l1.3 2.7c-2.1 1.1-3.9 2.7-5.2 4.7-1.3 2.1-2 4.5-2 6.9 0 7.2 5.8 13 13 13s13-5.8 13-13c0-2.5-.7-4.9-2-6.9s-3.1-3.6-5.2-4.7L28 6.7c2.8 1.3 5 3.3 6.5 5.8C36.2 15 37 18 37 21c0 4.3-1.7 8.3-4.7 11.3S25.3 37 21 37z"}))}function O(e){var t=v;switch(e.name){case"music":t=b;break;case"play":t=w;break;case"pause":t=k;break;case"replay":t=E;break;case"spin":t=_;break;default:t=v}return P.createElement(t,{className:"rvt-icon rat-icon-".concat(e.name," ").concat(e.className).trim()})}function S(n){var e=o.useRef(),t=o.useCallback(function(e){if(e.target.files.length){var t=e.target.files[0];if(!function(e){return-1<e.type.indexOf("video")}(t))return alert("Unsupported File Type");(n.onFileSelected||h)(t)}}),r=o.useCallback(function(){e.current.click()});return P.createElement("div",{className:"rvt-file-picker",onClick:r},P.createElement(O,{name:"music"}),"Pick A Video",P.createElement("input",{type:"file",accept:"video/*",onChange:t,ref:e}))}O.propTypes={name:f.string};function T(e){var t=e.children;return P.createElement("div",{className:"rvt-status"},t)}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function t(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function j(e,t){return e(t={exports:{}},t.exports),t.exports}function R(e,t,n){var r=document.head||document.getElementsByTagName("head")[0],o=document.createElement("script");"function"==typeof t&&(n=t,t={}),t=t||{},n=n||function(){},o.type=t.type||"text/javascript",o.charset=t.charset||"utf8",o.async=!("async"in t)||!!t.async,o.src=e,t.attrs&&function(e,t){for(var n in t)e.setAttribute(n,t[n])}(o,t.attrs),t.text&&(o.text=""+t.text),("onload"in o?D:C)(o,n),o.onload||D(o,n),r.appendChild(o)}function D(e,t){e.onload=function(){this.onerror=this.onload=null,t(null,e)},e.onerror=function(){this.onerror=this.onload=null,t(new Error("Failed to load "+this.src),e)}}function C(e,t){e.onreadystatechange=function(){"complete"!=this.readyState&&"loaded"!=this.readyState||(this.onreadystatechange=null,t(null,e))}}var L=j(function(e,t){function i(e,t){return!1!==t.clone&&t.isMergeableObject(e)?s(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function l(e,t,n){return e.concat(t).map(function(e){return i(e,n)})}function a(e){return Object.keys(e).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter(function(e){return t.propertyIsEnumerable(e)}):[]}(e))}function u(t,n,r){var o={};return r.isMergeableObject(t)&&a(t).forEach(function(e){o[e]=i(t[e],r)}),a(n).forEach(function(e){r.isMergeableObject(n[e])&&t[e]?o[e]=function(e,t){if(!t.customMerge)return s;var n=t.customMerge(e);return"function"==typeof n?n:s}(e,r)(t[e],n[e],r):o[e]=i(n[e],r)}),o}function s(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||l,n.isMergeableObject=n.isMergeableObject||c;var r=Array.isArray(t),o=Array.isArray(e),a=r===o;return a?r?n.arrayMerge(e,t,n):u(e,t,n):i(t,n)}var c,n;e.exports=(c=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)},n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103,s.all=function(e,n){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,t){return s(e,t,n)},{})},s)}),M=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DEPRECATED_CONFIG_PROPS=t.defaultProps=t.propTypes=void 0;var n,r=(n=f)&&n.__esModule?n:{default:n};var o=r.default.string,a=r.default.bool,i=r.default.number,l=r.default.array,u=r.default.oneOfType,s=r.default.shape,c=r.default.object,p=r.default.func;t.propTypes={url:u([o,l,c]),playing:a,loop:a,controls:a,volume:i,muted:a,playbackRate:i,width:u([o,i]),height:u([o,i]),style:c,progressInterval:i,playsinline:a,pip:a,light:u([a,o]),wrapper:u([o,p,s({render:p.isRequired})]),config:s({soundcloud:s({options:c,preload:a}),youtube:s({playerVars:c,embedOptions:c,preload:a}),facebook:s({appId:o}),dailymotion:s({params:c,preload:a}),vimeo:s({playerOptions:c,preload:a}),file:s({attributes:c,tracks:l,forceVideo:a,forceAudio:a,forceHLS:a,forceDASH:a,hlsOptions:c,hlsVersion:o,dashVersion:o}),wistia:s({options:c}),mixcloud:s({options:c}),twitch:s({options:c})}),onReady:p,onStart:p,onPlay:p,onPause:p,onBuffer:p,onBufferEnd:p,onEnded:p,onError:p,onDuration:p,onSeek:p,onProgress:p,onEnablePIP:p,onDisablePIP:p},t.defaultProps={playing:!1,loop:!1,controls:!1,volume:null,muted:!1,playbackRate:1,width:"640px",height:"360px",style:{},progressInterval:1e3,playsinline:!1,pip:!1,light:!1,wrapper:"div",config:{soundcloud:{options:{visual:!0,buying:!1,liking:!1,download:!1,sharing:!1,show_comments:!1,show_playcount:!1}},youtube:{playerVars:{playsinline:1,showinfo:0,rel:0,iv_load_policy:3,modestbranding:1},embedOptions:{},preload:!1},facebook:{appId:"1309697205772819"},dailymotion:{params:{api:1,"endscreen-enable":!1},preload:!1},vimeo:{playerOptions:{autopause:!1,byline:!1,portrait:!1,title:!1},preload:!1},file:{attributes:{},tracks:[],forceVideo:!1,forceAudio:!1,forceHLS:!1,forceDASH:!1,hlsOptions:{},hlsVersion:"0.10.1",dashVersion:"2.9.2"},wistia:{options:{}},mixcloud:{options:{hide_cover:1}},twitch:{options:{}}},onReady:function(){},onStart:function(){},onPlay:function(){},onPause:function(){},onBuffer:function(){},onBufferEnd:function(){},onEnded:function(){},onError:function(){},onDuration:function(){},onSeek:function(){},onProgress:function(){},onEnablePIP:function(){},onDisablePIP:function(){}},t.DEPRECATED_CONFIG_PROPS=["soundcloudConfig","youtubeConfig","facebookConfig","dailymotionConfig","vimeoConfig","fileConfig","wistiaConfig"]});t(M);M.DEPRECATED_CONFIG_PROPS,M.defaultProps,M.propTypes;var x=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.parseStartTime=function(e){return c(e,a)},t.parseEndTime=function(e){return c(e,l)},t.randomString=function(){return Math.random().toString(36).substr(2,5)},t.queryString=function(t){return Object.keys(t).map(function(e){return e+"="+t[e]}).join("&")},t.getSDK=function(o,a){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null,e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:function(){return!0},l=4<arguments.length&&void 0!==arguments[4]?arguments[4]:r.default;if(window[a]&&e(window[a]))return Promise.resolve(window[a]);return new Promise(function(e,t){if(p[o])p[o].push(e);else{p[o]=[e];var n=function(t){p[o].forEach(function(e){return e(t)})};if(i){var r=window[i];window[i]=function(){r&&r(),n(window[a])}}l(o,function(e){e&&t(e),i||n(window[a])})}})},t.getConfig=function(e,t,n){var r=(0,f.default)(t.config,e.config),o=!0,a=!1,i=void 0;try{for(var l,u=M.DEPRECATED_CONFIG_PROPS[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;if(e[s]){var c=s.replace(/Config$/,"");if(r=(0,f.default)(r,d({},c,e[s])),n){var p="ReactPlayer: %c"+s+" %cis deprecated, please use the config prop instead – https://github.com/CookPete/react-player#config-prop";console.warn(p,"font-weight: bold","")}}}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return r},t.omit=function(e){for(var t,n=arguments.length,r=Array(1<n?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a=(t=[]).concat.apply(t,r),i={},l=Object.keys(e),u=!0,s=!1,c=void 0;try{for(var p,f=l[Symbol.iterator]();!(u=(p=f.next()).done);u=!0){var d=p.value;-1===a.indexOf(d)&&(i[d]=e[d])}}catch(e){s=!0,c=e}finally{try{!u&&f.return&&f.return()}finally{if(s)throw c}}return i},t.callPlayer=function(e){var t;if(!this.player||!this.player[e]){var n="ReactPlayer: "+this.constructor.displayName+" player could not call %c"+e+"%c – ";return this.player?this.player[e]||(n+="The method was not available"):n+="The player was not available",console.warn(n,"font-weight: bold",""),null}for(var r=arguments.length,o=Array(1<r?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return(t=this.player)[e].apply(t,o)},t.isObject=y,t.isEqual=function e(t,n){if("function"==typeof t&&"function"==typeof n)return!0;if(t instanceof Array&&n instanceof Array){if(t.length!==n.length)return!1;for(var r=0;r!==t.length;r++)if(!e(t[r],n[r]))return!1;return!0}if(y(t)&&y(n)){if(Object.keys(t).length!==Object.keys(n).length)return!1;var o=!0,a=!1,i=void 0;try{for(var l,u=Object.keys(t)[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;if(!e(t[s],n[s]))return!1}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return!0}return t===n},t.isMediaStream=function(e){return"undefined"!=typeof window&&void 0!==window.MediaStream&&e instanceof window.MediaStream};var r=o(R),f=o(L);function o(e){return e&&e.__esModule?e:{default:e}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=/[?&#](?:start|t)=([0-9hms]+)/,l=/[?&#]end=([0-9hms]+)/,u=/(\d+)(h|m|s)/g,s=/^\d+$/;function c(e,t){var n=e.match(t);if(n){var r=n[1];if(r.match(u))return function(e){var t=0,n=u.exec(e);for(;null!==n;){var r=i(n,3),o=r[1],a=r[2];"h"===a&&(t+=60*parseInt(o,10)*60),"m"===a&&(t+=60*parseInt(o,10)),"s"===a&&(t+=parseInt(o,10)),n=u.exec(e)}return t}(r);if(s.test(r))return parseInt(r)}}var p={};function y(e){return null!==e&&"object"===(void 0===e?"undefined":n(e))}});t(x);x.parseStartTime,x.parseEndTime,x.randomString,x.queryString,x.getSDK,x.getConfig,x.omit,x.callPlayer,x.isObject,x.isEqual,x.isMediaStream;var F=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,i=(a=P)&&a.__esModule?a:{default:a};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,P.Component),r(s,[{key:"componentDidMount",value:function(){this.mounted=!0,this.player.load(this.props.url),this.progress()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.progressTimeout),clearTimeout(this.durationCheckTimeout),this.isReady&&this.player.stop(),this.player.disablePIP&&this.player.disablePIP(),this.mounted=!1}},{key:"componentWillReceiveProps",value:function(e){var t=this,n=this.props,r=n.url,o=n.playing,a=n.volume,i=n.muted,l=n.playbackRate,u=n.pip,s=n.loop;if(!(0,x.isEqual)(r,e.url)){if(this.isLoading)return console.warn("ReactPlayer: the attempt to load "+e.url+" is being deferred until the player has loaded"),void(this.loadOnReady=e.url);this.isLoading=!0,this.startOnPlay=!0,this.onDurationCalled=!1,this.player.load(e.url,this.isReady)}o||!e.playing||this.isPlaying||this.player.play(),o&&!e.playing&&this.isPlaying&&this.player.pause(),!u&&e.pip&&this.player.enablePIP?this.player.enablePIP():u&&!e.pip&&this.player.disablePIP&&this.player.disablePIP(),a!==e.volume&&null!==e.volume&&this.player.setVolume(e.volume),i!==e.muted&&(e.muted?this.player.mute():(this.player.unmute(),null!==e.volume&&setTimeout(function(){return t.player.setVolume(e.volume)}))),l!==e.playbackRate&&this.player.setPlaybackRate&&this.player.setPlaybackRate(e.playbackRate),s!==e.loop&&this.player.setLoop&&this.player.setLoop(e.loop)}},{key:"getDuration",value:function(){return this.isReady?this.player.getDuration():null}},{key:"getCurrentTime",value:function(){return this.isReady?this.player.getCurrentTime():null}},{key:"getSecondsLoaded",value:function(){return this.isReady?this.player.getSecondsLoaded():null}},{key:"seekTo",value:function(e,t){var n=this;if(!this.isReady&&0!==e)return this.seekOnPlay=e,void setTimeout(function(){n.seekOnPlay=null},5e3);if(t?"fraction"===t:0<e&&e<1){var r=this.player.getDuration();return r?void this.player.seekTo(r*e):void console.warn("ReactPlayer: could not seek using fraction – duration not yet available")}this.player.seekTo(e)}},{key:"render",value:function(){var e=this.props.activePlayer;return e?i.default.createElement(e,n({},this.props,{ref:this.ref,onReady:this.onReady,onPlay:this.onPlay,onPause:this.onPause,onEnded:this.onEnded,onLoaded:this.onLoaded,onError:this.onError})):null}}]),s);function s(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return t=n=l(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o))),c.call(n),l(n,t)}u.displayName="Player",u.propTypes=M.propTypes,u.defaultProps=M.defaultProps;var c=function(){var a=this;this.mounted=!1,this.isReady=!1,this.isPlaying=!1,this.isLoading=!0,this.loadOnReady=null,this.startOnPlay=!0,this.seekOnPlay=null,this.onDurationCalled=!1,this.getInternalPlayer=function(e){return a.player?a.player[e]:null},this.progress=function(){if(a.props.url&&a.player&&a.isReady){var e=a.getCurrentTime()||0,t=a.getSecondsLoaded(),n=a.getDuration();if(n){var r={playedSeconds:e,played:e/n};null!==t&&(r.loadedSeconds=t,r.loaded=t/n),r.playedSeconds===a.prevPlayed&&r.loadedSeconds===a.prevLoaded||a.props.onProgress(r),a.prevPlayed=r.playedSeconds,a.prevLoaded=r.loadedSeconds}}a.progressTimeout=setTimeout(a.progress,a.props.progressFrequency||a.props.progressInterval)},this.onReady=function(){if(a.mounted){a.isReady=!0,a.isLoading=!1;var e=a.props,t=e.onReady,n=e.playing,r=e.volume,o=e.muted;t(),o||null===r||a.player.setVolume(r),a.loadOnReady?(a.player.load(a.loadOnReady,!0),a.loadOnReady=null):n&&a.player.play(),a.onDurationCheck()}},this.onPlay=function(){a.isPlaying=!0,a.isLoading=!1;var e=a.props,t=e.onStart,n=e.onPlay,r=e.playbackRate;a.startOnPlay&&(a.player.setPlaybackRate&&a.player.setPlaybackRate(r),t(),a.startOnPlay=!1),n(),a.seekOnPlay&&(a.seekTo(a.seekOnPlay),a.seekOnPlay=null),a.onDurationCheck()},this.onPause=function(e){a.isPlaying=!1,a.isLoading||a.props.onPause(e)},this.onEnded=function(){var e=a.props,t=e.activePlayer,n=e.loop,r=e.onEnded;t.loopOnEnded&&n&&a.seekTo(0),n||(a.isPlaying=!1,r())},this.onError=function(){var e;a.isLoading=!1,(e=a.props).onError.apply(e,arguments)},this.onDurationCheck=function(){clearTimeout(a.durationCheckTimeout);var e=a.getDuration();e?a.onDurationCalled||(a.props.onDuration(e),a.onDurationCalled=!0):a.durationCheckTimeout=setTimeout(a.onDurationCheck,100)},this.onLoaded=function(){a.isLoading=!1},this.ref=function(e){e&&(a.player=e)}};t.default=u});t(F);var A=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}t.default=function(f){var e,t;return t=e=function(){function i(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=i.__proto__||Object.getPrototypeOf(i)).call.apply(e,[this].concat(o)))).config=(0,x.getConfig)(n.props,M.defaultProps,!0),n.getDuration=function(){return n.player?n.player.getDuration():null},n.getCurrentTime=function(){return n.player?n.player.getCurrentTime():null},n.getSecondsLoaded=function(){return n.player?n.player.getSecondsLoaded():null},n.getInternalPlayer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null},n.seekTo=function(e,t){if(!n.player)return null;n.player.seekTo(e,t)},n.ref=function(e){n.player=e},l(n,t)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,P.Component),n(i,[{key:"shouldComponentUpdate",value:function(e){return!(0,x.isEqual)(this.props,e)}},{key:"componentWillUpdate",value:function(e){this.config=(0,x.getConfig)(e,M.defaultProps)}},{key:"render",value:function(){var e=this.config.file,t=e.forceVideo,n=e.forceAudio,r=e.forceHLS,o=e.forceDASH,a=t||n||r||o;if(!f.canPlay(this.props.url)&&!a)return null;var i=this.props,l=i.style,u=i.width,s=i.height,c=i.wrapper,p=(0,x.omit)(this.props,v,M.DEPRECATED_CONFIG_PROPS);return y.default.createElement(c,d({style:d({},l,{width:u,height:s})},p),y.default.createElement(h.default,d({},this.props,{ref:this.ref,activePlayer:f,config:this.config})))}}]),i}(),e.displayName=f.displayName+"Player",e.propTypes=M.propTypes,e.defaultProps=M.defaultProps,e.canPlay=f.canPlay,t};var y=o(P),h=o(F);function o(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=Object.keys(M.propTypes)});t(A);var V=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.YouTube=void 0;var h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},a=l(P),i=l(A);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})|youtube\.com\/playlist\?list=/,m=/list=([a-zA-Z0-9_-]+)/;function g(e){if(m.test(e)){var t=e.match(m);return{listType:"playlist",list:o(t,2)[1]}}return{}}var s=t.YouTube=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"load",value:function(t,e){var n=this,r=this.props,o=r.playing,a=r.muted,i=r.playsinline,l=r.controls,u=r.loop,s=r.config,c=r.onError,p=s.youtube,f=p.playerVars,d=p.embedOptions,y=t&&t.match(v)[1];if(e)return m.test(t)?void this.player.loadPlaylist(g(t)):void this.player.cueVideoById({videoId:y,startSeconds:(0,x.parseStartTime)(t)||f.start,endSeconds:(0,x.parseEndTime)(t)||f.end});(0,x.getSDK)("https://www.youtube.com/iframe_api","YT","onYouTubeIframeAPIReady",function(e){return e.loaded}).then(function(e){n.container&&(n.player=new e.Player(n.container,h({width:"100%",height:"100%",videoId:y,playerVars:h({autoplay:o?1:0,mute:a?1:0,controls:l?1:0,start:(0,x.parseStartTime)(t),end:(0,x.parseEndTime)(t),origin:window.location.origin,playsinline:i},g(t),f),events:{onReady:function(){u&&n.player.setLoop(!0),n.props.onReady()},onStateChange:n.onStateChange,onError:function(e){return c(e.data)}}},d)))},c)}},{key:"play",value:function(){this.callPlayer("playVideo")}},{key:"pause",value:function(){this.callPlayer("pauseVideo")}},{key:"stop",value:function(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",e),this.props.playing||this.pause()}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("setPlaybackRate",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}},{key:"render",value:function(){return a.default.createElement("div",{style:{width:"100%",height:"100%"}},a.default.createElement("div",{ref:this.ref}))}}]),c);function c(){var e,t,m;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=m=u(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(r)))).callPlayer=x.callPlayer,m.onStateChange=function(e){var t=e.data,n=m.props,r=n.onPlay,o=n.onPause,a=n.onBuffer,i=n.onBufferEnd,l=n.onEnded,u=n.onReady,s=n.loop,c=window.YT.PlayerState,p=c.PLAYING,f=c.PAUSED,d=c.BUFFERING,y=c.ENDED,h=c.CUED;if(t===p&&(r(),i()),t===f&&o(),t===d&&a(),t===y){var v=!!m.callPlayer("getPlaylist");s&&!v&&m.play(),l()}t===h&&u()},m.mute=function(){m.callPlayer("mute")},m.unmute=function(){m.callPlayer("unMute")},m.ref=function(e){m.container=e},u(m,t)}s.displayName="YouTube",s.canPlay=function(e){return v.test(e)},t.default=(0,i.default)(s)});t(V);V.YouTube;var I=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.SoundCloud=void 0;var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(A);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/(soundcloud\.com|snd\.sc)\/.+$/,s=t.SoundCloud=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(p,P.Component),n(p,[{key:"load",value:function(l,u){var s=this;(0,x.getSDK)("https://w.soundcloud.com/player/api.js","SC").then(function(e){if(s.iframe){var t=e.Widget.Events,n=t.PLAY,r=t.PLAY_PROGRESS,o=t.PAUSE,a=t.FINISH,i=t.ERROR;u||(s.player=e.Widget(s.iframe),s.player.bind(n,s.props.onPlay),s.player.bind(o,s.props.onPause),s.player.bind(r,function(e){s.currentTime=e.currentPosition/1e3,s.fractionLoaded=e.loadedProgress}),s.player.bind(a,function(){return s.props.onEnded()}),s.player.bind(i,function(e){return s.props.onError(e)})),s.player.load(l,c({},s.props.config.soundcloud.options,{callback:function(){s.player.getDuration(function(e){s.duration=e/1e3,s.props.onReady()})}}))}})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seekTo",1e3*e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.fractionLoaded*this.duration}},{key:"render",value:function(){return o.default.createElement("iframe",{ref:this.ref,src:"https://w.soundcloud.com/player/?url="+encodeURIComponent(this.props.url),style:{width:"100%",height:"100%"},frameBorder:0,allow:"autoplay"})}}]),p);function p(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=p.__proto__||Object.getPrototypeOf(p)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.duration=null,n.currentTime=null,n.fractionLoaded=null,n.mute=function(){n.setVolume(0)},n.unmute=function(){null!==n.props.volume&&n.setVolume(n.props.volume)},n.ref=function(e){n.iframe=e},l(n,t)}s.displayName="SoundCloud",s.canPlay=function(e){return u.test(e)},s.loopOnEnded=!0,t.default=(0,a.default)(s)});t(I);I.SoundCloud;var N=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Vimeo=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=l(P),i=l(A);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=/vimeo\.com\/.+/,c=/vimeo\.com\/external\/[0-9]+\..+/,p=t.Vimeo=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(t){var n=this;this.duration=null,(0,x.getSDK)("https://player.vimeo.com/api/player.js","Vimeo").then(function(e){n.container&&(n.player=new e.Player(n.container,r({url:t,autoplay:n.props.playing,muted:n.props.muted,loop:n.props.loop,playsinline:n.props.playsinline},n.props.config.vimeo.playerOptions)),n.player.ready().then(function(){var e=n.container.querySelector("iframe");e.style.width="100%",e.style.height="100%"}).catch(n.props.onError),n.player.on("loaded",function(){n.props.onReady(),n.refreshDuration()}),n.player.on("play",function(){n.props.onPlay(),n.refreshDuration()}),n.player.on("pause",n.props.onPause),n.player.on("seeked",function(e){return n.props.onSeek(e.seconds)}),n.player.on("ended",n.props.onEnded),n.player.on("error",n.props.onError),n.player.on("timeupdate",function(e){var t=e.seconds;n.currentTime=t}),n.player.on("progress",function(e){var t=e.seconds;n.secondsLoaded=t}))},this.props.onError)}},{key:"refreshDuration",value:function(){var t=this;this.player.getDuration().then(function(e){t.duration=e})}},{key:"play",value:function(){var e=this.callPlayer("play");e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("unload")}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){return a.default.createElement("div",{key:this.props.url,ref:this.ref,style:{width:"100%",height:"100%",overflow:"hidden",backgroundColor:"black"}})}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=u(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){n.setVolume(0)},n.unmute=function(){null!==n.props.volume&&n.setVolume(n.props.volume)},n.ref=function(e){n.container=e},u(n,t)}p.displayName="Vimeo",p.canPlay=function(e){return!c.test(e)&&s.test(e)},t.default=(0,i.default)(p)});t(N);N.Vimeo;var B=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Facebook=void 0;var n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(A);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u="//connect.facebook.net/en_US/sdk.js",s="fbAsyncInit",c=/facebook\.com\/([^/?].+\/)?video(s|\.php)[/?].*$/,p=t.Facebook=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(e,t){var n=this;t?(0,x.getSDK)(u,"FB",s).then(function(e){return e.XFBML.parse()}):(0,x.getSDK)(u,"FB",s).then(function(e){e.init({appId:n.props.config.facebook.appId,xfbml:!0,version:"v2.5"}),e.Event.subscribe("xfbml.render",function(e){n.props.onLoaded()}),e.Event.subscribe("xfbml.ready",function(e){"video"===e.type&&e.id===n.playerID&&(n.player=e.instance,n.player.subscribe("startedPlaying",n.props.onPlay),n.player.subscribe("paused",n.props.onPause),n.player.subscribe("finishedPlaying",n.props.onEnded),n.player.subscribe("startedBuffering",n.props.onBuffer),n.player.subscribe("finishedBuffering",n.props.onBufferEnd),n.player.subscribe("error",n.props.onError),n.props.muted||n.callPlayer("unmute"),n.props.onReady(),document.getElementById(n.playerID).querySelector("iframe").style.visibility="visible")})})}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentPosition")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%",backgroundColor:"black"},id:this.playerID,className:"fb-video","data-href":this.props.url,"data-autoplay":this.props.playing?"true":"false","data-allowfullscreen":"true","data-controls":this.props.controls?"true":"false"})}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.playerID="facebook-player-"+(0,x.randomString)(),n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},l(n,t)}p.displayName="Facebook",p.canPlay=function(e){return c.test(e)},p.loopOnEnded=!0,t.default=(0,a.default)(p)});t(B);B.Facebook;var U=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Streamable=void 0;var n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(A);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/streamable\.com\/([a-z0-9]+)$/,s=t.Streamable=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"load",value:function(e){var r=this;(0,x.getSDK)("//cdn.embed.ly/player-0.1.0.min.js","playerjs").then(function(e){r.iframe&&(r.player=new e.Player(r.iframe),r.player.setLoop(r.props.loop),r.player.on("ready",r.props.onReady),r.player.on("play",r.props.onPlay),r.player.on("pause",r.props.onPause),r.player.on("seeked",r.props.onSeek),r.player.on("ended",r.props.onEnded),r.player.on("error",r.props.onError),r.player.on("timeupdate",function(e){var t=e.duration,n=e.seconds;r.duration=t,r.currentTime=n}),r.player.on("buffered",function(e){var t=e.percent;r.duration&&(r.secondsLoaded=r.duration*t)}),r.props.muted&&r.player.mute())},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("setCurrentTime",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",100*e)}},{key:"setLoop",value:function(e){this.callPlayer("setLoop",e)}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return this.secondsLoaded}},{key:"render",value:function(){var e=this.props.url.match(u)[1];return o.default.createElement("iframe",{ref:this.ref,src:"https://streamable.com/o/"+e,frameBorder:"0",scrolling:"no",style:{width:"100%",height:"100%"},allowFullScreen:!0})}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},n.ref=function(e){n.iframe=e},l(n,t)}s.displayName="Streamable",s.canPlay=function(e){return u.test(e)},t.default=(0,a.default)(s)});t(U);U.Streamable;var W=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Wistia=void 0;var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(A);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=/(?:wistia\.com|wi\.st)\/(?:medias|embed)\/(.*)$/,s=t.Wistia=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"getID",value:function(e){return e&&e.match(u)[1]}},{key:"load",value:function(e){var t=this,n=this.props,r=n.playing,o=n.muted,a=n.controls,i=n.onReady,l=n.onPlay,u=n.onPause,s=n.onSeek,c=n.onEnded,p=n.config,f=n.onError;(0,x.getSDK)("//fast.wistia.com/assets/external/E-v1.js","Wistia").then(function(){window._wq=window._wq||[],window._wq.push({id:t.getID(e),options:d({autoPlay:r,silentAutoPlay:"allow",muted:o,controlsVisibleOnLoad:a},p.wistia.options),onReady:function(e){t.player=e,t.unbind(),t.player.bind("play",l),t.player.bind("pause",u),t.player.bind("seek",s),t.player.bind("end",c),i()}})},f)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"unbind",value:function(){var e=this.props,t=e.onPlay,n=e.onPause,r=e.onSeek,o=e.onEnded;this.player.unbind("play",t),this.player.unbind("pause",n),this.player.unbind("seek",r),this.player.unbind("end",o)}},{key:"stop",value:function(){this.unbind(),this.callPlayer("remove")}},{key:"seekTo",value:function(e){this.callPlayer("time",e)}},{key:"setVolume",value:function(e){this.callPlayer("volume",e)}},{key:"setPlaybackRate",value:function(e){this.callPlayer("playbackRate",e)}},{key:"getDuration",value:function(){return this.callPlayer("duration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("time")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.getID(this.props.url),t="wistia_embed wistia_async_"+e;return o.default.createElement("div",{key:e,className:t,style:{width:"100%",height:"100%"}})}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.mute=function(){n.callPlayer("mute")},n.unmute=function(){n.callPlayer("unmute")},l(n,t)}s.displayName="Wistia",s.canPlay=function(e){return u.test(e)},s.loopOnEnded=!0,t.default=(0,a.default)(s)});t(W);W.Wistia;var G=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Twitch=void 0;var d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(A);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var y=/(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/,h=/(?:www\.|go\.)?twitch\.tv\/([a-z0-9_]+)($|\?)/,u=t.Twitch=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,P.Component),n(s,[{key:"load",value:function(e,t){var u=this,n=this.props,s=n.playsinline,r=n.onError,c=n.config,p=h.test(e),f=p?e.match(h)[1]:e.match(y)[1];t?p?this.player.setChannel(f):this.player.setVideo("v"+f):(0,x.getSDK)("https://player.twitch.tv/js/embed/v1.js","Twitch").then(function(e){u.player=new e.Player(u.playerID,d({video:p?"":f,channel:p?f:"",height:"100%",width:"100%",playsinline:s,autoplay:u.props.playing,muted:u.props.muted},c.twitch.options));var t=e.Player,n=t.READY,r=t.PLAYING,o=t.PAUSE,a=t.ENDED,i=t.ONLINE,l=t.OFFLINE;u.player.addEventListener(n,u.props.onReady),u.player.addEventListener(r,u.props.onPlay),u.player.addEventListener(o,u.props.onPause),u.player.addEventListener(a,u.props.onEnded),u.player.addEventListener(i,u.props.onLoaded),u.player.addEventListener(l,u.props.onLoaded)},r)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){this.callPlayer("pause")}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.callPlayer("getDuration")}},{key:"getCurrentTime",value:function(){return this.callPlayer("getCurrentTime")}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%"},id:this.playerID})}}]),s);function s(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=s.__proto__||Object.getPrototypeOf(s)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.playerID="twitch-player-"+(0,x.randomString)(),n.mute=function(){n.callPlayer("setMuted",!0)},n.unmute=function(){n.callPlayer("setMuted",!1)},l(n,t)}u.displayName="Twitch",u.canPlay=function(e){return y.test(e)||h.test(e)},u.loopOnEnded=!0,t.default=(0,a.default)(u)});t(G);G.Twitch;var H=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DailyMotion=void 0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=i(P),a=i(A);function i(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var p=/^(?:(?:https?):)?(?:\/\/)?(?:www\.)?(?:(?:dailymotion\.com(?:\/embed)?\/video)|dai\.ly)\/([a-zA-Z0-9]+)(?:_[\w_-]+)?$/,u=t.DailyMotion=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,P.Component),n(f,[{key:"load",value:function(n){var r=this,e=this.props,o=e.controls,a=e.config,i=e.onError,t=e.playing,l=n.match(p),u=c(l,2)[1];this.player?this.player.load(u,{start:(0,x.parseStartTime)(n),autoplay:t}):(0,x.getSDK)("https://api.dmcdn.net/all.js","DM","dmAsyncInit",function(e){return e.player}).then(function(e){if(r.container){var t=e.player;r.player=new t(r.container,{width:"100%",height:"100%",video:u,params:s({controls:o,autoplay:r.props.playing,mute:r.props.muted,start:(0,x.parseStartTime)(n),origin:window.location.origin},a.dailymotion.params),events:{apiready:r.props.onReady,seeked:function(){return r.props.onSeek(r.player.currentTime)},video_end:r.props.onEnded,durationchange:r.onDurationChange,pause:r.props.onPause,playing:r.props.onPlay,waiting:r.props.onBuffer,error:function(e){return i(e)}}})}},i)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){this.callPlayer("setVolume",e)}},{key:"getDuration",value:function(){return this.player.duration||null}},{key:"getCurrentTime",value:function(){return this.player.currentTime}},{key:"getSecondsLoaded",value:function(){return this.player.bufferedTime}},{key:"render",value:function(){return o.default.createElement("div",{style:{width:"100%",height:"100%",backgroundColor:"black"}},o.default.createElement("div",{ref:this.ref}))}}]),f);function f(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=f.__proto__||Object.getPrototypeOf(f)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.onDurationChange=function(){var e=n.getDuration();n.props.onDuration(e)},n.mute=function(){n.callPlayer("setMuted",!0)},n.unmute=function(){n.callPlayer("setMuted",!1)},n.ref=function(e){n.container=e},l(n,t)}u.displayName="DailyMotion",u.canPlay=function(e){return p.test(e)},u.loopOnEnded=!0,t.default=(0,a.default)(u)});t(H);H.DailyMotion;var z=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Mixcloud=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=l(P),o=l(A);function l(e){return e&&e.__esModule?e:{default:e}}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var s=/mixcloud\.com\/([^/]+\/[^/]+)/,c=t.Mixcloud=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(p,P.Component),n(p,[{key:"load",value:function(e){var n=this;(0,x.getSDK)("//widget.mixcloud.com/media/js/widgetApi.js","Mixcloud").then(function(e){n.player=e.PlayerWidget(n.iframe),n.player.ready.then(function(){n.player.events.play.on(n.props.onPlay),n.player.events.pause.on(n.props.onPause),n.player.events.ended.on(n.props.onEnded),n.player.events.error.on(n.props.error),n.player.events.progress.on(function(e,t){n.currentTime=e,n.duration=t}),n.props.onReady()})},this.props.onError)}},{key:"play",value:function(){this.callPlayer("play")}},{key:"pause",value:function(){this.callPlayer("pause")}},{key:"stop",value:function(){}},{key:"seekTo",value:function(e){this.callPlayer("seek",e)}},{key:"setVolume",value:function(e){}},{key:"getDuration",value:function(){return this.duration}},{key:"getCurrentTime",value:function(){return this.currentTime}},{key:"getSecondsLoaded",value:function(){return null}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.config,r=t.match(s)[1],o=(0,x.queryString)(a({},n.mixcloud.options,{feed:"/"+r+"/"}));return i.default.createElement("iframe",{key:r,ref:this.ref,style:{width:"100%",height:"100%"},src:"https://www.mixcloud.com/widget/iframe/?"+o,frameBorder:"0"})}}]),p);function p(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=u(this,(e=p.__proto__||Object.getPrototypeOf(p)).call.apply(e,[this].concat(o)))).callPlayer=x.callPlayer,n.duration=null,n.currentTime=null,n.secondsLoaded=null,n.mute=function(){},n.unmute=function(){},n.ref=function(e){n.iframe=e},u(n,t)}c.displayName="Mixcloud",c.canPlay=function(e){return s.test(e)},c.loopOnEnded=!0,t.default=(0,o.default)(c)});t(z);z.Mixcloud;var Y=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FilePlayer=void 0;var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=a(P),o=a(A);function a(e){return e&&e.__esModule?e:{default:e}}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l="undefined"!=typeof navigator&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,u=/\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i,s=/\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i,c=/\.(m3u8)($|\?)/i,d=/\.(mpd)($|\?)/i,y=/www\.dropbox\.com\/.+/;function h(e){if(e instanceof Array){var t=!0,n=!1,r=void 0;try{for(var o,a=e[Symbol.iterator]();!(t=(o=a.next()).done);t=!0){var i=o.value;if("string"==typeof i&&h(i))return!0;if(h(i.src))return!0}}catch(e){n=!0,r=e}finally{try{!t&&a.return&&a.return()}finally{if(n)throw r}}return!1}return!!(0,x.isMediaStream)(e)||(u.test(e)||s.test(e)||c.test(e)||d.test(e))}var v=t.FilePlayer=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(m,P.Component),n(m,[{key:"componentDidMount",value:function(){this.addListeners(),l&&this.player.load()}},{key:"componentWillReceiveProps",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&this.removeListeners()}},{key:"componentDidUpdate",value:function(e){this.shouldUseAudio(this.props)!==this.shouldUseAudio(e)&&this.addListeners()}},{key:"componentWillUnmount",value:function(){this.removeListeners()}},{key:"addListeners",value:function(){var e=this.props,t=e.onReady,n=e.onPlay,r=e.onBuffer,o=e.onBufferEnd,a=e.onPause,i=e.onEnded,l=e.onError,u=e.playsinline,s=e.onEnablePIP;this.player.addEventListener("canplay",t),this.player.addEventListener("play",n),this.player.addEventListener("waiting",r),this.player.addEventListener("playing",o),this.player.addEventListener("pause",a),this.player.addEventListener("seeked",this.onSeek),this.player.addEventListener("ended",i),this.player.addEventListener("error",l),this.player.addEventListener("enterpictureinpicture",s),this.player.addEventListener("leavepictureinpicture",this.onDisablePIP),u&&(this.player.setAttribute("playsinline",""),this.player.setAttribute("webkit-playsinline",""),this.player.setAttribute("x5-playsinline",""))}},{key:"removeListeners",value:function(){var e=this.props,t=e.onReady,n=e.onPlay,r=e.onBuffer,o=e.onBufferEnd,a=e.onPause,i=e.onEnded,l=e.onError,u=e.onEnablePIP;this.player.removeEventListener("canplay",t),this.player.removeEventListener("play",n),this.player.removeEventListener("waiting",r),this.player.removeEventListener("playing",o),this.player.removeEventListener("pause",a),this.player.removeEventListener("seeked",this.onSeek),this.player.removeEventListener("ended",i),this.player.removeEventListener("error",l),this.player.removeEventListener("enterpictureinpicture",u),this.player.removeEventListener("leavepictureinpicture",this.onDisablePIP)}},{key:"shouldUseAudio",value:function(e){return!e.config.file.forceVideo&&!e.config.file.attributes.poster&&(u.test(e.url)||e.config.file.forceAudio)}},{key:"shouldUseHLS",value:function(e){return c.test(e)&&!l||this.props.config.file.forceHLS}},{key:"shouldUseDASH",value:function(e){return d.test(e)||this.props.config.file.forceDASH}},{key:"load",value:function(t){var r=this,e=this.props.config.file,n=e.hlsVersion,o=e.dashVersion;if(this.shouldUseHLS(t)&&(0,x.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/hls.js/VERSION/hls.min.js".replace("VERSION",n),"Hls").then(function(n){r.hls=new n(r.props.config.file.hlsOptions),r.hls.on(n.Events.ERROR,function(e,t){r.props.onError(e,t,r.hls,n)}),r.hls.loadSource(t),r.hls.attachMedia(r.player)}),this.shouldUseDASH(t)&&(0,x.getSDK)("https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js".replace("VERSION",o),"dashjs").then(function(e){r.dash=e.MediaPlayer().create(),r.dash.initialize(r.player,t,r.props.playing),r.dash.getDebug().setLogToBrowserConsole(!1)}),t instanceof Array)this.player.load();else if((0,x.isMediaStream)(t))try{this.player.srcObject=t}catch(e){this.player.src=window.URL.createObjectURL(t)}}},{key:"play",value:function(){var e=this.player.play();e&&e.catch(this.props.onError)}},{key:"pause",value:function(){this.player.pause()}},{key:"stop",value:function(){this.player.removeAttribute("src"),this.hls&&this.hls.destroy(),this.dash&&this.dash.reset()}},{key:"seekTo",value:function(e){this.player.currentTime=e}},{key:"setVolume",value:function(e){this.player.volume=e}},{key:"enablePIP",value:function(){this.player.requestPictureInPicture&&document.pictureInPictureElement!==this.player&&this.player.requestPictureInPicture()}},{key:"disablePIP",value:function(){document.exitPictureInPicture&&document.pictureInPictureElement===this.player&&document.exitPictureInPicture()}},{key:"setPlaybackRate",value:function(e){this.player.playbackRate=e}},{key:"getDuration",value:function(){if(!this.player)return null;var e=this.player,t=e.duration,n=e.seekable;return t===1/0&&0<n.length?n.end(n.length-1):t}},{key:"getCurrentTime",value:function(){return this.player?this.player.currentTime:null}},{key:"getSecondsLoaded",value:function(){if(!this.player)return null;var e=this.player.buffered;if(0===e.length)return 0;var t=e.end(e.length-1),n=this.getDuration();return n<t?n:t}},{key:"getSource",value:function(e){var t=this.shouldUseHLS(e),n=this.shouldUseDASH(e);if(!(e instanceof Array||(0,x.isMediaStream)(e)||t||n))return y.test(e)?e.replace("www.dropbox.com","dl.dropboxusercontent.com"):e}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.playing,r=e.loop,o=e.controls,a=e.muted,i=e.config,l=e.width,u=e.height,s=this.shouldUseAudio(this.props)?"audio":"video",c={width:"auto"===l?l:"100%",height:"auto"===u?u:"100%"};return f.default.createElement(s,p({ref:this.ref,src:this.getSource(t),style:c,preload:"auto",autoPlay:n||void 0,controls:o,muted:a,loop:r},i.file.attributes),t instanceof Array&&t.map(this.renderSourceElement),i.file.tracks.map(this.renderTrack))}}]),m);function m(){var e,t,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,m);for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=o=i(this,(e=m.__proto__||Object.getPrototypeOf(m)).call.apply(e,[this].concat(r)))).onDisablePIP=function(e){var t=o.props,n=t.onDisablePIP,r=t.playing;n(e),r&&o.play()},o.onSeek=function(e){o.props.onSeek(e.target.currentTime)},o.mute=function(){o.player.muted=!0},o.unmute=function(){o.player.muted=!1},o.renderSourceElement=function(e,t){return"string"==typeof e?f.default.createElement("source",{key:t,src:e}):f.default.createElement("source",p({key:t},e))},o.renderTrack=function(e,t){return f.default.createElement("track",p({key:t},e))},o.ref=function(e){o.player=e},i(o,t)}v.displayName="FilePlayer",v.canPlay=h,v.canEnablePIP=function(e){return h(e)&&!!document.pictureInPictureEnabled&&!u.test(e)},t.default=(0,o.default)(v)});t(Y);Y.FilePlayer;var q=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=[V.YouTube,I.SoundCloud,N.Vimeo,B.Facebook,U.Streamable,W.Wistia,G.Twitch,H.DailyMotion,z.Mixcloud,Y.FilePlayer]});t(q);var K=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a,i=(a=P)&&a.__esModule?a:{default:a};function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u="64px",s=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"componentDidMount",value:function(){this.mounted=!0,this.fetchImage(this.props)}},{key:"componentWillReceiveProps",value:function(e){var t=this.props,n=t.url,r=t.light;n===e.url&&r===e.light||this.fetchImage(e)}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"fetchImage",value:function(e){var n=this,t=e.url,r=e.light;if("string"!=typeof r)return this.setState({image:null}),window.fetch("https://noembed.com/embed?url="+t).then(function(e){return e.json()}).then(function(e){if(e.thumbnail_url&&n.mounted){var t=e.thumbnail_url.replace("height=100","height=480");n.setState({image:t})}});this.setState({image:r})}},{key:"render",value:function(){var e=this.props.onClick,t=this.state.image,n={display:"flex",alignItems:"center",justifyContent:"center"},r={preview:o({width:"100%",height:"100%",backgroundImage:t?"url("+t+")":void 0,backgroundSize:"cover",backgroundPosition:"center",cursor:"pointer"},n),shadow:o({background:"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)",borderRadius:u,width:u,height:u},n),playIcon:{borderStyle:"solid",borderWidth:"16px 0 16px 26px",borderColor:"transparent transparent transparent white",marginLeft:"7px"}};return i.default.createElement("div",{style:r.preview,className:"react-player__preview",onClick:e},i.default.createElement("div",{style:r.shadow,className:"react-player__shadow"},i.default.createElement("div",{style:r.playIcon,className:"react-player__play-icon"})))}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).mounted=!1,n.state={image:null},l(n,t)}t.default=s});t(K);var $=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=[],o=!0,a=!1,i=void 0;try{for(var l,u=f[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var s=l.value;!s.Player.canPlay(e)&&n[s.configKey].preload&&r.push(c.default.createElement(p.default,{key:s.Player.displayName,activePlayer:s.Player,url:s.url,controls:t,playing:!0,muted:!0,style:{display:"none"}}))}}catch(e){a=!0,i=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw i}}return r};var c=n(P),p=n(F);function n(e){return e&&e.__esModule?e:{default:e}}var f=[{Player:V.YouTube,configKey:"youtube",url:"https://www.youtube.com/watch?v=GlCmAC4MHek"},{Player:I.SoundCloud,configKey:"soundcloud",url:"https://soundcloud.com/seucheu/john-cage-433-8-bit-version"},{Player:N.Vimeo,configKey:"vimeo",url:"https://vimeo.com/300970506"},{Player:H.DailyMotion,configKey:"dailymotion",url:"http://www.dailymotion.com/video/xqdpyk"}]});t($);function X(e){var t=e.onPlayPauseClick,n=e.playing,r=e.onReselectFile,o=e.processing,a=e.onEncode,i=e.showEncodeBtn,l=e.canDownload,u=e.onDownload;return P.createElement("div",{className:"rvt-controls-cont"},P.createElement("a",{className:"rvt-controller-item",title:"Pause",onClick:t},P.createElement(O,{name:n?"pause":"play"})),P.createElement("a",{className:"rvt-controller-item",title:"Select File",onClick:r},P.createElement(O,{name:"music"})),!i&&P.createElement("div",{className:"rvt-controller-dropdown rvt-controller-list-wrap"},l?P.createElement("a",{className:"rvt-controller-item",onClick:u},P.createElement(O,{name:"download"})):P.createElement("a",{className:"rvt-controller-item",onClick:a},P.createElement(O,{name:o?"spin":"replay"}))))}var Z=j(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.FilePlayer=t.Mixcloud=t.DailyMotion=t.Twitch=t.Wistia=t.Streamable=t.Facebook=t.Vimeo=t.SoundCloud=t.YouTube=void 0;var h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}Object.defineProperty(t,"YouTube",{enumerable:!0,get:function(){return i(V).default}}),Object.defineProperty(t,"SoundCloud",{enumerable:!0,get:function(){return i(I).default}}),Object.defineProperty(t,"Vimeo",{enumerable:!0,get:function(){return i(N).default}}),Object.defineProperty(t,"Facebook",{enumerable:!0,get:function(){return i(B).default}}),Object.defineProperty(t,"Streamable",{enumerable:!0,get:function(){return i(U).default}}),Object.defineProperty(t,"Wistia",{enumerable:!0,get:function(){return i(W).default}}),Object.defineProperty(t,"Twitch",{enumerable:!0,get:function(){return i(G).default}}),Object.defineProperty(t,"DailyMotion",{enumerable:!0,get:function(){return i(H).default}}),Object.defineProperty(t,"Mixcloud",{enumerable:!0,get:function(){return i(z).default}}),Object.defineProperty(t,"FilePlayer",{enumerable:!0,get:function(){return i(Y).default}});var v=i(P),o=i(q),a=i(F),m=i(K),g=i($);function i(e){return e&&e.__esModule?e:{default:e}}function b(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var w=Object.keys(M.propTypes),u=[],s=(function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,P.Component),n(c,[{key:"componentDidMount",value:function(){this.props.progressFrequency&&console.warn("ReactPlayer: %cprogressFrequency%c is deprecated, please use %cprogressInterval%c instead","font-weight: bold","","font-weight: bold","")}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,x.isEqual)(this.props,e)||!(0,x.isEqual)(this.state,t)}},{key:"componentWillUpdate",value:function(e){this.config=(0,x.getConfig)(e,M.defaultProps),!this.props.light&&e.light&&this.setState({showPreview:!0})}},{key:"getActivePlayer",value:function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){var r=t[n];if(r.canPlay(e))return r}return Y.FilePlayer}},{key:"renderActivePlayer",value:function(e,t){return e?v.default.createElement(a.default,h({},this.props,{key:t.displayName,ref:this.activePlayerRef,config:this.config,activePlayer:t,onReady:this.onReady})):null}},{key:"sortPlayers",value:function(e,t){return e&&t?e.key<t.key?-1:1:0}},{key:"render",value:function(){var e=this.props,t=e.url,n=e.controls,r=e.style,o=e.width,a=e.height,i=e.light,l=e.wrapper,u=this.state.showPreview&&t,s=(0,x.omit)(this.props,w,M.DEPRECATED_CONFIG_PROPS),c=this.getActivePlayer(t),p=this.renderActivePlayer(t,c),f=(0,g.default)(t,n,this.config),d=[p].concat(b(f)).sort(this.sortPlayers),y=v.default.createElement(m.default,{url:t,light:i,onClick:this.onClickPreview});return v.default.createElement(l,h({ref:this.wrapperRef,style:h({},r,{width:o,height:a})},s),u?y:d)}}]),c);function c(){var e,t,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);for(var r=arguments.length,o=Array(r),a=0;a<r;a++)o[a]=arguments[a];return(t=n=l(this,(e=c.__proto__||Object.getPrototypeOf(c)).call.apply(e,[this].concat(o)))).config=(0,x.getConfig)(n.props,M.defaultProps,!0),n.state={showPreview:!!n.props.light},n.onClickPreview=function(){n.setState({showPreview:!1})},n.getDuration=function(){return n.player?n.player.getDuration():null},n.getCurrentTime=function(){return n.player?n.player.getCurrentTime():null},n.getSecondsLoaded=function(){return n.player?n.player.getSecondsLoaded():null},n.getInternalPlayer=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"player";return n.player?n.player.getInternalPlayer(e):null},n.seekTo=function(e,t){if(!n.player)return null;n.player.seekTo(e,t)},n.onReady=function(){n.props.onReady(n)},n.wrapperRef=function(e){n.wrapper=e},n.activePlayerRef=function(e){n.player=e},l(n,t)}s.addCustomPlayer=function(e){u.push(e)},s.removeCustomPlayers=function(){u=[]},s.displayName="ReactPlayer",s.propTypes=M.propTypes,s.defaultProps=M.defaultProps,s.canPlay=function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){if(t[n].canPlay(e))return!0}return!1},s.canEnablePIP=function(e){for(var t=[].concat(b(u),b(o.default)),n=0;n<t.length;n++){var r=t[n];if(r.canEnablePIP&&r.canEnablePIP(e))return!0}return!1},t.default=s}),J=t(Z),Q=(Z.FilePlayer,Z.Mixcloud,Z.DailyMotion,Z.Twitch,Z.Wistia,Z.Streamable,Z.Facebook,Z.Vimeo,Z.SoundCloud,Z.YouTube,function(){function a(){var e,o;i(this,a);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return s(d(o=y(this,(e=p(a)).call.apply(e,[this].concat(n)))),"state",{playing:o.props.playVideo||!1}),s(d(o),"handlePlayerProgress",function(e){if(e.loaded){var t=e.playedSeconds,n=o.props.timeRange.start,r=o.props.timeRange.end<=t;t<=n&&o.player.seekTo(n,"seconds"),r&&o.player.seekTo(n,"seconds"),(o.props.onPlayerProgress||h)(t)}}),s(d(o),"handleOnPause",function(){(o.props.onPlayerPause||h)()}),s(d(o),"handleOnPlay",function(){(o.props.onPlayerPlay||h)()}),o}return c(a,P.Component),l(a,[{key:"componentWillReceiveProps",value:function(e){var t=e.timeRange,n=this.props.timeRange,r=n&&t.start!==n.start||!n&&0<t.start;r&&(console.log({canSeek:r}),this.setState({playing:!1}),this.player.seekTo(t.start,"seconds")),e.playVideo!==this.props.playVideo&&(console.log("Playing Changed"),this.setState({playing:e.playVideo}))}},{key:"displaySeconds",value:function(e){return e.toFixed(2)+"s"}},{key:"render",value:function(){var e,t=this;return P.createElement("div",{className:"rvt-player-cont",onContextMenu:function(){}},P.createElement(J,(s(e={onPlay:this.handleOnPause},"onPlay",this.handleOnPlay),s(e,"onProgress",this.handlePlayerProgress),s(e,"url",this.props.src),s(e,"ref",function(e){return t.player=e}),s(e,"playing",this.state.playing),s(e,"style",{margin:"0 auto"}),e)),P.createElement("div",{className:"rvt-player-time-range-cont"},P.createElement("span",{className:"rvt-player-time-range"},"From:"," ",P.createElement("strong",null,this.displaySeconds(this.props.timeRange.start))),P.createElement("span",{className:"rvt-player-time-range"},"To: ",P.createElement("strong",null,this.displaySeconds(this.props.timeRange.end)))))}}]),a}()),ee=function(){function a(){var e,t;i(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return s(d(t=y(this,(e=p(a)).call.apply(e,[this].concat(r)))),"_screenX",null),s(d(t),"_screenY",null),s(d(t),"_ox",null),s(d(t),"_oy",null),s(d(t),"handleMouseDown",function(e){t._screenX=e.screenX,t._screenY=e.screenY,t._ox=t.props.x,t._oy=t.props.y,window.addEventListener("mousemove",t.handleMouseMove,!1),window.addEventListener("mouseup",t.handleMouseUp,!1)}),s(d(t),"handleMouseMove",function(e){t.props.onDrag({x:e.screenX-t._screenX+t._ox,y:e.screenY-t._screenY+t._oy})}),s(d(t),"handleMouseUp",function(){window.removeEventListener("mousemove",t.handleMouseMove),window.removeEventListener("mouseup",t.handleMouseUp),(t.props.onDragStop||function(){})()}),t}return c(a,o.PureComponent),l(a,[{key:"render",value:function(){return P.createElement("div",{className:"rvt-dragger "+this.props.className||"",onMouseDown:this.handleMouseDown,style:{left:this.props.x+"px",top:this.props.y+"px"}},this.props.children)}}]),a}();s(ee,"defaultProps",{onDrag:function(){},x:0,y:0}),s(ee,"propTypes",{x:f.number,y:f.number,onDrag:f.func,className:f.string,children:f.element});function te(e){return P.createElement("div",{className:"rvt-trimmer",style:{width:e.width,left:e.left,right:e.right}})}function ne(e){var t=function(e){return[Math.floor(e/60),Math.floor(e%60),Math.round(e%1*100)]}(e.time);return P.createElement("div",{className:"rvt-player-cursor-current"},P.createElement("span",{className:"rvt-player-num"},t[0]),"'",P.createElement("span",{className:"rvt-player-num"},t[1]),".",P.createElement("span",{className:"rvt-player-num"},function(e,t){return("000000"+e).slice(-t)}(t[2],2)))}var re=function(){function a(){var e,n;i(this,a);for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return s(d(n=y(this,(e=p(a)).call.apply(e,[this].concat(r)))),"pos2Time",function(e){return e/n.props.widthDurationRatio}),s(d(n),"time2pos",function(e){return e*n.props.widthDurationRatio}),s(d(n),"keepInRange",function(e){var t=n.props.containerWidth;return e<0?0:t<e?t:e}),s(d(n),"handleDragStart",function(e){var t=n.pos2Time(n.keepInRange(e.x));n.props.onStartTimeChange(t)}),s(d(n),"handleDragEnd",function(e){var t=n.pos2Time(n.keepInRange(e.x));n.props.onEndTimeChange(t)}),s(d(n),"handleDragStop",function(){(n.props.onGetData||h)({start:n.props.startTime,end:n.props.endTime})}),s(d(n),"getTrimmerWidth",function(e){return n.props.containerWidth-e}),n}return c(a,o.PureComponent),l(a,[{key:"render",value:function(){var e=this.time2pos(this.props.startTime),t=this.time2pos(this.props.endTime);return P.createElement(P.Fragment,null,P.createElement(te,{left:0,width:e}),P.createElement(ee,{x:e,onDrag:this.handleDragStart,onDragStop:this.handleDragStop},P.createElement(ne,{time:this.props.startTime})),P.createElement(ee,{x:t,onDrag:this.handleDragEnd,onDragStop:this.handleDragStop},P.createElement(ne,{time:this.props.endTime})),P.createElement(te,{right:0,width:this.getTrimmerWidth(t)}))}}]),a}(),oe=function(){function a(){var e,t;i(this,a);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return s(d(t=y(this,(e=p(a)).call.apply(e,[this].concat(r)))),"state",{start:0,end:0}),s(d(t),"handleStartTimeChange",function(e){t.setState({start:e})}),s(d(t),"handleGetTrimData",function(){var e=t.props.onTrim||h;setTimeout(function(){return e({start:t.state.start||t.props.timeRange.start,end:t.state.end||t.props.timeRange.end})},200)}),s(d(t),"handleEndTimeChange",function(e){t.setState({end:e})}),t}return c(a,o.PureComponent),l(a,[{key:"render",value:function(){var t=this;return P.createElement("div",{className:"rvt-trimmer-cont",ref:function(e){return t.containerRef=e}},this.props.showTrimmer&&P.createElement(re,{onStartTimeChange:this.handleStartTimeChange,onEndTimeChange:this.handleEndTimeChange,widthDurationRatio:this.widthDurationRatio,containerWidth:this.containerWidth,startTime:this.state.start||this.props.timeRange.start,endTime:this.state.end||this.props.timeRange.end,onGetData:this.handleGetTrimData}))}},{key:"widthDurationRatio",get:function(){return this.containerWidth/this.props.duration}},{key:"containerWidth",get:function(){return this.containerRef.getBoundingClientRect().width}}]),a}();function ae(){}function ie(){ie.init.call(this)}function le(e){return void 0===e._maxListeners?ie.defaultMaxListeners:e._maxListeners}function ue(e,t,n,r){var o,a,i;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((a=e._events)?(a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),i=a[t]):(a=e._events=new ae,e._eventsCount=0),i){if("function"==typeof i?i=a[t]=r?[n,i]:[i,n]:r?i.unshift(n):i.push(n),!i.warned&&(o=le(e))&&0<o&&i.length>o){i.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=i.length,function(e){"function"==typeof console.warn?console.warn(e):console.log(e)}(l)}}else i=a[t]=n,++e._eventsCount;return e}function se(e,t,n){var r=!1;function o(){e.removeListener(t,o),r||(r=!0,n.apply(e,arguments))}return o.listener=n,o}function ce(e){var t=this._events;if(t){var n=t[e];if("function"==typeof n)return 1;if(n)return n.length}return 0}function pe(e,t){for(var n=new Array(t);t--;)n[t]=e[t];return n}ae.prototype=Object.create(null),(ie.EventEmitter=ie).usingDomains=!1,ie.prototype.domain=void 0,ie.prototype._events=void 0,ie.prototype._maxListeners=void 0,ie.defaultMaxListeners=10,ie.init=function(){this.domain=null,ie.usingDomains&&(void 0).active&&(void 0).Domain,this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new ae,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},ie.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},ie.prototype.getMaxListeners=function(){return le(this)},ie.prototype.emit=function(e,t,n,r){var o,a,i,l,u,s,c,p="error"===e;if(s=this._events)p=p&&null==s.error;else if(!p)return!1;if(c=this.domain,p){if(o=t,c)return(o=o||new Error('Uncaught, unspecified "error" event')).domainEmitter=this,o.domain=c,o.domainThrown=!1,c.emit("error",o),!1;if(o instanceof Error)throw o;var f=new Error('Uncaught, unspecified "error" event. ('+o+")");throw f.context=o,f}if(!(a=s[e]))return!1;var d="function"==typeof a;switch(i=arguments.length){case 1:!function(e,t,n){if(t)e.call(n);else for(var r=e.length,o=pe(e,r),a=0;a<r;++a)o[a].call(n)}(a,d,this);break;case 2:!function(e,t,n,r){if(t)e.call(n,r);else for(var o=e.length,a=pe(e,o),i=0;i<o;++i)a[i].call(n,r)}(a,d,this,t);break;case 3:!function(e,t,n,r,o){if(t)e.call(n,r,o);else for(var a=e.length,i=pe(e,a),l=0;l<a;++l)i[l].call(n,r,o)}(a,d,this,t,n);break;case 4:!function(e,t,n,r,o,a){if(t)e.call(n,r,o,a);else for(var i=e.length,l=pe(e,i),u=0;u<i;++u)l[u].call(n,r,o,a)}(a,d,this,t,n,r);break;default:for(l=new Array(i-1),u=1;u<i;u++)l[u-1]=arguments[u];!function(e,t,n,r){if(t)e.apply(n,r);else for(var o=e.length,a=pe(e,o),i=0;i<o;++i)a[i].apply(n,r)}(a,d,this,l)}return!0},ie.prototype.on=ie.prototype.addListener=function(e,t){return ue(this,e,t,!1)},ie.prototype.prependListener=function(e,t){return ue(this,e,t,!0)},ie.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,se(this,e,t)),this},ie.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,se(this,e,t)),this},ie.prototype.removeListener=function(e,t){var n,r,o,a,i;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[e]))return this;if(n===t||n.listener&&n.listener===t)0==--this._eventsCount?this._events=new ae:(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,a=n.length;0<a--;)if(n[a]===t||n[a].listener&&n[a].listener===t){i=n[a].listener,o=a;break}if(o<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new ae,this;delete r[e]}else!function(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}(n,o);r.removeListener&&this.emit("removeListener",e,i||t)}return this},ie.prototype.removeAllListeners=function(e){var t,n;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=new ae,this._eventsCount=0):n[e]&&(0==--this._eventsCount?this._events=new ae:delete n[e]),this;if(0===arguments.length){for(var r,o=Object.keys(n),a=0;a<o.length;++a)"removeListener"!==(r=o[a])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new ae,this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(t)for(;this.removeListener(e,t[t.length-1]),t[0];);return this},ie.prototype.listeners=function(e){var t,n=this._events;return n&&(t=n[e])?"function"==typeof t?[t.listener||t]:function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(t):[]},ie.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):ce.call(e,t)},ie.prototype.listenerCount=ce,ie.prototype.eventNames=function(){return 0<this._eventsCount?Reflect.ownKeys(this._events):[]};function fe(){importScripts("https://archive.org/download/ffmpeg_asm/ffmpeg_asm.js");var i=Date.now;function l(e){postMessage({type:"stdout",data:e})}onmessage=function(e){var t=e.data;if("command"===t.type){var n={print:l,printErr:l,files:t.files||[],arguments:t.arguments||[],TOTAL_MEMORY:t.TOTAL_MEMORY||!1};postMessage({type:"start",data:n.arguments.join(" ")}),postMessage({type:"stdout",data:"Received command: "+n.arguments.join(" ")+(n.TOTAL_MEMORY?".  Processing with "+n.TOTAL_MEMORY+" bits.":"")});var r=i(),o=ffmpeg_run(n),a=i()-r;postMessage({type:"stdout",data:"Finished processing (took "+a+"ms)"}),postMessage({type:"done",data:o,time:a})}},postMessage({type:"ready"})}var de=t(j(function(e,t){var n;(n=t).default=function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"!=typeof t)throw new Error("File content must export a function");var n=t.toString(),r=new Blob(["("+n+")()"],{type:"application/javascript"});return new Worker(URL.createObjectURL(r))},Object.defineProperty(n,"__esModule",{value:!0})}));function ye(e){return(ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function he(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ve(e){return(ve=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function me(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ge(e,t){return(ge=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function be(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var we=new(function(){function e(){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),be(me(o=function(e,t){return!t||"object"!==ye(t)&&"function"!=typeof t?me(e):t}(this,ve(e).call(this))),"_worker",{}),be(me(o),"_inputFile",{}),be(me(o),"workerIsReady",!1),be(me(o),"readFileAsBufferArray",function(r){return new Promise(function(e,t){var n=new FileReader;n.onload=function(){e(this.result)},n.onerror=function(){t(this.error)},n.readAsArrayBuffer(r)})}),be(me(o),"runCommand",function(r){if("string"!=typeof r||!r.length)throw new Error("command should be string and not empty");o.convertInputFileToArrayBuffer().then(function(e){for(;!o.workerIsReady;);var t="video.webm",n="-i ".concat(t," ").concat(r);o.worker.postMessage({type:"command",arguments:n.split(" "),files:[{data:new Uint8Array(e),name:t}]})})}),be(me(o),"log",function(e){return Array.isArray(e)?console.log.call(null,e):console.log(e)}),be(me(o),"isVideo",function(e){var t=e.type;return e instanceof Blob&&(t.includes("video")||t.includes("audio"))}),o.initWebWorker(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ge(e,t)}(e,ie),function(e,t,n){t&&he(e.prototype,t),n&&he(e,n)}(e,[{key:"initWebWorker",value:function(){var n=this;this.worker=new de(fe),this.worker.onmessage=function(e){var t=e.data;"ready"==t.type?(n.emit("onReady","ffmpeg-asm.js file has been loaded."),n.workerIsReady=!0):"stdout"==t.type?n.emit("onStdout",t.data):"start"==t.type?(n.emit("onFileReceived","File Received"),log("file received ffmpeg command.")):"done"==t.type&&n.emit("onDone",t.data)}}},{key:"inputFileExists",value:function(){var e=this.inputFile;return!!(e&&e instanceof Blob&&e.size&&e.type)}},{key:"convertInputFileToArrayBuffer",value:function(){if(!this.inputFileExists())throw new Error("Input File has not been set");return this.readFileAsBufferArray(this.inputFile)}},{key:"worker",set:function(e){this._worker=e},get:function(){return this._worker}},{key:"inputFile",set:function(e){if(!this.isVideo(e))throw new Error("Input file is expected to be an audio or a video");this._inputFile=e},get:function(){return this._inputFile}}]),e}()),Pe=function n(r,e,t){return void 0===e?function(e,t){return n(r,e,t)}:(void 0===t&&(t="0"),0<(r-=e.toString().length)?new Array(r+(/\./.test(e)?2:1)).join(t)+e:e+"")},ke=36e5,Ee=6e4,_e=1e3,Oe="Time format error";function Se(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");var r=Math.abs(e);return function(e,t){var n,r,o;switch(t.toLowerCase()){case"hh:mm:ss.sss":o=r=n=!0;break;case"hh:mm:ss":n=!!e.miliseconds,o=r=!0;break;case"hh:mm":n=!!e.miliseconds,r=n||!!e.seconds,o=!0;break;case"mm:ss":n=!!e.miliseconds,r=!0,o=!!e.hours;break;case"mm:ss.sss":r=n=!0,o=!!e.hours;break;default:throw new Error(Oe)}var a=Pe(2,e.hours),i=Pe(2,e.minutes),l=Pe(2,e.seconds),u=Pe(3,e.miliseconds);return(e.negative?"-":"")+(o?n?"".concat(a,":").concat(i,":").concat(l,".").concat(u):r?"".concat(a,":").concat(i,":").concat(l):"".concat(a,":").concat(i):n?"".concat(i,":").concat(l,".").concat(u):"".concat(i,":").concat(l))}({negative:e<0,hours:Math.floor(r/ke),minutes:Math.floor(r%ke/Ee),seconds:Math.floor(r%Ee/_e),miliseconds:Math.floor(r%_e)},n)}var Te=function(){function t(e){var v;return i(this,t),s(d(v=y(this,p(t).call(this))),"trimVideo",function(){var e=1<arguments.length?arguments[1]:void 0,t=function(e,t){var n=1<arguments.length&&void 0!==t?t:"mm:ss";if("number"!=typeof e||Number.isNaN(e))throw new Error("NaN error");return Se(e*_e,n)}(0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,"hh:mm:ss");we.runCommand("-ss ".concat(t," -c copy -t ").concat(e," sliced-output.mp4"))}),s(d(v),"_videoData",{}),s(d(v),"_videoFile",null),s(d(v),"_videoBuffer",{}),s(d(v),"readAsArrayBuffer",m(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t=v._videoFile,a(t,"ArrayBuffer");case 2:return v._videoBuffer=e.sent,e.abrupt("return",v.videoBuffer);case 4:case"end":return e.stop()}var t},e)}))),s(d(v),"convertBufferToBlob",function(e){var t=null;return(e=e||v.videoBuffer).byteLength&&(t=g(e)),t}),s(d(v),"readAsDataURL",function(){var n=m(regeneratorRuntime.mark(function e(t,n){var r;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=t||v.videoBuffer,n=n||v.convertBufferToBlob(t),r=null,n)return e.next=6,a(n,"DataURL");e.next=7;break;case 6:r=e.sent;case 7:return e.abrupt("return",r);case 8:case"end":return e.stop()}},e)}));return function(e,t){return n.apply(this,arguments)}}()),s(d(v),"decode",function(){var t=m(regeneratorRuntime.mark(function e(t){var n,r,o,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return v.videoFile=t,v.emit("processingFile"),e.next=4,v.readAsArrayBuffer();case 4:return n=e.sent,e.next=7,v.readAsDataURL(n);case 7:r=e.sent,o=URL.createObjectURL(v.videoFile),(a=document.createElement("video")).src=o;case 11:if((a.duration===1/0||isNaN(a.duration))&&a.readyState<2)return e.next=14,new Promise(function(e){return setTimeout(e,1e3)});e.next=17;break;case 14:a.currentTime=1e7*Math.random(),e.next=11;break;case 17:return v._videoData=a,v.emit("processedFile"),e.abrupt("return",{dataURL:r,arrayBuffer:n,blob:v.convertBufferToBlob()});case 20:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}()),s(d(v),"generateBufferChunks",function(){var l=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[];return new Promise(function(e,t){try{var n=[];l=l.byteLength?l:v.videoBuffer;for(var r=new Uint8Array(l),o=0,a=6e4;a<r.byteLength;a+=6e4){var i=l.slice(o,a);n.push(i),o=a}e(n)}catch(e){t(e)}})}),s(d(v),"extractFramesFromVideo",function(){var h=0<arguments.length&&void 0!==arguments[0]?arguments[0]:25;return new Promise(function(){var n=m(regeneratorRuntime.mark(function e(t,n){var r,o,a,i,l,u,s,c,p,f,d,y;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,v.emit("extractingFrames"),(r=v._videoData).addEventListener("seeked",m(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:o&&o();case 1:case"end":return e.stop()}},e)}))),a=r.duration,i=document.createElement("canvas"),l=i.getContext("2d"),u=[r.videoWidth,r.videoHeight],s=u[0],c=u[1],i.width=s,i.height=c,p=[],f=125/h,d=0;case 13:if(d<a)return r.currentTime=d,e.next=17,new Promise(function(e){return o=e});e.next=23;break;case 17:l.drawImage(r,0,0,s,c),y=i.toDataURL(),p.push(y),d+=f,e.next=13;break;case 23:v.emit("extractedFrames"),t(p),e.next=30;break;case 27:e.prev=27,e.t0=e.catch(0),n(e.t0);case 30:case"end":return e.stop()}},e,null,[[0,27]])}));return function(e,t){return n.apply(this,arguments)}}())}),v.videoFile=e,we.on("onReady",function(){return v.emit("FFMPEGReady")}),we.on("onStdout",function(e){return v.emit("FFMPEGStdout",e)}),we.on("onFileReceived",function(){return v.emit("FFMPEGFileReceived")}),we.on("onDone",function(e){return v.emit("FFMPEGDone",e)}),v}return c(t,ie),l(t,[{key:"videoFile",set:function(e){e&&e.type&&(we.inputFile=e),this._videoFile=e},get:function(){return this._videoFile}},{key:"duration",get:function(){return this._videoData.duration||0}},{key:"videoData",get:function(){return this._videoData}},{key:"videoBuffer",get:function(){return this._videoBuffer}}]),t}(),je=function(){function n(e){var l,t=this;return i(this,n),s(d(l=y(this,p(n).call(this,e))),"webVideo",new Te({})),s(d(l),"handleFFMPEGStdout",function(e){}),s(d(l),"handleFFMPEGReady",function(){}),s(d(l),"handleFFMPEGFileReceived",function(){}),s(d(l),"handleFFMPEGDone",function(e){var t=g(e[0].data);l.decodeVideoFile(t,function(){(l.onVideoEncode||h)(e),l.setState({encoding:!1,encoded:!0,encodedVideo:t})})}),s(d(l),"state",{decoding:!1,encoding:!1,encoded:!1,playVideo:!1,videoDataURL:"",videoFrames:[],isDecoding:!1,timeRange:{start:0,end:0},encodedVideo:null}),s(d(l),"updateVideoDataURL",function(e){return l.setState({videoDataURL:e})}),s(d(l),"updateVideoFrames",function(e){return l.setState({videoFrames:e})}),s(d(l),"updateIsExtractingFrame",function(e){return l.setState({updateIsExtractingFrame:e})}),s(d(l),"updateIsDecoding",function(e){return l.setState({updateIsDecoding:e})}),s(d(l),"updateVideoDuration",function(e){return l.setState({updateVideoDuration:e})}),s(d(l),"decodeVideoFile",function(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h;l.setState({decoding:!0});var t=l.webVideo;t.videoFile=e,t.decode(e).then(function(e){e.blob,e.arrayBuffer;var t=e.dataURL;l.setState({decoding:!1}),l.updateVideoDataURL(t),l.setState({timeRange:{start:0,end:l.webVideo.videoData.duration}}),n()})}),s(d(l),"handleFileSelected",function(e){l.decodeVideoFile(e)}),s(d(l),"handleVideoTrim",function(e){l.setState({timeRange:e})}),s(d(l),"handleEncodeVideo",function(){var e=l.state.timeRange;l.setState({encoding:!0,videoDataURL:""});var t=e.end-e.start;l.webVideo.trimVideo(e.start,t)}),s(d(l),"handlePlayPauseVideo",function(){var e=l.state.playVideo;l.setState({playVideo:!e})}),s(d(l),"handlePlayerPause",function(){l.setState({playVideo:!1})}),s(d(l),"handlePlayerPlay",function(){l.setState({playVideo:!0})}),s(d(l),"handleReselectFile",function(){var e={decoding:!1,encoding:!1,encoded:!1,encodedVideo:null,playVideo:!1,videoDataURL:"",videoFrames:[],isExtractingFrame:!1,isDecoding:!1,timeRange:l.props.timeRange||{start:0,end:0}};l.setState(e)}),s(d(l),"VideoPlayerWithTrimmer",function(e){var t=e.showTrimmer,n=l.state,r=n.decoding,o=n.encoding,a=n.encoded,i=n.videoDataURL;return P.createElement(P.Fragment,null,!r&&!o&&i&&P.createElement(Q,{src:l.state.videoDataURL,timeRange:l.state.timeRange,playVideo:l.state.playVideo,onPlayerPlay:l.handlePlayerPlay,onPlayerPause:l.handlePlayerPause}),t&&P.createElement(oe,{showTrimmer:l.state.videoDataURL,duration:l.webVideo.videoData.duration,onTrim:l.handleVideoTrim,timeRange:l.state.timeRange}),!r&&!o&&i&&P.createElement(X,{onDownload:l.handleDownloadVideo,canDownload:a,showEncodeBtn:l.props.showEncodeBtn,onReselectFile:l.handleReselectFile,onEncode:l.handleEncodeVideo,onPlayPauseClick:l.handlePlayPauseVideo,processing:o,playing:l.state.playVideo}))}),s(d(l),"handleDownloadVideo",function(){!function(e,t){var n=document.createElement("a");n.href=e,n.download=t,n.click()}(function(e){return URL.createObjectURL(e)}(l.state.encodedVideo),"trimmed.mp4")}),s(d(l),"VideoPlayerNoTrimmer",function(){return P.createElement(t.VideoPlayerWithTrimmer,null)}),l.webVideo.on("processingFile",function(){return l.updateIsDecoding(!0)}),l.webVideo.on("processedFile",function(){return l.updateIsDecoding(!1)}),l.webVideo.on("FFMPEGStdout",l.handleFFMPEGStdout),l.webVideo.on("FFMPEGReady",l.handleFFMPEGReady),l.webVideo.on("FFMPEGFileReceived",l.handleFFMPEGFileReceived),l.webVideo.on("FFMPEGDone",l.handleFFMPEGDone),l}return c(n,P.PureComponent),l(n,[{key:"render",value:function(){var e=this.state,t=e.decoding,n=e.encoding,r=e.encoded,o=e.videoDataURL;return P.createElement("div",{className:"rvt-main-container"},r?P.createElement(this.VideoPlayerNoTrimmer,null):P.createElement(P.Fragment,null,!t&&!n&&!o&&P.createElement(S,{onFileSelected:this.handleFileSelected}),(t||n)&&P.createElement(T,null,P.createElement(O,{name:"spin",className:"rvt-icon-spin"}),n?"ENCODING VIDEO":"DECODING VIDEO","..."),P.createElement(this.VideoPlayerWithTrimmer,{showTrimmer:!0})))}}]),n}();e.default=je,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWJzL3V0aWxzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvSWNvbi5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0ZpbGVQaWNrZXIuanMiLCIuLi9zcmMvY29tcG9uZW50cy9TdGF0dXMuanMiLCIuLi9ub2RlX21vZHVsZXMvbG9hZC1zY3JpcHQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvdW1kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcHJvcHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL1BsYXllci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3NpbmdsZVBsYXllci5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvWW91VHViZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvU291bmRDbG91ZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvVmltZW8uanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0ZhY2Vib29rLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9TdHJlYW1hYmxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9XaXN0aWEuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL1R3aXRjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL3BsYXllcnMvRGFpbHlNb3Rpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL01peGNsb3VkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9GaWxlUGxheWVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1wbGF5ZXIvbGliL1ByZXZpZXcuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wcmVsb2FkLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvQ29udHJvbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9SZWFjdFBsYXllci5qcyIsIi4uL3NyYy9jb21wb25lbnRzL1BsYXllci5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0RyYWdnZXIuanMiLCIuLi9zcmMvY29tcG9uZW50cy9UcmltbWVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L2V2ZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9mZm1wZWctd2Vid29ya2VyL2Rpc3QvZXMvRkZNUEVHV2ViV29ya2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3dlYndvcmtlci1maWxlL2Rpc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZmZtcGVnLXdlYndvcmtlci9kaXN0L2VzL0ZGTVBFR1dlYldvcmtlckNsaWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9mZm1wZWctd2Vid29ya2VyL2Rpc3QvZXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvemVyby1maWxsL2luZGV4LmpzIiwiLi4vc3JjL2xpYnMvZm9ybWF0U2Vjb25kcy5qcyIsIi4uL3NyYy9saWJzL1dlYlZpZGVvLmpzIiwiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogZGV0ZWN0IGlmIGEgZmlsZSBpcyBhbiB2aWRlby5cbiAqIEBwYXJhbSB7RmlsZX0gZmlsZVxuICovXG5leHBvcnQgY29uc3QgaXNWaWRlbyA9IGZpbGUgPT4gZmlsZS50eXBlLmluZGV4T2YoXCJ2aWRlb1wiKSA+IC0xO1xuXG4vKipcbiAqIGNyZWF0ZSByYW5nZSBbbWluIC4uIG1heF1cbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmdlID0gKG1pbiwgbWF4KSA9PlxuICBBcnJheS5hcHBseShudWxsLCB7IGxlbmd0aDogbWF4IC0gbWluICsgMSB9KS5tYXAoKHYsIGkpID0+IGkgKyBtaW4pO1xuXG4vKipcbiAqIEZpbGVSZWFkZXIgdmlhIHByb21pc2VcbiAqIEBwYXJhbSB7RmlsZX0gZmlsZVxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFUeXBlXG4gKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5QnVmZmVyIHwgc3RyaW5nPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWRGaWxlID0gKGZpbGUsIGRhdGFUeXBlID0gXCJBcnJheUJ1ZmZlclwiKSA9PlxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXJbXCJyZWFkQXNcIiArIGRhdGFUeXBlXShmaWxlKTtcbiAgICByZWFkZXIub25sb2FkID0gKCkgPT4gcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcbiAgICByZWFkZXIub25lcnJvciA9IGVyciA9PiByZWplY3QoZXJyKTtcbiAgfSk7XG5cbi8qKlxuICogUmVhZCBGaWxlL0Jsb2IgdG8gQXJyYXlCdWZmZXJcbiAqIEBwYXJhbSB7RmlsZX0gZmlsZVxuICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59XG4gKi9cbmV4cG9ydCBjb25zdCByZWFkQXJyYXlCdWZmZXIgPSBmaWxlID0+IHJlYWRGaWxlKGZpbGUsIFwiQXJyYXlCdWZmZXJcIik7XG5cbi8qKlxuICogUmVhZCBGaWxlL0Jsb2IgdG8gQmFzZTY0XG4gKiBAcGFyYW0ge0ZpbGV9IGZpbGVcbiAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn1cbiAqL1xuZXhwb3J0IGNvbnN0IHJlYWREYXRhVVJMID0gZmlsZSA9PiByZWFkRmlsZShmaWxlLCBcIkRhdGFVUkxcIik7XG5cbmV4cG9ydCBjb25zdCByZWFkQmxvYlVSTCA9IGZpbGUgPT4gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcblxuZXhwb3J0IGNvbnN0IGRvd25sb2FkID0gKHVybCwgbmFtZSkgPT4ge1xuICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gIGxpbmsuaHJlZiA9IHVybDtcbiAgbGluay5kb3dubG9hZCA9IG5hbWU7XG4gIGxpbmsuY2xpY2soKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW5hbWUgPSAoZmlsZW5hbWUsIGV4dCwgc3RhbXApID0+XG4gIGAke2ZpbGVuYW1lLnJlcGxhY2UoL1xcLlxcdyskLywgXCJcIil9JHtzdGFtcCB8fCBcIlwifS4ke2V4dH1gO1xuXG4vKipcbiAqIGZvcm1hdCBzZWNvbmRzIHRvIFttaW51dGVzLCBpbnRlZ2VyLCBkZWNpbWFsKDIpXVxuICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHNcbiAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdFNlY29uZHMgPSBzZWNvbmRzID0+IFtcbiAgTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApLFxuICBNYXRoLmZsb29yKHNlY29uZHMgJSA2MCksXG4gIE1hdGgucm91bmQoKHNlY29uZHMgJSAxKSAqIDEwMClcbl07XG5cbmV4cG9ydCBjb25zdCBsZWZ0WmVybyA9IChudW0sIGNvdW50KSA9PiB7XG4gIHJldHVybiAoXCIwMDAwMDBcIiArIG51bSkuc2xpY2UoLWNvdW50KTtcbn07XG5cbmV4cG9ydCBjb25zdCBub29wID0gKCkgPT4ge307XG5cbmV4cG9ydCBjb25zdCBhcnJheUJ1ZmZlclRvQmxvYiA9IGJ1ZmZlciA9PlxuICBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCAwLCBidWZmZXIuYnl0ZUxlbmd0aCldLCB7XG4gICAgdHlwZTogXCJ2aWRlby93ZWJtXCIsXG4gICAgbmFtZTogXCJ2aWRlby53ZWJtXCJcbiAgfSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgXCIuLi9zdHlsZXMvaWNvbi5zY3NzXCI7XG5cbmNvbnN0IERvd25sb2FkID0gKHsgY2xhc3NOYW1lIH0pID0+IChcbiAgPHN2Z1xuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICA+XG4gICAgPHBhdGggZD1cIk0xOSA5aC00VjNIOXY2SDVsNyA3IDctN3pNNSAxOHYyaDE0di0ySDV6XCIgLz5cbiAgICA8cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIgLz5cbiAgPC9zdmc+XG4pO1xuXG5jb25zdCBNdXNpYyA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXG4gIDxzdmdcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgPlxuICAgIDxwYXRoIGQ9XCJNMCAwaDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIiAvPlxuICAgIDxwYXRoIGQ9XCJNMTUgNkgzdjJoMTJWNnptMCA0SDN2MmgxMnYtMnpNMyAxNmg4di0ySDN2MnpNMTcgNnY4LjE4Yy0uMzEtLjExLS42NS0uMTgtMS0uMTgtMS42NiAwLTMgMS4zNC0zIDNzMS4zNCAzIDMgMyAzLTEuMzQgMy0zVjhoM1Y2aC01elwiIC8+XG4gIDwvc3ZnPlxuKTtcblxuY29uc3QgUGxheSA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXG4gIDxzdmdcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICBoZWlnaHQ9XCIyNFwiXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgd2lkdGg9XCIyNFwiXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gID5cbiAgICA8cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIgLz5cbiAgICA8cGF0aCBkPVwiTTEwIDE2LjVsNi00LjUtNi00LjV2OXpNMTIgMkM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MSAwLTgtMy41OS04LThzMy41OS04IDgtOCA4IDMuNTkgOCA4LTMuNTkgOC04IDh6XCIgLz5cbiAgPC9zdmc+XG4pO1xuXG5jb25zdCBQYXVzZSA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXG4gIDxzdmdcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICBoZWlnaHQ9XCIyNFwiXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgd2lkdGg9XCIyNFwiXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gID5cbiAgICA8cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIgLz5cbiAgICA8cGF0aCBkPVwiTTkgMTZoMlY4SDl2OHptMy0xNEM2LjQ4IDIgMiA2LjQ4IDIgMTJzNC40OCAxMCAxMCAxMCAxMC00LjQ4IDEwLTEwUzE3LjUyIDIgMTIgMnptMCAxOGMtNC40MSAwLTgtMy41OS04LThzMy41OS04IDgtOCA4IDMuNTkgOCA4LTMuNTkgOC04IDh6bTEtNGgyVjhoLTJ2OHpcIiAvPlxuICA8L3N2Zz5cbik7XG5cbmNvbnN0IFJlcGxheSA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXG4gIDxzdmdcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgPlxuICAgIDxwYXRoIGQ9XCJNMCAwaDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIiAvPlxuICAgIDxwYXRoIGQ9XCJNMTIgNVYxTDcgNmw1IDVWN2MzLjMxIDAgNiAyLjY5IDYgNnMtMi42OSA2LTYgNi02LTIuNjktNi02SDRjMCA0LjQyIDMuNTggOCA4IDhzOC0zLjU4IDgtOC0zLjU4LTgtOC04elwiIC8+XG4gIDwvc3ZnPlxuKTtcblxuY29uc3QgU3BpbiA9ICh7IGNsYXNzTmFtZSB9KSA9PiAoXG4gIDxzdmdcbiAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICB2aWV3Qm94PVwiMCAwIDQyIDQyXCJcbiAgPlxuICAgIDxwYXRoIGQ9XCJNMjEgMzdjLTQuMyAwLTguMy0xLjctMTEuMy00LjdTNSAyNS4zIDUgMjFjMC0zIC44LTYgMi41LTguNUM5IDEwIDExLjIgOCAxMy44IDYuN2wxLjMgMi43Yy0yLjEgMS4xLTMuOSAyLjctNS4yIDQuNy0xLjMgMi4xLTIgNC41LTIgNi45IDAgNy4yIDUuOCAxMyAxMyAxM3MxMy01LjggMTMtMTNjMC0yLjUtLjctNC45LTItNi45cy0zLjEtMy42LTUuMi00LjdMMjggNi43YzIuOCAxLjMgNSAzLjMgNi41IDUuOEMzNi4yIDE1IDM3IDE4IDM3IDIxYzAgNC4zLTEuNyA4LjMtNC43IDExLjNTMjUuMyAzNyAyMSAzN3pcIiAvPlxuICA8L3N2Zz5cbik7XG5cbmNvbnN0IEljb24gPSBwcm9wcyA9PiB7XG4gIGxldCBFbCA9IERvd25sb2FkO1xuICBzd2l0Y2ggKHByb3BzLm5hbWUpIHtcbiAgICBjYXNlIFwibXVzaWNcIjpcbiAgICAgIEVsID0gTXVzaWM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicGxheVwiOlxuICAgICAgRWwgPSBQbGF5O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBhdXNlXCI6XG4gICAgICBFbCA9IFBhdXNlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJlcGxheVwiOlxuICAgICAgRWwgPSBSZXBsYXk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3BpblwiOlxuICAgICAgRWwgPSBTcGluO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIEVsID0gRG93bmxvYWQ7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gKFxuICAgIDxFbFxuICAgICAgY2xhc3NOYW1lPXtgcnZ0LWljb24gcmF0LWljb24tJHtwcm9wcy5uYW1lfSAke3Byb3BzLmNsYXNzTmFtZX1gLnRyaW0oKX1cbiAgICAvPlxuICApO1xufTtcblxuSWNvbi5wcm9wVHlwZXMgPSB7XG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEljb247XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgaXNWaWRlbywgbm9vcCB9IGZyb20gXCIuLi9saWJzL3V0aWxzXCI7XG5pbXBvcnQgXCIuLi9zdHlsZXMvZmlsZS1waWNrZXIuc2Nzc1wiO1xuaW1wb3J0IEljb24gZnJvbSBcIi4vSWNvblwiO1xuXG5mdW5jdGlvbiBGaWxlUGlja2VyKHByb3BzKSB7XG4gIGNvbnN0IGlucHV0UmVmID0gdXNlUmVmKCk7XG4gIGNvbnN0IGhhbmRsZUZpbGVDaGFuZ2UgPSB1c2VDYWxsYmFjayhlID0+IHtcbiAgICBpZiAoZS50YXJnZXQuZmlsZXMubGVuZ3RoKSB7XG4gICAgICBjb25zdCB2aWRlbyA9IGUudGFyZ2V0LmZpbGVzWzBdO1xuICAgICAgaWYgKGlzVmlkZW8odmlkZW8pKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBwcm9wcy5vbkZpbGVTZWxlY3RlZCB8fCBub29wO1xuICAgICAgICBoYW5kbGVyKHZpZGVvKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhbGVydChcIlVuc3VwcG9ydGVkIEZpbGUgVHlwZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBoYW5kbGVDb250YWluZXJDbGlja2VkID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlucHV0UmVmLmN1cnJlbnQuY2xpY2soKTtcbiAgfSk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJydnQtZmlsZS1waWNrZXJcIiBvbkNsaWNrPXtoYW5kbGVDb250YWluZXJDbGlja2VkfT5cbiAgICAgIDxJY29uIG5hbWU9XCJtdXNpY1wiIC8+XG4gICAgICBQaWNrIEEgVmlkZW9cbiAgICAgIDxpbnB1dFxuICAgICAgICB0eXBlPVwiZmlsZVwiXG4gICAgICAgIGFjY2VwdD1cInZpZGVvLypcIlxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlRmlsZUNoYW5nZX1cbiAgICAgICAgcmVmPXtpbnB1dFJlZn1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVQaWNrZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCIuLi9zdHlsZXMvc3RhdHVzLnNjc3NcIjtcblxuY29uc3QgU3RhdHVzID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJydnQtc3RhdHVzXCI+e2NoaWxkcmVufTwvZGl2Pjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXR1cztcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBsb2FkIChzcmMsIG9wdHMsIGNiKSB7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdXG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gb3B0c1xuICAgIG9wdHMgPSB7fVxuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge31cbiAgY2IgPSBjYiB8fCBmdW5jdGlvbigpIHt9XG5cbiAgc2NyaXB0LnR5cGUgPSBvcHRzLnR5cGUgfHwgJ3RleHQvamF2YXNjcmlwdCdcbiAgc2NyaXB0LmNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgJ3V0ZjgnO1xuICBzY3JpcHQuYXN5bmMgPSAnYXN5bmMnIGluIG9wdHMgPyAhIW9wdHMuYXN5bmMgOiB0cnVlXG4gIHNjcmlwdC5zcmMgPSBzcmNcblxuICBpZiAob3B0cy5hdHRycykge1xuICAgIHNldEF0dHJpYnV0ZXMoc2NyaXB0LCBvcHRzLmF0dHJzKVxuICB9XG5cbiAgaWYgKG9wdHMudGV4dCkge1xuICAgIHNjcmlwdC50ZXh0ID0gJycgKyBvcHRzLnRleHRcbiAgfVxuXG4gIHZhciBvbmVuZCA9ICdvbmxvYWQnIGluIHNjcmlwdCA/IHN0ZE9uRW5kIDogaWVPbkVuZFxuICBvbmVuZChzY3JpcHQsIGNiKVxuXG4gIC8vIHNvbWUgZ29vZCBsZWdhY3kgYnJvd3NlcnMgKGZpcmVmb3gpIGZhaWwgdGhlICdpbicgZGV0ZWN0aW9uIGFib3ZlXG4gIC8vIHNvIGFzIGEgZmFsbGJhY2sgd2UgYWx3YXlzIHNldCBvbmxvYWRcbiAgLy8gb2xkIElFIHdpbGwgaWdub3JlIHRoaXMgYW5kIG5ldyBJRSB3aWxsIHNldCBvbmxvYWRcbiAgaWYgKCFzY3JpcHQub25sb2FkKSB7XG4gICAgc3RkT25FbmQoc2NyaXB0LCBjYik7XG4gIH1cblxuICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcbn1cblxuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhzY3JpcHQsIGF0dHJzKSB7XG4gIGZvciAodmFyIGF0dHIgaW4gYXR0cnMpIHtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGRPbkVuZCAoc2NyaXB0LCBjYikge1xuICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub25lcnJvciA9IHRoaXMub25sb2FkID0gbnVsbFxuICAgIGNiKG51bGwsIHNjcmlwdClcbiAgfVxuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyB0aGlzLm9ubG9hZCA9IG51bGwgaGVyZSBpcyBuZWNlc3NhcnlcbiAgICAvLyBiZWNhdXNlIGV2ZW4gSUU5IHdvcmtzIG5vdCBsaWtlIG90aGVyc1xuICAgIHRoaXMub25lcnJvciA9IHRoaXMub25sb2FkID0gbnVsbFxuICAgIGNiKG5ldyBFcnJvcignRmFpbGVkIHRvIGxvYWQgJyArIHRoaXMuc3JjKSwgc2NyaXB0KVxuICB9XG59XG5cbmZ1bmN0aW9uIGllT25FbmQgKHNjcmlwdCwgY2IpIHtcbiAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5yZWFkeVN0YXRlICE9ICdjb21wbGV0ZScgJiYgdGhpcy5yZWFkeVN0YXRlICE9ICdsb2FkZWQnKSByZXR1cm5cbiAgICB0aGlzLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGxcbiAgICBjYihudWxsLCBzY3JpcHQpIC8vIHRoZXJlIGlzIG5vIHdheSB0byBjYXRjaCBsb2FkaW5nIGVycm9ycyBpbiBJRThcbiAgfVxufVxuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5kZWVwbWVyZ2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRcdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxuXHR9O1xuXG5cdGZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRcdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcblx0fVxuXG5cdGZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHRcdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0XHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcblx0fVxuXG5cdC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxuXHR2YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuXHR2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5cdGZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcblx0fVxuXG5cdGZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRcdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG5cdH1cblxuXHRmdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRcdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdFx0OiB2YWx1ZVxuXHR9XG5cblx0ZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0XHR9KVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0XHRpZiAoIW9wdGlvbnMuY3VzdG9tTWVyZ2UpIHtcblx0XHRcdHJldHVybiBkZWVwbWVyZ2Vcblx0XHR9XG5cdFx0dmFyIGN1c3RvbU1lcmdlID0gb3B0aW9ucy5jdXN0b21NZXJnZShrZXkpO1xuXHRcdHJldHVybiB0eXBlb2YgY3VzdG9tTWVyZ2UgPT09ICdmdW5jdGlvbicgPyBjdXN0b21NZXJnZSA6IGRlZXBtZXJnZVxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpIHtcblx0XHRyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuXHRcdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0LnByb3BlcnR5SXNFbnVtZXJhYmxlKHN5bWJvbClcblx0XHRcdH0pXG5cdFx0XHQ6IFtdXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRLZXlzKHRhcmdldCkge1xuXHRcdHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLmNvbmNhdChnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpXG5cdH1cblxuXHRmdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRcdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRcdGdldEtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGdldEtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0aWYgKCFvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcblx0XHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gZGVzdGluYXRpb25cblx0fVxuXG5cdGZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0XHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblxuXHRcdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHRcdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHRcdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRcdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0XHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0XHR9XG5cdH1cblxuXHRkZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHRcdH1cblxuXHRcdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHRcdH0sIHt9KVxuXHR9O1xuXG5cdHZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxuXHRyZXR1cm4gZGVlcG1lcmdlXzE7XG5cbn0pKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuREVQUkVDQVRFRF9DT05GSUdfUFJPUFMgPSBleHBvcnRzLmRlZmF1bHRQcm9wcyA9IGV4cG9ydHMucHJvcFR5cGVzID0gdW5kZWZpbmVkO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgc3RyaW5nID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gICAgYm9vbCA9IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgICBudW1iZXIgPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm51bWJlcixcbiAgICBhcnJheSA9IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYXJyYXksXG4gICAgb25lT2ZUeXBlID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZlR5cGUsXG4gICAgc2hhcGUgPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnNoYXBlLFxuICAgIG9iamVjdCA9IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub2JqZWN0LFxuICAgIGZ1bmMgPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmM7XG52YXIgcHJvcFR5cGVzID0gZXhwb3J0cy5wcm9wVHlwZXMgPSB7XG4gIHVybDogb25lT2ZUeXBlKFtzdHJpbmcsIGFycmF5LCBvYmplY3RdKSxcbiAgcGxheWluZzogYm9vbCxcbiAgbG9vcDogYm9vbCxcbiAgY29udHJvbHM6IGJvb2wsXG4gIHZvbHVtZTogbnVtYmVyLFxuICBtdXRlZDogYm9vbCxcbiAgcGxheWJhY2tSYXRlOiBudW1iZXIsXG4gIHdpZHRoOiBvbmVPZlR5cGUoW3N0cmluZywgbnVtYmVyXSksXG4gIGhlaWdodDogb25lT2ZUeXBlKFtzdHJpbmcsIG51bWJlcl0pLFxuICBzdHlsZTogb2JqZWN0LFxuICBwcm9ncmVzc0ludGVydmFsOiBudW1iZXIsXG4gIHBsYXlzaW5saW5lOiBib29sLFxuICBwaXA6IGJvb2wsXG4gIGxpZ2h0OiBvbmVPZlR5cGUoW2Jvb2wsIHN0cmluZ10pLFxuICB3cmFwcGVyOiBvbmVPZlR5cGUoW3N0cmluZywgZnVuYywgc2hhcGUoeyByZW5kZXI6IGZ1bmMuaXNSZXF1aXJlZCB9KV0pLFxuICBjb25maWc6IHNoYXBlKHtcbiAgICBzb3VuZGNsb3VkOiBzaGFwZSh7XG4gICAgICBvcHRpb25zOiBvYmplY3QsXG4gICAgICBwcmVsb2FkOiBib29sXG4gICAgfSksXG4gICAgeW91dHViZTogc2hhcGUoe1xuICAgICAgcGxheWVyVmFyczogb2JqZWN0LFxuICAgICAgZW1iZWRPcHRpb25zOiBvYmplY3QsXG4gICAgICBwcmVsb2FkOiBib29sXG4gICAgfSksXG4gICAgZmFjZWJvb2s6IHNoYXBlKHtcbiAgICAgIGFwcElkOiBzdHJpbmdcbiAgICB9KSxcbiAgICBkYWlseW1vdGlvbjogc2hhcGUoe1xuICAgICAgcGFyYW1zOiBvYmplY3QsXG4gICAgICBwcmVsb2FkOiBib29sXG4gICAgfSksXG4gICAgdmltZW86IHNoYXBlKHtcbiAgICAgIHBsYXllck9wdGlvbnM6IG9iamVjdCxcbiAgICAgIHByZWxvYWQ6IGJvb2xcbiAgICB9KSxcbiAgICBmaWxlOiBzaGFwZSh7XG4gICAgICBhdHRyaWJ1dGVzOiBvYmplY3QsXG4gICAgICB0cmFja3M6IGFycmF5LFxuICAgICAgZm9yY2VWaWRlbzogYm9vbCxcbiAgICAgIGZvcmNlQXVkaW86IGJvb2wsXG4gICAgICBmb3JjZUhMUzogYm9vbCxcbiAgICAgIGZvcmNlREFTSDogYm9vbCxcbiAgICAgIGhsc09wdGlvbnM6IG9iamVjdCxcbiAgICAgIGhsc1ZlcnNpb246IHN0cmluZyxcbiAgICAgIGRhc2hWZXJzaW9uOiBzdHJpbmdcbiAgICB9KSxcbiAgICB3aXN0aWE6IHNoYXBlKHtcbiAgICAgIG9wdGlvbnM6IG9iamVjdFxuICAgIH0pLFxuICAgIG1peGNsb3VkOiBzaGFwZSh7XG4gICAgICBvcHRpb25zOiBvYmplY3RcbiAgICB9KSxcbiAgICB0d2l0Y2g6IHNoYXBlKHtcbiAgICAgIG9wdGlvbnM6IG9iamVjdFxuICAgIH0pXG4gIH0pLFxuICBvblJlYWR5OiBmdW5jLFxuICBvblN0YXJ0OiBmdW5jLFxuICBvblBsYXk6IGZ1bmMsXG4gIG9uUGF1c2U6IGZ1bmMsXG4gIG9uQnVmZmVyOiBmdW5jLFxuICBvbkJ1ZmZlckVuZDogZnVuYyxcbiAgb25FbmRlZDogZnVuYyxcbiAgb25FcnJvcjogZnVuYyxcbiAgb25EdXJhdGlvbjogZnVuYyxcbiAgb25TZWVrOiBmdW5jLFxuICBvblByb2dyZXNzOiBmdW5jLFxuICBvbkVuYWJsZVBJUDogZnVuYyxcbiAgb25EaXNhYmxlUElQOiBmdW5jXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0gZXhwb3J0cy5kZWZhdWx0UHJvcHMgPSB7XG4gIHBsYXlpbmc6IGZhbHNlLFxuICBsb29wOiBmYWxzZSxcbiAgY29udHJvbHM6IGZhbHNlLFxuICB2b2x1bWU6IG51bGwsXG4gIG11dGVkOiBmYWxzZSxcbiAgcGxheWJhY2tSYXRlOiAxLFxuICB3aWR0aDogJzY0MHB4JyxcbiAgaGVpZ2h0OiAnMzYwcHgnLFxuICBzdHlsZToge30sXG4gIHByb2dyZXNzSW50ZXJ2YWw6IDEwMDAsXG4gIHBsYXlzaW5saW5lOiBmYWxzZSxcbiAgcGlwOiBmYWxzZSxcbiAgbGlnaHQ6IGZhbHNlLFxuICB3cmFwcGVyOiAnZGl2JyxcbiAgY29uZmlnOiB7XG4gICAgc291bmRjbG91ZDoge1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICB2aXN1YWw6IHRydWUsIC8vIFVuZG9jdW1lbnRlZCwgYnV0IG1ha2VzIHBsYXllciBmaWxsIGNvbnRhaW5lciBhbmQgbG9vayBiZXR0ZXJcbiAgICAgICAgYnV5aW5nOiBmYWxzZSxcbiAgICAgICAgbGlraW5nOiBmYWxzZSxcbiAgICAgICAgZG93bmxvYWQ6IGZhbHNlLFxuICAgICAgICBzaGFyaW5nOiBmYWxzZSxcbiAgICAgICAgc2hvd19jb21tZW50czogZmFsc2UsXG4gICAgICAgIHNob3dfcGxheWNvdW50OiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG4gICAgeW91dHViZToge1xuICAgICAgcGxheWVyVmFyczoge1xuICAgICAgICBwbGF5c2lubGluZTogMSxcbiAgICAgICAgc2hvd2luZm86IDAsXG4gICAgICAgIHJlbDogMCxcbiAgICAgICAgaXZfbG9hZF9wb2xpY3k6IDMsXG4gICAgICAgIG1vZGVzdGJyYW5kaW5nOiAxXG4gICAgICB9LFxuICAgICAgZW1iZWRPcHRpb25zOiB7fSxcbiAgICAgIHByZWxvYWQ6IGZhbHNlXG4gICAgfSxcbiAgICBmYWNlYm9vazoge1xuICAgICAgYXBwSWQ6ICcxMzA5Njk3MjA1NzcyODE5J1xuICAgIH0sXG4gICAgZGFpbHltb3Rpb246IHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBhcGk6IDEsXG4gICAgICAgICdlbmRzY3JlZW4tZW5hYmxlJzogZmFsc2VcbiAgICAgIH0sXG4gICAgICBwcmVsb2FkOiBmYWxzZVxuICAgIH0sXG4gICAgdmltZW86IHtcbiAgICAgIHBsYXllck9wdGlvbnM6IHtcbiAgICAgICAgYXV0b3BhdXNlOiBmYWxzZSxcbiAgICAgICAgYnlsaW5lOiBmYWxzZSxcbiAgICAgICAgcG9ydHJhaXQ6IGZhbHNlLFxuICAgICAgICB0aXRsZTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBwcmVsb2FkOiBmYWxzZVxuICAgIH0sXG4gICAgZmlsZToge1xuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICB0cmFja3M6IFtdLFxuICAgICAgZm9yY2VWaWRlbzogZmFsc2UsXG4gICAgICBmb3JjZUF1ZGlvOiBmYWxzZSxcbiAgICAgIGZvcmNlSExTOiBmYWxzZSxcbiAgICAgIGZvcmNlREFTSDogZmFsc2UsXG4gICAgICBobHNPcHRpb25zOiB7fSxcbiAgICAgIGhsc1ZlcnNpb246ICcwLjEwLjEnLFxuICAgICAgZGFzaFZlcnNpb246ICcyLjkuMidcbiAgICB9LFxuICAgIHdpc3RpYToge1xuICAgICAgb3B0aW9uczoge31cbiAgICB9LFxuICAgIG1peGNsb3VkOiB7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGhpZGVfY292ZXI6IDFcbiAgICAgIH1cbiAgICB9LFxuICAgIHR3aXRjaDoge1xuICAgICAgb3B0aW9uczoge31cbiAgICB9XG4gIH0sXG4gIG9uUmVhZHk6IGZ1bmN0aW9uIG9uUmVhZHkoKSB7fSxcbiAgb25TdGFydDogZnVuY3Rpb24gb25TdGFydCgpIHt9LFxuICBvblBsYXk6IGZ1bmN0aW9uIG9uUGxheSgpIHt9LFxuICBvblBhdXNlOiBmdW5jdGlvbiBvblBhdXNlKCkge30sXG4gIG9uQnVmZmVyOiBmdW5jdGlvbiBvbkJ1ZmZlcigpIHt9LFxuICBvbkJ1ZmZlckVuZDogZnVuY3Rpb24gb25CdWZmZXJFbmQoKSB7fSxcbiAgb25FbmRlZDogZnVuY3Rpb24gb25FbmRlZCgpIHt9LFxuICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKCkge30sXG4gIG9uRHVyYXRpb246IGZ1bmN0aW9uIG9uRHVyYXRpb24oKSB7fSxcbiAgb25TZWVrOiBmdW5jdGlvbiBvblNlZWsoKSB7fSxcbiAgb25Qcm9ncmVzczogZnVuY3Rpb24gb25Qcm9ncmVzcygpIHt9LFxuICBvbkVuYWJsZVBJUDogZnVuY3Rpb24gb25FbmFibGVQSVAoKSB7fSxcbiAgb25EaXNhYmxlUElQOiBmdW5jdGlvbiBvbkRpc2FibGVQSVAoKSB7fVxufTtcblxudmFyIERFUFJFQ0FURURfQ09ORklHX1BST1BTID0gZXhwb3J0cy5ERVBSRUNBVEVEX0NPTkZJR19QUk9QUyA9IFsnc291bmRjbG91ZENvbmZpZycsICd5b3V0dWJlQ29uZmlnJywgJ2ZhY2Vib29rQ29uZmlnJywgJ2RhaWx5bW90aW9uQ29uZmlnJywgJ3ZpbWVvQ29uZmlnJywgJ2ZpbGVDb25maWcnLCAnd2lzdGlhQ29uZmlnJ107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZXhwb3J0cy5wYXJzZVN0YXJ0VGltZSA9IHBhcnNlU3RhcnRUaW1lO1xuZXhwb3J0cy5wYXJzZUVuZFRpbWUgPSBwYXJzZUVuZFRpbWU7XG5leHBvcnRzLnJhbmRvbVN0cmluZyA9IHJhbmRvbVN0cmluZztcbmV4cG9ydHMucXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZztcbmV4cG9ydHMuZ2V0U0RLID0gZ2V0U0RLO1xuZXhwb3J0cy5nZXRDb25maWcgPSBnZXRDb25maWc7XG5leHBvcnRzLm9taXQgPSBvbWl0O1xuZXhwb3J0cy5jYWxsUGxheWVyID0gY2FsbFBsYXllcjtcbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcbmV4cG9ydHMuaXNFcXVhbCA9IGlzRXF1YWw7XG5leHBvcnRzLmlzTWVkaWFTdHJlYW0gPSBpc01lZGlhU3RyZWFtO1xuXG52YXIgX2xvYWRTY3JpcHQgPSByZXF1aXJlKCdsb2FkLXNjcmlwdCcpO1xuXG52YXIgX2xvYWRTY3JpcHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9hZFNjcmlwdCk7XG5cbnZhciBfZGVlcG1lcmdlID0gcmVxdWlyZSgnZGVlcG1lcmdlJyk7XG5cbnZhciBfZGVlcG1lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBtZXJnZSk7XG5cbnZhciBfcHJvcHMgPSByZXF1aXJlKCcuL3Byb3BzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIE1BVENIX1NUQVJUX1FVRVJZID0gL1s/JiNdKD86c3RhcnR8dCk9KFswLTlobXNdKykvO1xudmFyIE1BVENIX0VORF9RVUVSWSA9IC9bPyYjXWVuZD0oWzAtOWhtc10rKS87XG52YXIgTUFUQ0hfU1RBUlRfU1RBTVAgPSAvKFxcZCspKGh8bXxzKS9nO1xudmFyIE1BVENIX05VTUVSSUMgPSAvXlxcZCskLztcblxuLy8gUGFyc2UgWW91VHViZSBVUkwgZm9yIGEgc3RhcnQgdGltZSBwYXJhbSwgaWUgP3Q9MWgxNG0zMHNcbi8vIGFuZCByZXR1cm4gdGhlIHN0YXJ0IHRpbWUgaW4gc2Vjb25kc1xuZnVuY3Rpb24gcGFyc2VUaW1lUGFyYW0odXJsLCBwYXR0ZXJuKSB7XG4gIHZhciBtYXRjaCA9IHVybC5tYXRjaChwYXR0ZXJuKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIHN0YW1wID0gbWF0Y2hbMV07XG4gICAgaWYgKHN0YW1wLm1hdGNoKE1BVENIX1NUQVJUX1NUQU1QKSkge1xuICAgICAgcmV0dXJuIHBhcnNlVGltZVN0cmluZyhzdGFtcCk7XG4gICAgfVxuICAgIGlmIChNQVRDSF9OVU1FUklDLnRlc3Qoc3RhbXApKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoc3RhbXApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVTdHJpbmcoc3RhbXApIHtcbiAgdmFyIHNlY29uZHMgPSAwO1xuICB2YXIgYXJyYXkgPSBNQVRDSF9TVEFSVF9TVEFNUC5leGVjKHN0YW1wKTtcbiAgd2hpbGUgKGFycmF5ICE9PSBudWxsKSB7XG4gICAgdmFyIF9hcnJheSA9IGFycmF5LFxuICAgICAgICBfYXJyYXkyID0gX3NsaWNlZFRvQXJyYXkoX2FycmF5LCAzKSxcbiAgICAgICAgY291bnQgPSBfYXJyYXkyWzFdLFxuICAgICAgICBwZXJpb2QgPSBfYXJyYXkyWzJdO1xuXG4gICAgaWYgKHBlcmlvZCA9PT0gJ2gnKSBzZWNvbmRzICs9IHBhcnNlSW50KGNvdW50LCAxMCkgKiA2MCAqIDYwO1xuICAgIGlmIChwZXJpb2QgPT09ICdtJykgc2Vjb25kcyArPSBwYXJzZUludChjb3VudCwgMTApICogNjA7XG4gICAgaWYgKHBlcmlvZCA9PT0gJ3MnKSBzZWNvbmRzICs9IHBhcnNlSW50KGNvdW50LCAxMCk7XG4gICAgYXJyYXkgPSBNQVRDSF9TVEFSVF9TVEFNUC5leGVjKHN0YW1wKTtcbiAgfVxuICByZXR1cm4gc2Vjb25kcztcbn1cblxuZnVuY3Rpb24gcGFyc2VTdGFydFRpbWUodXJsKSB7XG4gIHJldHVybiBwYXJzZVRpbWVQYXJhbSh1cmwsIE1BVENIX1NUQVJUX1FVRVJZKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VFbmRUaW1lKHVybCkge1xuICByZXR1cm4gcGFyc2VUaW1lUGFyYW0odXJsLCBNQVRDSF9FTkRfUVVFUlkpO1xufVxuXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zODYyMjU0NVxuZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDUpO1xufVxuXG5mdW5jdGlvbiBxdWVyeVN0cmluZyhvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4ga2V5ICsgJz0nICsgb2JqZWN0W2tleV07XG4gIH0pLmpvaW4oJyYnKTtcbn1cblxuLy8gVXRpbCBmdW5jdGlvbiB0byBsb2FkIGFuIGV4dGVybmFsIFNES1xuLy8gb3IgcmV0dXJuIHRoZSBTREsgaWYgaXQgaXMgYWxyZWFkeSBsb2FkZWRcbnZhciByZXNvbHZlcyA9IHt9O1xuZnVuY3Rpb24gZ2V0U0RLKHVybCwgc2RrR2xvYmFsKSB7XG4gIHZhciBzZGtSZWFkeSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgdmFyIGlzTG9hZGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIHZhciBmZXRjaFNjcmlwdCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogX2xvYWRTY3JpcHQyWydkZWZhdWx0J107XG5cbiAgaWYgKHdpbmRvd1tzZGtHbG9iYWxdICYmIGlzTG9hZGVkKHdpbmRvd1tzZGtHbG9iYWxdKSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2luZG93W3Nka0dsb2JhbF0pO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgLy8gSWYgd2UgYXJlIGFscmVhZHkgbG9hZGluZyB0aGUgU0RLLCBhZGQgdGhlIHJlc29sdmVcbiAgICAvLyBmdW5jdGlvbiB0byB0aGUgZXhpc3RpbmcgYXJyYXkgb2YgcmVzb2x2ZSBmdW5jdGlvbnNcbiAgICBpZiAocmVzb2x2ZXNbdXJsXSkge1xuICAgICAgcmVzb2x2ZXNbdXJsXS5wdXNoKHJlc29sdmUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXNvbHZlc1t1cmxdID0gW3Jlc29sdmVdO1xuICAgIHZhciBvbkxvYWRlZCA9IGZ1bmN0aW9uIG9uTG9hZGVkKHNkaykge1xuICAgICAgLy8gV2hlbiBsb2FkZWQsIHJlc29sdmUgYWxsIHBlbmRpbmcgcHJvbWlzZXNcbiAgICAgIHJlc29sdmVzW3VybF0uZm9yRWFjaChmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShzZGspO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoc2RrUmVhZHkpIHtcbiAgICAgIHZhciBwcmV2aW91c09uUmVhZHkgPSB3aW5kb3dbc2RrUmVhZHldO1xuICAgICAgd2luZG93W3Nka1JlYWR5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByZXZpb3VzT25SZWFkeSkgcHJldmlvdXNPblJlYWR5KCk7XG4gICAgICAgIG9uTG9hZGVkKHdpbmRvd1tzZGtHbG9iYWxdKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZldGNoU2NyaXB0KHVybCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVycikgcmVqZWN0KGVycik7XG4gICAgICBpZiAoIXNka1JlYWR5KSB7XG4gICAgICAgIG9uTG9hZGVkKHdpbmRvd1tzZGtHbG9iYWxdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldENvbmZpZyhwcm9wcywgZGVmYXVsdFByb3BzLCBzaG93V2FybmluZykge1xuICB2YXIgY29uZmlnID0gKDAsIF9kZWVwbWVyZ2UyWydkZWZhdWx0J10pKGRlZmF1bHRQcm9wcy5jb25maWcsIHByb3BzLmNvbmZpZyk7XG4gIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF9wcm9wcy5ERVBSRUNBVEVEX0NPTkZJR19QUk9QU1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgIHZhciBwID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgIGlmIChwcm9wc1twXSkge1xuICAgICAgICB2YXIga2V5ID0gcC5yZXBsYWNlKC9Db25maWckLywgJycpO1xuICAgICAgICBjb25maWcgPSAoMCwgX2RlZXBtZXJnZTJbJ2RlZmF1bHQnXSkoY29uZmlnLCBfZGVmaW5lUHJvcGVydHkoe30sIGtleSwgcHJvcHNbcF0pKTtcbiAgICAgICAgaWYgKHNob3dXYXJuaW5nKSB7XG4gICAgICAgICAgdmFyIGxpbmsgPSAnaHR0cHM6Ly9naXRodWIuY29tL0Nvb2tQZXRlL3JlYWN0LXBsYXllciNjb25maWctcHJvcCc7XG4gICAgICAgICAgdmFyIG1lc3NhZ2UgPSAnUmVhY3RQbGF5ZXI6ICVjJyArIHAgKyAnICVjaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSB0aGUgY29uZmlnIHByb3AgaW5zdGVhZCBcXHUyMDEzICcgKyBsaW5rO1xuICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvclsncmV0dXJuJ10pIHtcbiAgICAgICAgX2l0ZXJhdG9yWydyZXR1cm4nXSgpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gb21pdChvYmplY3QpIHtcbiAgdmFyIF9yZWY7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFycmF5cyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcnJheXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIG9taXRLZXlzID0gKF9yZWYgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWYsIGFycmF5cyk7XG4gIHZhciBvdXRwdXQgPSB7fTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0ga2V5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgdmFyIGtleSA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgaWYgKG9taXRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjJbJ3JldHVybiddKSB7XG4gICAgICAgIF9pdGVyYXRvcjJbJ3JldHVybiddKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGNhbGxQbGF5ZXIobWV0aG9kKSB7XG4gIHZhciBfcGxheWVyO1xuXG4gIC8vIFV0aWwgbWV0aG9kIGZvciBjYWxsaW5nIGEgbWV0aG9kIG9uIHRoaXMucGxheWVyXG4gIC8vIGJ1dCBndWFyZCBhZ2FpbnN0IGVycm9ycyBhbmQgY29uc29sZS53YXJuIGluc3RlYWRcbiAgaWYgKCF0aGlzLnBsYXllciB8fCAhdGhpcy5wbGF5ZXJbbWV0aG9kXSkge1xuICAgIHZhciBtZXNzYWdlID0gJ1JlYWN0UGxheWVyOiAnICsgdGhpcy5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSArICcgcGxheWVyIGNvdWxkIG5vdCBjYWxsICVjJyArIG1ldGhvZCArICclYyBcXHUyMDEzICc7XG4gICAgaWYgKCF0aGlzLnBsYXllcikge1xuICAgICAgbWVzc2FnZSArPSAnVGhlIHBsYXllciB3YXMgbm90IGF2YWlsYWJsZSc7XG4gICAgfSBlbHNlIGlmICghdGhpcy5wbGF5ZXJbbWV0aG9kXSkge1xuICAgICAgbWVzc2FnZSArPSAnVGhlIG1ldGhvZCB3YXMgbm90IGF2YWlsYWJsZSc7XG4gICAgfVxuICAgIGNvbnNvbGUud2FybihtZXNzYWdlLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCAnJyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiAoX3BsYXllciA9IHRoaXMucGxheWVyKVttZXRob2RdLmFwcGx5KF9wbGF5ZXIsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAodHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsKSkgPT09ICdvYmplY3QnO1xufVxuXG4vLyBEZWVwIGNvbXBhcmlzb24gb2YgdHdvIG9iamVjdHMgYnV0IGlnbm9yaW5nXG4vLyBmdW5jdGlvbnMsIGZvciB1c2UgaW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG5mdW5jdGlvbiBpc0VxdWFsKGEsIGIpIHtcbiAgaWYgKHR5cGVvZiBhID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGEgaW5zdGFuY2VvZiBBcnJheSAmJiBiIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpICE9PSBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWlzRXF1YWwoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNPYmplY3QoYSkgJiYgaXNPYmplY3QoYikpIHtcbiAgICBpZiAoT2JqZWN0LmtleXMoYSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gT2JqZWN0LmtleXMoYSlbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgdmFyIGtleSA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICBpZiAoIWlzRXF1YWwoYVtrZXldLCBiW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjNbJ3JldHVybiddKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yM1sncmV0dXJuJ10oKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBhID09PSBiO1xufVxuXG5mdW5jdGlvbiBpc01lZGlhU3RyZWFtKHVybCkge1xuICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5NZWRpYVN0cmVhbSAhPT0gJ3VuZGVmaW5lZCcgJiYgdXJsIGluc3RhbmNlb2Ygd2luZG93Lk1lZGlhU3RyZWFtO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BzNiA9IHJlcXVpcmUoJy4vcHJvcHMnKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTRUVLX09OX1BMQVlfRVhQSVJZID0gNTAwMDtcblxudmFyIFBsYXllciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQbGF5ZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBsYXllcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGxheWVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBQbGF5ZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQbGF5ZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfSAvLyBUcmFjayBwbGF5aW5nIHN0YXRlIGludGVybmFsbHkgdG8gcHJldmVudCBidWdzXG4gIC8vIFVzZSBpc0xvYWRpbmcgdG8gcHJldmVudCBvblBhdXNlIHdoZW4gc3dpdGNoaW5nIFVSTFxuXG5cbiAgX2NyZWF0ZUNsYXNzKFBsYXllciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMucGxheWVyLmxvYWQodGhpcy5wcm9wcy51cmwpO1xuICAgICAgdGhpcy5wcm9ncmVzcygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5wcm9ncmVzc1RpbWVvdXQpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZHVyYXRpb25DaGVja1RpbWVvdXQpO1xuICAgICAgaWYgKHRoaXMuaXNSZWFkeSkge1xuICAgICAgICB0aGlzLnBsYXllci5zdG9wKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wbGF5ZXIuZGlzYWJsZVBJUCkge1xuICAgICAgICB0aGlzLnBsYXllci5kaXNhYmxlUElQKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyBJbnZva2UgcGxheWVyIG1ldGhvZHMgYmFzZWQgb24gaW5jb21pbmcgcHJvcHNcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHVybCA9IF9wcm9wcy51cmwsXG4gICAgICAgICAgcGxheWluZyA9IF9wcm9wcy5wbGF5aW5nLFxuICAgICAgICAgIHZvbHVtZSA9IF9wcm9wcy52b2x1bWUsXG4gICAgICAgICAgbXV0ZWQgPSBfcHJvcHMubXV0ZWQsXG4gICAgICAgICAgcGxheWJhY2tSYXRlID0gX3Byb3BzLnBsYXliYWNrUmF0ZSxcbiAgICAgICAgICBwaXAgPSBfcHJvcHMucGlwLFxuICAgICAgICAgIGxvb3AgPSBfcHJvcHMubG9vcDtcblxuICAgICAgaWYgKCEoMCwgX3V0aWxzLmlzRXF1YWwpKHVybCwgbmV4dFByb3BzLnVybCkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdSZWFjdFBsYXllcjogdGhlIGF0dGVtcHQgdG8gbG9hZCAnICsgbmV4dFByb3BzLnVybCArICcgaXMgYmVpbmcgZGVmZXJyZWQgdW50aWwgdGhlIHBsYXllciBoYXMgbG9hZGVkJyk7XG4gICAgICAgICAgdGhpcy5sb2FkT25SZWFkeSA9IG5leHRQcm9wcy51cmw7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGFydE9uUGxheSA9IHRydWU7XG4gICAgICAgIHRoaXMub25EdXJhdGlvbkNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBsYXllci5sb2FkKG5leHRQcm9wcy51cmwsIHRoaXMuaXNSZWFkeSk7XG4gICAgICB9XG4gICAgICBpZiAoIXBsYXlpbmcgJiYgbmV4dFByb3BzLnBsYXlpbmcgJiYgIXRoaXMuaXNQbGF5aW5nKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnBsYXkoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGF5aW5nICYmICFuZXh0UHJvcHMucGxheWluZyAmJiB0aGlzLmlzUGxheWluZykge1xuICAgICAgICB0aGlzLnBsYXllci5wYXVzZSgpO1xuICAgICAgfVxuICAgICAgaWYgKCFwaXAgJiYgbmV4dFByb3BzLnBpcCAmJiB0aGlzLnBsYXllci5lbmFibGVQSVApIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuZW5hYmxlUElQKCk7XG4gICAgICB9IGVsc2UgaWYgKHBpcCAmJiAhbmV4dFByb3BzLnBpcCAmJiB0aGlzLnBsYXllci5kaXNhYmxlUElQKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmRpc2FibGVQSVAoKTtcbiAgICAgIH1cbiAgICAgIGlmICh2b2x1bWUgIT09IG5leHRQcm9wcy52b2x1bWUgJiYgbmV4dFByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnBsYXllci5zZXRWb2x1bWUobmV4dFByb3BzLnZvbHVtZSk7XG4gICAgICB9XG4gICAgICBpZiAobXV0ZWQgIT09IG5leHRQcm9wcy5tdXRlZCkge1xuICAgICAgICBpZiAobmV4dFByb3BzLm11dGVkKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIubXV0ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGxheWVyLnVubXV0ZSgpO1xuICAgICAgICAgIGlmIChuZXh0UHJvcHMudm9sdW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBTZXQgdm9sdW1lIG5leHQgdGljayB0byBmaXggYSBidWcgd2l0aCBEYWlseU1vdGlvblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIucGxheWVyLnNldFZvbHVtZShuZXh0UHJvcHMudm9sdW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBsYXliYWNrUmF0ZSAhPT0gbmV4dFByb3BzLnBsYXliYWNrUmF0ZSAmJiB0aGlzLnBsYXllci5zZXRQbGF5YmFja1JhdGUpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0UGxheWJhY2tSYXRlKG5leHRQcm9wcy5wbGF5YmFja1JhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKGxvb3AgIT09IG5leHRQcm9wcy5sb29wICYmIHRoaXMucGxheWVyLnNldExvb3ApIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0TG9vcChuZXh0UHJvcHMubG9vcCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWFkeSkgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIGlmICghdGhpcy5pc1JlYWR5KSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5nZXRTZWNvbmRzTG9hZGVkKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKGFtb3VudCwgdHlwZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIC8vIFdoZW4gc2Vla2luZyBiZWZvcmUgcGxheWVyIGlzIHJlYWR5LCBzdG9yZSB2YWx1ZSBhbmQgc2VlayBsYXRlclxuICAgICAgaWYgKCF0aGlzLmlzUmVhZHkgJiYgYW1vdW50ICE9PSAwKSB7XG4gICAgICAgIHRoaXMuc2Vla09uUGxheSA9IGFtb3VudDtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnNlZWtPblBsYXkgPSBudWxsO1xuICAgICAgICB9LCBTRUVLX09OX1BMQVlfRVhQSVJZKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGlzRnJhY3Rpb24gPSAhdHlwZSA/IGFtb3VudCA+IDAgJiYgYW1vdW50IDwgMSA6IHR5cGUgPT09ICdmcmFjdGlvbic7XG4gICAgICBpZiAoaXNGcmFjdGlvbikge1xuICAgICAgICAvLyBDb252ZXJ0IGZyYWN0aW9uIHRvIHNlY29uZHMgYmFzZWQgb24gZHVyYXRpb25cbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignUmVhY3RQbGF5ZXI6IGNvdWxkIG5vdCBzZWVrIHVzaW5nIGZyYWN0aW9uIOKAk8KgZHVyYXRpb24gbm90IHlldCBhdmFpbGFibGUnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKGR1cmF0aW9uICogYW1vdW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKGFtb3VudCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIFBsYXllciA9IHRoaXMucHJvcHMuYWN0aXZlUGxheWVyO1xuICAgICAgaWYgKCFQbGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoUGxheWVyLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBvblJlYWR5OiB0aGlzLm9uUmVhZHksXG4gICAgICAgIG9uUGxheTogdGhpcy5vblBsYXksXG4gICAgICAgIG9uUGF1c2U6IHRoaXMub25QYXVzZSxcbiAgICAgICAgb25FbmRlZDogdGhpcy5vbkVuZGVkLFxuICAgICAgICBvbkxvYWRlZDogdGhpcy5vbkxvYWRlZCxcbiAgICAgICAgb25FcnJvcjogdGhpcy5vbkVycm9yXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBsYXllcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblBsYXllci5kaXNwbGF5TmFtZSA9ICdQbGF5ZXInO1xuUGxheWVyLnByb3BUeXBlcyA9IF9wcm9wczYucHJvcFR5cGVzO1xuUGxheWVyLmRlZmF1bHRQcm9wcyA9IF9wcm9wczYuZGVmYXVsdFByb3BzO1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB0aGlzLmlzUmVhZHkgPSBmYWxzZTtcbiAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcbiAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlO1xuICB0aGlzLmxvYWRPblJlYWR5ID0gbnVsbDtcbiAgdGhpcy5zdGFydE9uUGxheSA9IHRydWU7XG4gIHRoaXMuc2Vla09uUGxheSA9IG51bGw7XG4gIHRoaXMub25EdXJhdGlvbkNhbGxlZCA9IGZhbHNlO1xuXG4gIHRoaXMuZ2V0SW50ZXJuYWxQbGF5ZXIgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFfdGhpczQucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gX3RoaXM0LnBsYXllcltrZXldO1xuICB9O1xuXG4gIHRoaXMucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF90aGlzNC5wcm9wcy51cmwgJiYgX3RoaXM0LnBsYXllciAmJiBfdGhpczQuaXNSZWFkeSkge1xuICAgICAgdmFyIHBsYXllZFNlY29uZHMgPSBfdGhpczQuZ2V0Q3VycmVudFRpbWUoKSB8fCAwO1xuICAgICAgdmFyIGxvYWRlZFNlY29uZHMgPSBfdGhpczQuZ2V0U2Vjb25kc0xvYWRlZCgpO1xuICAgICAgdmFyIGR1cmF0aW9uID0gX3RoaXM0LmdldER1cmF0aW9uKCk7XG4gICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHByb2dyZXNzID0ge1xuICAgICAgICAgIHBsYXllZFNlY29uZHM6IHBsYXllZFNlY29uZHMsXG4gICAgICAgICAgcGxheWVkOiBwbGF5ZWRTZWNvbmRzIC8gZHVyYXRpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxvYWRlZFNlY29uZHMgIT09IG51bGwpIHtcbiAgICAgICAgICBwcm9ncmVzcy5sb2FkZWRTZWNvbmRzID0gbG9hZGVkU2Vjb25kcztcbiAgICAgICAgICBwcm9ncmVzcy5sb2FkZWQgPSBsb2FkZWRTZWNvbmRzIC8gZHVyYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSBjYWxsIG9uUHJvZ3Jlc3MgaWYgdmFsdWVzIGhhdmUgY2hhbmdlZFxuICAgICAgICBpZiAocHJvZ3Jlc3MucGxheWVkU2Vjb25kcyAhPT0gX3RoaXM0LnByZXZQbGF5ZWQgfHwgcHJvZ3Jlc3MubG9hZGVkU2Vjb25kcyAhPT0gX3RoaXM0LnByZXZMb2FkZWQpIHtcbiAgICAgICAgICBfdGhpczQucHJvcHMub25Qcm9ncmVzcyhwcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXM0LnByZXZQbGF5ZWQgPSBwcm9ncmVzcy5wbGF5ZWRTZWNvbmRzO1xuICAgICAgICBfdGhpczQucHJldkxvYWRlZCA9IHByb2dyZXNzLmxvYWRlZFNlY29uZHM7XG4gICAgICB9XG4gICAgfVxuICAgIF90aGlzNC5wcm9ncmVzc1RpbWVvdXQgPSBzZXRUaW1lb3V0KF90aGlzNC5wcm9ncmVzcywgX3RoaXM0LnByb3BzLnByb2dyZXNzRnJlcXVlbmN5IHx8IF90aGlzNC5wcm9wcy5wcm9ncmVzc0ludGVydmFsKTtcbiAgfTtcblxuICB0aGlzLm9uUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFfdGhpczQubW91bnRlZCkgcmV0dXJuO1xuICAgIF90aGlzNC5pc1JlYWR5ID0gdHJ1ZTtcbiAgICBfdGhpczQuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgdmFyIF9wcm9wczIgPSBfdGhpczQucHJvcHMsXG4gICAgICAgIG9uUmVhZHkgPSBfcHJvcHMyLm9uUmVhZHksXG4gICAgICAgIHBsYXlpbmcgPSBfcHJvcHMyLnBsYXlpbmcsXG4gICAgICAgIHZvbHVtZSA9IF9wcm9wczIudm9sdW1lLFxuICAgICAgICBtdXRlZCA9IF9wcm9wczIubXV0ZWQ7XG5cbiAgICBvblJlYWR5KCk7XG4gICAgaWYgKCFtdXRlZCAmJiB2b2x1bWUgIT09IG51bGwpIHtcbiAgICAgIF90aGlzNC5wbGF5ZXIuc2V0Vm9sdW1lKHZvbHVtZSk7XG4gICAgfVxuICAgIGlmIChfdGhpczQubG9hZE9uUmVhZHkpIHtcbiAgICAgIF90aGlzNC5wbGF5ZXIubG9hZChfdGhpczQubG9hZE9uUmVhZHksIHRydWUpO1xuICAgICAgX3RoaXM0LmxvYWRPblJlYWR5ID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHBsYXlpbmcpIHtcbiAgICAgIF90aGlzNC5wbGF5ZXIucGxheSgpO1xuICAgIH1cbiAgICBfdGhpczQub25EdXJhdGlvbkNoZWNrKCk7XG4gIH07XG5cbiAgdGhpcy5vblBsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXM0LmlzUGxheWluZyA9IHRydWU7XG4gICAgX3RoaXM0LmlzTG9hZGluZyA9IGZhbHNlO1xuICAgIHZhciBfcHJvcHMzID0gX3RoaXM0LnByb3BzLFxuICAgICAgICBvblN0YXJ0ID0gX3Byb3BzMy5vblN0YXJ0LFxuICAgICAgICBvblBsYXkgPSBfcHJvcHMzLm9uUGxheSxcbiAgICAgICAgcGxheWJhY2tSYXRlID0gX3Byb3BzMy5wbGF5YmFja1JhdGU7XG5cbiAgICBpZiAoX3RoaXM0LnN0YXJ0T25QbGF5KSB7XG4gICAgICBpZiAoX3RoaXM0LnBsYXllci5zZXRQbGF5YmFja1JhdGUpIHtcbiAgICAgICAgX3RoaXM0LnBsYXllci5zZXRQbGF5YmFja1JhdGUocGxheWJhY2tSYXRlKTtcbiAgICAgIH1cbiAgICAgIG9uU3RhcnQoKTtcbiAgICAgIF90aGlzNC5zdGFydE9uUGxheSA9IGZhbHNlO1xuICAgIH1cbiAgICBvblBsYXkoKTtcbiAgICBpZiAoX3RoaXM0LnNlZWtPblBsYXkpIHtcbiAgICAgIF90aGlzNC5zZWVrVG8oX3RoaXM0LnNlZWtPblBsYXkpO1xuICAgICAgX3RoaXM0LnNlZWtPblBsYXkgPSBudWxsO1xuICAgIH1cbiAgICBfdGhpczQub25EdXJhdGlvbkNoZWNrKCk7XG4gIH07XG5cbiAgdGhpcy5vblBhdXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBfdGhpczQuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgaWYgKCFfdGhpczQuaXNMb2FkaW5nKSB7XG4gICAgICBfdGhpczQucHJvcHMub25QYXVzZShlKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5vbkVuZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvcHM0ID0gX3RoaXM0LnByb3BzLFxuICAgICAgICBhY3RpdmVQbGF5ZXIgPSBfcHJvcHM0LmFjdGl2ZVBsYXllcixcbiAgICAgICAgbG9vcCA9IF9wcm9wczQubG9vcCxcbiAgICAgICAgb25FbmRlZCA9IF9wcm9wczQub25FbmRlZDtcblxuICAgIGlmIChhY3RpdmVQbGF5ZXIubG9vcE9uRW5kZWQgJiYgbG9vcCkge1xuICAgICAgX3RoaXM0LnNlZWtUbygwKTtcbiAgICB9XG4gICAgaWYgKCFsb29wKSB7XG4gICAgICBfdGhpczQuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICBvbkVuZGVkKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMub25FcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3BzNTtcblxuICAgIF90aGlzNC5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAoX3Byb3BzNSA9IF90aGlzNC5wcm9wcykub25FcnJvci5hcHBseShfcHJvcHM1LCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHRoaXMub25EdXJhdGlvbkNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dChfdGhpczQuZHVyYXRpb25DaGVja1RpbWVvdXQpO1xuICAgIHZhciBkdXJhdGlvbiA9IF90aGlzNC5nZXREdXJhdGlvbigpO1xuICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgaWYgKCFfdGhpczQub25EdXJhdGlvbkNhbGxlZCkge1xuICAgICAgICBfdGhpczQucHJvcHMub25EdXJhdGlvbihkdXJhdGlvbik7XG4gICAgICAgIF90aGlzNC5vbkR1cmF0aW9uQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXM0LmR1cmF0aW9uQ2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChfdGhpczQub25EdXJhdGlvbkNoZWNrLCAxMDApO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFNvbWV0aW1lcyB3ZSBrbm93IGxvYWRpbmcgaGFzIHN0b3BwZWQgYnV0IG9uUmVhZHkvb25QbGF5IGFyZSBuZXZlciBjYWxsZWRcbiAgICAvLyBzbyB0aGlzIHByb3ZpZGVzIGEgd2F5IGZvciBwbGF5ZXJzIHRvIGF2b2lkIGdldHRpbmcgc3R1Y2tcbiAgICBfdGhpczQuaXNMb2FkaW5nID0gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5yZWYgPSBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgaWYgKHBsYXllcikge1xuICAgICAgX3RoaXM0LnBsYXllciA9IHBsYXllcjtcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBQbGF5ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVTaW5nbGVQbGF5ZXI7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wczIgPSByZXF1aXJlKCcuL3Byb3BzJyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBfUGxheWVyID0gcmVxdWlyZSgnLi9QbGF5ZXInKTtcblxudmFyIF9QbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTVVBQT1JURURfUFJPUFMgPSBPYmplY3Qua2V5cyhfcHJvcHMyLnByb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpbmdsZVBsYXllcihhY3RpdmVQbGF5ZXIpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXAyO1xuXG4gIHJldHVybiBfdGVtcDIgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhTaW5nbGVQbGF5ZXIsIF9Db21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gU2luZ2xlUGxheWVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaW5nbGVQbGF5ZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gU2luZ2xlUGxheWVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2luZ2xlUGxheWVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY29uZmlnID0gKDAsIF91dGlscy5nZXRDb25maWcpKF90aGlzLnByb3BzLCBfcHJvcHMyLmRlZmF1bHRQcm9wcywgdHJ1ZSksIF90aGlzLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKTtcbiAgICAgIH0sIF90aGlzLmdldEN1cnJlbnRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBfdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKTtcbiAgICAgIH0sIF90aGlzLmdldFNlY29uZHNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghX3RoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBsYXllci5nZXRTZWNvbmRzTG9hZGVkKCk7XG4gICAgICB9LCBfdGhpcy5nZXRJbnRlcm5hbFBsYXllciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJ3BsYXllcic7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXMucGxheWVyLmdldEludGVybmFsUGxheWVyKGtleSk7XG4gICAgICB9LCBfdGhpcy5zZWVrVG8gPSBmdW5jdGlvbiAoZnJhY3Rpb24sIHR5cGUpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgICBfdGhpcy5wbGF5ZXIuc2Vla1RvKGZyYWN0aW9uLCB0eXBlKTtcbiAgICAgIH0sIF90aGlzLnJlZiA9IGZ1bmN0aW9uIChwbGF5ZXIpIHtcbiAgICAgICAgX3RoaXMucGxheWVyID0gcGxheWVyO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFNpbmdsZVBsYXllciwgW3tcbiAgICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gISgwLCBfdXRpbHMuaXNFcXVhbCkodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdjb21wb25lbnRXaWxsVXBkYXRlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLmNvbmZpZyA9ICgwLCBfdXRpbHMuZ2V0Q29uZmlnKShuZXh0UHJvcHMsIF9wcm9wczIuZGVmYXVsdFByb3BzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9jb25maWckZmlsZSA9IHRoaXMuY29uZmlnLmZpbGUsXG4gICAgICAgICAgICBmb3JjZVZpZGVvID0gX2NvbmZpZyRmaWxlLmZvcmNlVmlkZW8sXG4gICAgICAgICAgICBmb3JjZUF1ZGlvID0gX2NvbmZpZyRmaWxlLmZvcmNlQXVkaW8sXG4gICAgICAgICAgICBmb3JjZUhMUyA9IF9jb25maWckZmlsZS5mb3JjZUhMUyxcbiAgICAgICAgICAgIGZvcmNlREFTSCA9IF9jb25maWckZmlsZS5mb3JjZURBU0g7XG5cbiAgICAgICAgdmFyIHNraXBDYW5QbGF5ID0gZm9yY2VWaWRlbyB8fCBmb3JjZUF1ZGlvIHx8IGZvcmNlSExTIHx8IGZvcmNlREFTSDtcbiAgICAgICAgaWYgKCFhY3RpdmVQbGF5ZXIuY2FuUGxheSh0aGlzLnByb3BzLnVybCkgJiYgIXNraXBDYW5QbGF5KSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICAgIHdpZHRoID0gX3Byb3BzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0ID0gX3Byb3BzLmhlaWdodCxcbiAgICAgICAgICAgIFdyYXBwZXIgPSBfcHJvcHMud3JhcHBlcjtcblxuICAgICAgICB2YXIgb3RoZXJQcm9wcyA9ICgwLCBfdXRpbHMub21pdCkodGhpcy5wcm9wcywgU1VQUE9SVEVEX1BST1BTLCBfcHJvcHMyLkRFUFJFQ0FURURfQ09ORklHX1BST1BTKTtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFdyYXBwZXIsXG4gICAgICAgICAgX2V4dGVuZHMoeyBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlLCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSkgfSwgb3RoZXJQcm9wcyksXG4gICAgICAgICAgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoX1BsYXllcjJbJ2RlZmF1bHQnXSwgX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgICAgICBhY3RpdmVQbGF5ZXI6IGFjdGl2ZVBsYXllcixcbiAgICAgICAgICAgIGNvbmZpZzogdGhpcy5jb25maWdcbiAgICAgICAgICB9KSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU2luZ2xlUGxheWVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpLCBfY2xhc3MuZGlzcGxheU5hbWUgPSBhY3RpdmVQbGF5ZXIuZGlzcGxheU5hbWUgKyAnUGxheWVyJywgX2NsYXNzLnByb3BUeXBlcyA9IF9wcm9wczIucHJvcFR5cGVzLCBfY2xhc3MuZGVmYXVsdFByb3BzID0gX3Byb3BzMi5kZWZhdWx0UHJvcHMsIF9jbGFzcy5jYW5QbGF5ID0gYWN0aXZlUGxheWVyLmNhblBsYXksIF90ZW1wMjtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLllvdVR1YmUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknO1xudmFyIFNES19HTE9CQUwgPSAnWVQnO1xudmFyIFNES19HTE9CQUxfUkVBRFkgPSAnb25Zb3VUdWJlSWZyYW1lQVBJUmVhZHknO1xudmFyIE1BVENIX1VSTCA9IC8oPzp5b3V0dVxcLmJlXFwvfHlvdXR1YmVcXC5jb21cXC8oPzplbWJlZFxcL3x2XFwvfHdhdGNoXFw/dj18d2F0Y2hcXD8uKyZ2PSkpKChcXHd8LSl7MTF9KXx5b3V0dWJlXFwuY29tXFwvcGxheWxpc3RcXD9saXN0PS87XG52YXIgTUFUQ0hfUExBWUxJU1QgPSAvbGlzdD0oW2EtekEtWjAtOV8tXSspLztcblxuZnVuY3Rpb24gcGFyc2VQbGF5bGlzdCh1cmwpIHtcbiAgaWYgKE1BVENIX1BMQVlMSVNULnRlc3QodXJsKSkge1xuICAgIHZhciBfdXJsJG1hdGNoID0gdXJsLm1hdGNoKE1BVENIX1BMQVlMSVNUKSxcbiAgICAgICAgX3VybCRtYXRjaDIgPSBfc2xpY2VkVG9BcnJheShfdXJsJG1hdGNoLCAyKSxcbiAgICAgICAgcGxheWxpc3RJZCA9IF91cmwkbWF0Y2gyWzFdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpc3RUeXBlOiAncGxheWxpc3QnLFxuICAgICAgbGlzdDogcGxheWxpc3RJZFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHt9O1xufVxuXG52YXIgWW91VHViZSA9IGV4cG9ydHMuWW91VHViZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhZb3VUdWJlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBZb3VUdWJlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBZb3VUdWJlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBZb3VUdWJlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoWW91VHViZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNhbGxQbGF5ZXIgPSBfdXRpbHMuY2FsbFBsYXllciwgX3RoaXMub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIGRhdGEgPSBfcmVmMi5kYXRhO1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25QbGF5ID0gX3RoaXMkcHJvcHMub25QbGF5LFxuICAgICAgICAgIG9uUGF1c2UgPSBfdGhpcyRwcm9wcy5vblBhdXNlLFxuICAgICAgICAgIG9uQnVmZmVyID0gX3RoaXMkcHJvcHMub25CdWZmZXIsXG4gICAgICAgICAgb25CdWZmZXJFbmQgPSBfdGhpcyRwcm9wcy5vbkJ1ZmZlckVuZCxcbiAgICAgICAgICBvbkVuZGVkID0gX3RoaXMkcHJvcHMub25FbmRlZCxcbiAgICAgICAgICBvblJlYWR5ID0gX3RoaXMkcHJvcHMub25SZWFkeSxcbiAgICAgICAgICBsb29wID0gX3RoaXMkcHJvcHMubG9vcDtcbiAgICAgIHZhciBfd2luZG93JFNES19HTE9CQUwkUGwgPSB3aW5kb3dbU0RLX0dMT0JBTF0uUGxheWVyU3RhdGUsXG4gICAgICAgICAgUExBWUlORyA9IF93aW5kb3ckU0RLX0dMT0JBTCRQbC5QTEFZSU5HLFxuICAgICAgICAgIFBBVVNFRCA9IF93aW5kb3ckU0RLX0dMT0JBTCRQbC5QQVVTRUQsXG4gICAgICAgICAgQlVGRkVSSU5HID0gX3dpbmRvdyRTREtfR0xPQkFMJFBsLkJVRkZFUklORyxcbiAgICAgICAgICBFTkRFRCA9IF93aW5kb3ckU0RLX0dMT0JBTCRQbC5FTkRFRCxcbiAgICAgICAgICBDVUVEID0gX3dpbmRvdyRTREtfR0xPQkFMJFBsLkNVRUQ7XG5cbiAgICAgIGlmIChkYXRhID09PSBQTEFZSU5HKSB7XG4gICAgICAgIG9uUGxheSgpO1xuICAgICAgICBvbkJ1ZmZlckVuZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgPT09IFBBVVNFRCkgb25QYXVzZSgpO1xuICAgICAgaWYgKGRhdGEgPT09IEJVRkZFUklORykgb25CdWZmZXIoKTtcbiAgICAgIGlmIChkYXRhID09PSBFTkRFRCkge1xuICAgICAgICB2YXIgaXNQbGF5bGlzdCA9ICEhX3RoaXMuY2FsbFBsYXllcignZ2V0UGxheWxpc3QnKTtcbiAgICAgICAgaWYgKGxvb3AgJiYgIWlzUGxheWxpc3QpIHtcbiAgICAgICAgICBfdGhpcy5wbGF5KCk7IC8vIE9ubHkgbG9vcCBtYW51YWxseSBpZiBub3QgcGxheWluZyBhIHBsYXlsaXN0XG4gICAgICAgIH1cbiAgICAgICAgb25FbmRlZCgpO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgPT09IENVRUQpIG9uUmVhZHkoKTtcbiAgICB9LCBfdGhpcy5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignbXV0ZScpO1xuICAgIH0sIF90aGlzLnVubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3VuTXV0ZScpO1xuICAgIH0sIF90aGlzLnJlZiA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICAgIF90aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhZb3VUdWJlLCBbe1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCwgaXNSZWFkeSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXlpbmcgPSBfcHJvcHMucGxheWluZyxcbiAgICAgICAgICBtdXRlZCA9IF9wcm9wcy5tdXRlZCxcbiAgICAgICAgICBwbGF5c2lubGluZSA9IF9wcm9wcy5wbGF5c2lubGluZSxcbiAgICAgICAgICBjb250cm9scyA9IF9wcm9wcy5jb250cm9scyxcbiAgICAgICAgICBsb29wID0gX3Byb3BzLmxvb3AsXG4gICAgICAgICAgY29uZmlnID0gX3Byb3BzLmNvbmZpZyxcbiAgICAgICAgICBfb25FcnJvciA9IF9wcm9wcy5vbkVycm9yO1xuICAgICAgdmFyIF9jb25maWckeW91dHViZSA9IGNvbmZpZy55b3V0dWJlLFxuICAgICAgICAgIHBsYXllclZhcnMgPSBfY29uZmlnJHlvdXR1YmUucGxheWVyVmFycyxcbiAgICAgICAgICBlbWJlZE9wdGlvbnMgPSBfY29uZmlnJHlvdXR1YmUuZW1iZWRPcHRpb25zO1xuXG4gICAgICB2YXIgaWQgPSB1cmwgJiYgdXJsLm1hdGNoKE1BVENIX1VSTClbMV07XG4gICAgICBpZiAoaXNSZWFkeSkge1xuICAgICAgICBpZiAoTUFUQ0hfUExBWUxJU1QudGVzdCh1cmwpKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIubG9hZFBsYXlsaXN0KHBhcnNlUGxheWxpc3QodXJsKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGxheWVyLmN1ZVZpZGVvQnlJZCh7XG4gICAgICAgICAgdmlkZW9JZDogaWQsXG4gICAgICAgICAgc3RhcnRTZWNvbmRzOiAoMCwgX3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpIHx8IHBsYXllclZhcnMuc3RhcnQsXG4gICAgICAgICAgZW5kU2Vjb25kczogKDAsIF91dGlscy5wYXJzZUVuZFRpbWUpKHVybCkgfHwgcGxheWVyVmFycy5lbmRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZLCBmdW5jdGlvbiAoWVQpIHtcbiAgICAgICAgcmV0dXJuIFlULmxvYWRlZDtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKFlUKSB7XG4gICAgICAgIGlmICghX3RoaXMyLmNvbnRhaW5lcikgcmV0dXJuO1xuICAgICAgICBfdGhpczIucGxheWVyID0gbmV3IFlULlBsYXllcihfdGhpczIuY29udGFpbmVyLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICB2aWRlb0lkOiBpZCxcbiAgICAgICAgICBwbGF5ZXJWYXJzOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBhdXRvcGxheTogcGxheWluZyA/IDEgOiAwLFxuICAgICAgICAgICAgbXV0ZTogbXV0ZWQgPyAxIDogMCxcbiAgICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyA/IDEgOiAwLFxuICAgICAgICAgICAgc3RhcnQ6ICgwLCBfdXRpbHMucGFyc2VTdGFydFRpbWUpKHVybCksXG4gICAgICAgICAgICBlbmQ6ICgwLCBfdXRpbHMucGFyc2VFbmRUaW1lKSh1cmwpLFxuICAgICAgICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICAgICAgICAgICAgcGxheXNpbmxpbmU6IHBsYXlzaW5saW5lXG4gICAgICAgICAgfSwgcGFyc2VQbGF5bGlzdCh1cmwpLCBwbGF5ZXJWYXJzKSxcbiAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgICAgICAgICAgIGlmIChsb29wKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zZXRMb29wKHRydWUpOyAvLyBFbmFibGUgcGxheWxpc3QgbG9vcGluZ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25TdGF0ZUNoYW5nZTogX3RoaXMyLm9uU3RhdGVDaGFuZ2UsXG4gICAgICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfb25FcnJvcihldmVudC5kYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIGVtYmVkT3B0aW9ucykpO1xuICAgICAgfSwgX29uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5VmlkZW8nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXVzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwYXVzZVZpZGVvJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5jYWxsUGxheWVyKCdnZXRJZnJhbWUnKSkpIHJldHVybjtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc3RvcFZpZGVvJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKGFtb3VudCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrVG8nLCBhbW91bnQpO1xuICAgICAgaWYgKCF0aGlzLnByb3BzLnBsYXlpbmcpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFZvbHVtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbiAqIDEwMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UGxheWJhY2tSYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0UGxheWJhY2tSYXRlJywgcmF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0TG9vcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldExvb3AobG9vcCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRMb29wJywgbG9vcCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldER1cmF0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldEN1cnJlbnRUaW1lJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U2Vjb25kc0xvYWRlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsUGxheWVyKCdnZXRWaWRlb0xvYWRlZEZyYWN0aW9uJykgKiB0aGlzLmdldER1cmF0aW9uKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlIH0sXG4gICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogdGhpcy5yZWYgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFlvdVR1YmU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Zb3VUdWJlLmRpc3BsYXlOYW1lID0gJ1lvdVR1YmUnO1xuXG5Zb3VUdWJlLmNhblBsYXkgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiBNQVRDSF9VUkwudGVzdCh1cmwpO1xufTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gKDAsIF9zaW5nbGVQbGF5ZXIyWydkZWZhdWx0J10pKFlvdVR1YmUpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU291bmRDbG91ZCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vdy5zb3VuZGNsb3VkLmNvbS9wbGF5ZXIvYXBpLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1NDJztcbnZhciBNQVRDSF9VUkwgPSAvKHNvdW5kY2xvdWRcXC5jb218c25kXFwuc2MpXFwvLiskLztcblxudmFyIFNvdW5kQ2xvdWQgPSBleHBvcnRzLlNvdW5kQ2xvdWQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU291bmRDbG91ZCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU291bmRDbG91ZCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU291bmRDbG91ZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gU291bmRDbG91ZC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNvdW5kQ2xvdWQpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jYWxsUGxheWVyID0gX3V0aWxzLmNhbGxQbGF5ZXIsIF90aGlzLmR1cmF0aW9uID0gbnVsbCwgX3RoaXMuY3VycmVudFRpbWUgPSBudWxsLCBfdGhpcy5mcmFjdGlvbkxvYWRlZCA9IG51bGwsIF90aGlzLm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRWb2x1bWUoMCk7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRWb2x1bWUoX3RoaXMucHJvcHMudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5yZWYgPSBmdW5jdGlvbiAoaWZyYW1lKSB7XG4gICAgICBfdGhpcy5pZnJhbWUgPSBpZnJhbWU7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU291bmRDbG91ZCwgW3tcbiAgICBrZXk6ICdsb2FkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwsIGlzUmVhZHkpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoU0MpIHtcbiAgICAgICAgaWYgKCFfdGhpczIuaWZyYW1lKSByZXR1cm47XG4gICAgICAgIHZhciBfU0MkV2lkZ2V0JEV2ZW50cyA9IFNDLldpZGdldC5FdmVudHMsXG4gICAgICAgICAgICBQTEFZID0gX1NDJFdpZGdldCRFdmVudHMuUExBWSxcbiAgICAgICAgICAgIFBMQVlfUFJPR1JFU1MgPSBfU0MkV2lkZ2V0JEV2ZW50cy5QTEFZX1BST0dSRVNTLFxuICAgICAgICAgICAgUEFVU0UgPSBfU0MkV2lkZ2V0JEV2ZW50cy5QQVVTRSxcbiAgICAgICAgICAgIEZJTklTSCA9IF9TQyRXaWRnZXQkRXZlbnRzLkZJTklTSCxcbiAgICAgICAgICAgIEVSUk9SID0gX1NDJFdpZGdldCRFdmVudHMuRVJST1I7XG5cbiAgICAgICAgaWYgKCFpc1JlYWR5KSB7XG4gICAgICAgICAgX3RoaXMyLnBsYXllciA9IFNDLldpZGdldChfdGhpczIuaWZyYW1lKTtcbiAgICAgICAgICBfdGhpczIucGxheWVyLmJpbmQoUExBWSwgX3RoaXMyLnByb3BzLm9uUGxheSk7XG4gICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKFBBVVNFLCBfdGhpczIucHJvcHMub25QYXVzZSk7XG4gICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKFBMQVlfUFJPR1JFU1MsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpczIuY3VycmVudFRpbWUgPSBlLmN1cnJlbnRQb3NpdGlvbiAvIDEwMDA7XG4gICAgICAgICAgICBfdGhpczIuZnJhY3Rpb25Mb2FkZWQgPSBlLmxvYWRlZFByb2dyZXNzO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuYmluZChGSU5JU0gsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIucHJvcHMub25FbmRlZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuYmluZChFUlJPUiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIucHJvcHMub25FcnJvcihlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpczIucGxheWVyLmxvYWQodXJsLCBfZXh0ZW5kcyh7fSwgX3RoaXMyLnByb3BzLmNvbmZpZy5zb3VuZGNsb3VkLm9wdGlvbnMsIHtcbiAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLmdldER1cmF0aW9uKGZ1bmN0aW9uIChkdXJhdGlvbikge1xuICAgICAgICAgICAgICBfdGhpczIuZHVyYXRpb24gPSBkdXJhdGlvbiAvIDEwMDA7XG4gICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGF1c2UnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzdG9wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG9cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZWVrVG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrVG8oc2Vjb25kcykge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrVG8nLCBzZWNvbmRzICogMTAwMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Vm9sdW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldFZvbHVtZScsIGZyYWN0aW9uICogMTAwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFNlY29uZHNMb2FkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZnJhY3Rpb25Mb2FkZWQgKiB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScsIHtcbiAgICAgICAgcmVmOiB0aGlzLnJlZixcbiAgICAgICAgc3JjOiAnaHR0cHM6Ly93LnNvdW5kY2xvdWQuY29tL3BsYXllci8/dXJsPScgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5wcm9wcy51cmwpLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIGZyYW1lQm9yZGVyOiAwLFxuICAgICAgICBhbGxvdzogJ2F1dG9wbGF5J1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNvdW5kQ2xvdWQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Tb3VuZENsb3VkLmRpc3BsYXlOYW1lID0gJ1NvdW5kQ2xvdWQnO1xuXG5Tb3VuZENsb3VkLmNhblBsYXkgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiBNQVRDSF9VUkwudGVzdCh1cmwpO1xufTtcblxuU291bmRDbG91ZC5sb29wT25FbmRlZCA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSAoMCwgX3NpbmdsZVBsYXllcjJbJ2RlZmF1bHQnXSkoU291bmRDbG91ZCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5WaW1lbyA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1ZpbWVvJztcbnZhciBNQVRDSF9VUkwgPSAvdmltZW9cXC5jb21cXC8uKy87XG52YXIgTUFUQ0hfRklMRV9VUkwgPSAvdmltZW9cXC5jb21cXC9leHRlcm5hbFxcL1swLTldK1xcLi4rLztcblxudmFyIFZpbWVvID0gZXhwb3J0cy5WaW1lbyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhWaW1lbywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVmltZW8oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpbWVvKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBWaW1lby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFZpbWVvKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY2FsbFBsYXllciA9IF91dGlscy5jYWxsUGxheWVyLCBfdGhpcy5kdXJhdGlvbiA9IG51bGwsIF90aGlzLmN1cnJlbnRUaW1lID0gbnVsbCwgX3RoaXMuc2Vjb25kc0xvYWRlZCA9IG51bGwsIF90aGlzLm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRWb2x1bWUoMCk7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnZvbHVtZSAhPT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRWb2x1bWUoX3RoaXMucHJvcHMudm9sdW1lKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5yZWYgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgICBfdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVmltZW8sIFt7XG4gICAga2V5OiAnbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5kdXJhdGlvbiA9IG51bGw7XG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoVmltZW8pIHtcbiAgICAgICAgaWYgKCFfdGhpczIuY29udGFpbmVyKSByZXR1cm47XG4gICAgICAgIF90aGlzMi5wbGF5ZXIgPSBuZXcgVmltZW8uUGxheWVyKF90aGlzMi5jb250YWluZXIsIF9leHRlbmRzKHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBhdXRvcGxheTogX3RoaXMyLnByb3BzLnBsYXlpbmcsXG4gICAgICAgICAgbXV0ZWQ6IF90aGlzMi5wcm9wcy5tdXRlZCxcbiAgICAgICAgICBsb29wOiBfdGhpczIucHJvcHMubG9vcCxcbiAgICAgICAgICBwbGF5c2lubGluZTogX3RoaXMyLnByb3BzLnBsYXlzaW5saW5lXG4gICAgICAgIH0sIF90aGlzMi5wcm9wcy5jb25maWcudmltZW8ucGxheWVyT3B0aW9ucykpO1xuICAgICAgICBfdGhpczIucGxheWVyLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGlmcmFtZSA9IF90aGlzMi5jb250YWluZXIucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XG4gICAgICAgICAgaWZyYW1lLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICAgIGlmcmFtZS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIH0pWydjYXRjaCddKF90aGlzMi5wcm9wcy5vbkVycm9yKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignbG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5wcm9wcy5vblJlYWR5KCk7XG4gICAgICAgICAgX3RoaXMyLnJlZnJlc2hEdXJhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigncGxheScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25QbGF5KCk7XG4gICAgICAgICAgX3RoaXMyLnJlZnJlc2hEdXJhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigncGF1c2UnLCBfdGhpczIucHJvcHMub25QYXVzZSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3NlZWtlZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5vblNlZWsoZS5zZWNvbmRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ2VuZGVkJywgX3RoaXMyLnByb3BzLm9uRW5kZWQpO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdlcnJvcicsIF90aGlzMi5wcm9wcy5vbkVycm9yKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbigndGltZXVwZGF0ZScsIGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciBzZWNvbmRzID0gX3JlZjIuc2Vjb25kcztcblxuICAgICAgICAgIF90aGlzMi5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICAgIHZhciBzZWNvbmRzID0gX3JlZjMuc2Vjb25kcztcblxuICAgICAgICAgIF90aGlzMi5zZWNvbmRzTG9hZGVkID0gc2Vjb25kcztcbiAgICAgICAgfSk7XG4gICAgICB9LCB0aGlzLnByb3BzLm9uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlZnJlc2hEdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZnJlc2hEdXJhdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB0aGlzLnBsYXllci5nZXREdXJhdGlvbigpLnRoZW4oZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIF90aGlzMy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGxheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZVsnY2F0Y2gnXSh0aGlzLnByb3BzLm9uRXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3VubG9hZCcpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlZWtUbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzZWNvbmRzKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldEN1cnJlbnRUaW1lJywgc2Vjb25kcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Vm9sdW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldFZvbHVtZScsIGZyYWN0aW9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRMb29wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TG9vcChsb29wKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldExvb3AnLCBsb29wKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZHVyYXRpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFNlY29uZHNMb2FkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2Vjb25kc0xvYWRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICBrZXk6IHRoaXMucHJvcHMudXJsLFxuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBWaW1lbztcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblZpbWVvLmRpc3BsYXlOYW1lID0gJ1ZpbWVvJztcblxuVmltZW8uY2FuUGxheSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgaWYgKE1BVENIX0ZJTEVfVVJMLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9ICgwLCBfc2luZ2xlUGxheWVyMlsnZGVmYXVsdCddKShWaW1lbyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5GYWNlYm9vayA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJy8vY29ubmVjdC5mYWNlYm9vay5uZXQvZW5fVVMvc2RrLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ0ZCJztcbnZhciBTREtfR0xPQkFMX1JFQURZID0gJ2ZiQXN5bmNJbml0JztcbnZhciBNQVRDSF9VUkwgPSAvZmFjZWJvb2tcXC5jb21cXC8oW14vP10uK1xcLyk/dmlkZW8oc3xcXC5waHApWy8/XS4qJC87XG52YXIgUExBWUVSX0lEX1BSRUZJWCA9ICdmYWNlYm9vay1wbGF5ZXItJztcblxudmFyIEZhY2Vib29rID0gZXhwb3J0cy5GYWNlYm9vayA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhGYWNlYm9vaywgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmFjZWJvb2soKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZhY2Vib29rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBGYWNlYm9vay5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZhY2Vib29rKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY2FsbFBsYXllciA9IF91dGlscy5jYWxsUGxheWVyLCBfdGhpcy5wbGF5ZXJJRCA9IFBMQVlFUl9JRF9QUkVGSVggKyAoMCwgX3V0aWxzLnJhbmRvbVN0cmluZykoKSwgX3RoaXMubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ211dGUnKTtcbiAgICB9LCBfdGhpcy51bm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCd1bm11dGUnKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGYWNlYm9vaywgW3tcbiAgICBrZXk6ICdsb2FkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwsIGlzUmVhZHkpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoaXNSZWFkeSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCwgU0RLX0dMT0JBTF9SRUFEWSkudGhlbihmdW5jdGlvbiAoRkIpIHtcbiAgICAgICAgICByZXR1cm4gRkIuWEZCTUwucGFyc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMLCBTREtfR0xPQkFMX1JFQURZKS50aGVuKGZ1bmN0aW9uIChGQikge1xuICAgICAgICBGQi5pbml0KHtcbiAgICAgICAgICBhcHBJZDogX3RoaXMyLnByb3BzLmNvbmZpZy5mYWNlYm9vay5hcHBJZCxcbiAgICAgICAgICB4ZmJtbDogdHJ1ZSxcbiAgICAgICAgICB2ZXJzaW9uOiAndjIuNSdcbiAgICAgICAgfSk7XG4gICAgICAgIEZCLkV2ZW50LnN1YnNjcmliZSgneGZibWwucmVuZGVyJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgIC8vIEhlcmUgd2Uga25vdyB0aGUgU0RLIGhhcyBsb2FkZWQsIGV2ZW4gaWYgb25SZWFkeS9vblBsYXlcbiAgICAgICAgICAvLyBpcyBub3QgY2FsbGVkIGR1ZSB0byBhIHZpZGVvIHRoYXQgY2Fubm90IGJlIGVtYmVkZGVkXG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uTG9hZGVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBGQi5FdmVudC5zdWJzY3JpYmUoJ3hmYm1sLnJlYWR5JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgIGlmIChtc2cudHlwZSA9PT0gJ3ZpZGVvJyAmJiBtc2cuaWQgPT09IF90aGlzMi5wbGF5ZXJJRCkge1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllciA9IG1zZy5pbnN0YW5jZTtcbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuc3Vic2NyaWJlKCdzdGFydGVkUGxheWluZycsIF90aGlzMi5wcm9wcy5vblBsYXkpO1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zdWJzY3JpYmUoJ3BhdXNlZCcsIF90aGlzMi5wcm9wcy5vblBhdXNlKTtcbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuc3Vic2NyaWJlKCdmaW5pc2hlZFBsYXlpbmcnLCBfdGhpczIucHJvcHMub25FbmRlZCk7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLnN1YnNjcmliZSgnc3RhcnRlZEJ1ZmZlcmluZycsIF90aGlzMi5wcm9wcy5vbkJ1ZmZlcik7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLnN1YnNjcmliZSgnZmluaXNoZWRCdWZmZXJpbmcnLCBfdGhpczIucHJvcHMub25CdWZmZXJFbmQpO1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5zdWJzY3JpYmUoJ2Vycm9yJywgX3RoaXMyLnByb3BzLm9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKCFfdGhpczIucHJvcHMubXV0ZWQpIHtcbiAgICAgICAgICAgICAgLy8gUGxheWVyIGlzIG11dGVkIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgICAgX3RoaXMyLmNhbGxQbGF5ZXIoJ3VubXV0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMyLnByb3BzLm9uUmVhZHkoKTtcblxuICAgICAgICAgICAgLy8gRm9yIHNvbWUgcmVhc29uIEZhY2Vib29rIGhhdmUgYWRkZWQgYHZpc2liaWxpdHk6IGhpZGRlbmBcbiAgICAgICAgICAgIC8vIHRvIHRoZSBpZnJhbWUgd2hlbiBhdXRvcGxheSBmYWlscywgc28gaGVyZSB3ZSBzZXQgaXQgYmFja1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoX3RoaXMyLnBsYXllcklEKS5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2VlaycsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFZvbHVtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldER1cmF0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2dldEN1cnJlbnRQb3NpdGlvbicpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFNlY29uZHNMb2FkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZWNvbmRzTG9hZGVkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIHN0eWxlID0ge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgaWQ6IHRoaXMucGxheWVySUQsXG4gICAgICAgIGNsYXNzTmFtZTogJ2ZiLXZpZGVvJyxcbiAgICAgICAgJ2RhdGEtaHJlZic6IHRoaXMucHJvcHMudXJsLFxuICAgICAgICAnZGF0YS1hdXRvcGxheSc6IHRoaXMucHJvcHMucGxheWluZyA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgICdkYXRhLWFsbG93ZnVsbHNjcmVlbic6ICd0cnVlJyxcbiAgICAgICAgJ2RhdGEtY29udHJvbHMnOiB0aGlzLnByb3BzLmNvbnRyb2xzID8gJ3RydWUnIDogJ2ZhbHNlJ1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZhY2Vib29rO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRmFjZWJvb2suZGlzcGxheU5hbWUgPSAnRmFjZWJvb2snO1xuXG5GYWNlYm9vay5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbkZhY2Vib29rLmxvb3BPbkVuZGVkID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9ICgwLCBfc2luZ2xlUGxheWVyMlsnZGVmYXVsdCddKShGYWNlYm9vayk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TdHJlYW1hYmxlID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgX3NpbmdsZVBsYXllciA9IHJlcXVpcmUoJy4uL3NpbmdsZVBsYXllcicpO1xuXG52YXIgX3NpbmdsZVBsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW5nbGVQbGF5ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNES19VUkwgPSAnLy9jZG4uZW1iZWQubHkvcGxheWVyLTAuMS4wLm1pbi5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdwbGF5ZXJqcyc7XG52YXIgTUFUQ0hfVVJMID0gL3N0cmVhbWFibGVcXC5jb21cXC8oW2EtejAtOV0rKSQvO1xuXG52YXIgU3RyZWFtYWJsZSA9IGV4cG9ydHMuU3RyZWFtYWJsZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdHJlYW1hYmxlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdHJlYW1hYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHJlYW1hYmxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBTdHJlYW1hYmxlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU3RyZWFtYWJsZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNhbGxQbGF5ZXIgPSBfdXRpbHMuY2FsbFBsYXllciwgX3RoaXMuZHVyYXRpb24gPSBudWxsLCBfdGhpcy5jdXJyZW50VGltZSA9IG51bGwsIF90aGlzLnNlY29uZHNMb2FkZWQgPSBudWxsLCBfdGhpcy5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignbXV0ZScpO1xuICAgIH0sIF90aGlzLnVubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3VubXV0ZScpO1xuICAgIH0sIF90aGlzLnJlZiA9IGZ1bmN0aW9uIChpZnJhbWUpIHtcbiAgICAgIF90aGlzLmlmcmFtZSA9IGlmcmFtZTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdHJlYW1hYmxlLCBbe1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShTREtfVVJMLCBTREtfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChwbGF5ZXJqcykge1xuICAgICAgICBpZiAoIV90aGlzMi5pZnJhbWUpIHJldHVybjtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IG5ldyBwbGF5ZXJqcy5QbGF5ZXIoX3RoaXMyLmlmcmFtZSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIuc2V0TG9vcChfdGhpczIucHJvcHMubG9vcCk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3JlYWR5JywgX3RoaXMyLnByb3BzLm9uUmVhZHkpO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdwbGF5JywgX3RoaXMyLnByb3BzLm9uUGxheSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ3BhdXNlJywgX3RoaXMyLnByb3BzLm9uUGF1c2UpO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCdzZWVrZWQnLCBfdGhpczIucHJvcHMub25TZWVrKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5vbignZW5kZWQnLCBfdGhpczIucHJvcHMub25FbmRlZCk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ2Vycm9yJywgX3RoaXMyLnByb3BzLm9uRXJyb3IpO1xuICAgICAgICBfdGhpczIucGxheWVyLm9uKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gX3JlZjIuZHVyYXRpb24sXG4gICAgICAgICAgICAgIHNlY29uZHMgPSBfcmVmMi5zZWNvbmRzO1xuXG4gICAgICAgICAgX3RoaXMyLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgICAgX3RoaXMyLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIub24oJ2J1ZmZlcmVkJywgZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgICAgdmFyIHBlcmNlbnQgPSBfcmVmMy5wZXJjZW50O1xuXG4gICAgICAgICAgaWYgKF90aGlzMi5kdXJhdGlvbikge1xuICAgICAgICAgICAgX3RoaXMyLnNlY29uZHNMb2FkZWQgPSBfdGhpczIuZHVyYXRpb24gKiBwZXJjZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfdGhpczIucHJvcHMubXV0ZWQpIHtcbiAgICAgICAgICBfdGhpczIucGxheWVyLm11dGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5wcm9wcy5vbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Q3VycmVudFRpbWUnLCBzZWNvbmRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRWb2x1bWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0Vm9sdW1lJywgZnJhY3Rpb24gKiAxMDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldExvb3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRMb29wKGxvb3ApIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2V0TG9vcCcsIGxvb3ApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldER1cmF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kdXJhdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDdXJyZW50VGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFRpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U2Vjb25kc0xvYWRlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWNvbmRzTG9hZGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBpZCA9IHRoaXMucHJvcHMudXJsLm1hdGNoKE1BVENIX1VSTClbMV07XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdpZnJhbWUnLCB7XG4gICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgIHNyYzogJ2h0dHBzOi8vc3RyZWFtYWJsZS5jb20vby8nICsgaWQsXG4gICAgICAgIGZyYW1lQm9yZGVyOiAnMCcsXG4gICAgICAgIHNjcm9sbGluZzogJ25vJyxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBhbGxvd0Z1bGxTY3JlZW46IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHJlYW1hYmxlO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuU3RyZWFtYWJsZS5kaXNwbGF5TmFtZSA9ICdTdHJlYW1hYmxlJztcblxuU3RyZWFtYWJsZS5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9ICgwLCBfc2luZ2xlUGxheWVyMlsnZGVmYXVsdCddKShTdHJlYW1hYmxlKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLldpc3RpYSA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJy8vZmFzdC53aXN0aWEuY29tL2Fzc2V0cy9leHRlcm5hbC9FLXYxLmpzJztcbnZhciBTREtfR0xPQkFMID0gJ1dpc3RpYSc7XG52YXIgTUFUQ0hfVVJMID0gLyg/Ondpc3RpYVxcLmNvbXx3aVxcLnN0KVxcLyg/Om1lZGlhc3xlbWJlZClcXC8oLiopJC87XG5cbnZhciBXaXN0aWEgPSBleHBvcnRzLldpc3RpYSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhXaXN0aWEsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFdpc3RpYSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2lzdGlhKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBXaXN0aWEuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXaXN0aWEpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jYWxsUGxheWVyID0gX3V0aWxzLmNhbGxQbGF5ZXIsIF90aGlzLm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCdtdXRlJyk7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcigndW5tdXRlJyk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoV2lzdGlhLCBbe1xuICAgIGtleTogJ2dldElEJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SUQodXJsKSB7XG4gICAgICByZXR1cm4gdXJsICYmIHVybC5tYXRjaChNQVRDSF9VUkwpWzFdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXlpbmcgPSBfcHJvcHMucGxheWluZyxcbiAgICAgICAgICBtdXRlZCA9IF9wcm9wcy5tdXRlZCxcbiAgICAgICAgICBjb250cm9scyA9IF9wcm9wcy5jb250cm9scyxcbiAgICAgICAgICBfb25SZWFkeSA9IF9wcm9wcy5vblJlYWR5LFxuICAgICAgICAgIG9uUGxheSA9IF9wcm9wcy5vblBsYXksXG4gICAgICAgICAgb25QYXVzZSA9IF9wcm9wcy5vblBhdXNlLFxuICAgICAgICAgIG9uU2VlayA9IF9wcm9wcy5vblNlZWssXG4gICAgICAgICAgb25FbmRlZCA9IF9wcm9wcy5vbkVuZGVkLFxuICAgICAgICAgIGNvbmZpZyA9IF9wcm9wcy5jb25maWcsXG4gICAgICAgICAgb25FcnJvciA9IF9wcm9wcy5vbkVycm9yO1xuXG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5fd3EgPSB3aW5kb3cuX3dxIHx8IFtdO1xuICAgICAgICB3aW5kb3cuX3dxLnB1c2goe1xuICAgICAgICAgIGlkOiBfdGhpczIuZ2V0SUQodXJsKSxcbiAgICAgICAgICBvcHRpb25zOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBhdXRvUGxheTogcGxheWluZyxcbiAgICAgICAgICAgIHNpbGVudEF1dG9QbGF5OiAnYWxsb3cnLFxuICAgICAgICAgICAgbXV0ZWQ6IG11dGVkLFxuICAgICAgICAgICAgY29udHJvbHNWaXNpYmxlT25Mb2FkOiBjb250cm9sc1xuICAgICAgICAgIH0sIGNvbmZpZy53aXN0aWEub3B0aW9ucyksXG4gICAgICAgICAgb25SZWFkeTogZnVuY3Rpb24gb25SZWFkeShwbGF5ZXIpIHtcbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgICAgICAgICBfdGhpczIudW5iaW5kKCk7XG4gICAgICAgICAgICBfdGhpczIucGxheWVyLmJpbmQoJ3BsYXknLCBvblBsYXkpO1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKCdwYXVzZScsIG9uUGF1c2UpO1xuICAgICAgICAgICAgX3RoaXMyLnBsYXllci5iaW5kKCdzZWVrJywgb25TZWVrKTtcbiAgICAgICAgICAgIF90aGlzMi5wbGF5ZXIuYmluZCgnZW5kJywgb25FbmRlZCk7XG4gICAgICAgICAgICBfb25SZWFkeSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCBvbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndW5iaW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9uUGxheSA9IF9wcm9wczIub25QbGF5LFxuICAgICAgICAgIG9uUGF1c2UgPSBfcHJvcHMyLm9uUGF1c2UsXG4gICAgICAgICAgb25TZWVrID0gX3Byb3BzMi5vblNlZWssXG4gICAgICAgICAgb25FbmRlZCA9IF9wcm9wczIub25FbmRlZDtcblxuICAgICAgdGhpcy5wbGF5ZXIudW5iaW5kKCdwbGF5Jywgb25QbGF5KTtcbiAgICAgIHRoaXMucGxheWVyLnVuYmluZCgncGF1c2UnLCBvblBhdXNlKTtcbiAgICAgIHRoaXMucGxheWVyLnVuYmluZCgnc2VlaycsIG9uU2Vlayk7XG4gICAgICB0aGlzLnBsYXllci51bmJpbmQoJ2VuZCcsIG9uRW5kZWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N0b3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncmVtb3ZlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigndGltZScsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFZvbHVtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCd2b2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UGxheWJhY2tSYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UGxheWJhY2tSYXRlKHJhdGUpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheWJhY2tSYXRlJywgcmF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ2R1cmF0aW9uJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxQbGF5ZXIoJ3RpbWUnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBpZCA9IHRoaXMuZ2V0SUQodGhpcy5wcm9wcy51cmwpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICd3aXN0aWFfZW1iZWQgd2lzdGlhX2FzeW5jXycgKyBpZDtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsga2V5OiBpZCwgY2xhc3NOYW1lOiBjbGFzc05hbWUsIHN0eWxlOiBzdHlsZSB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gV2lzdGlhO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuV2lzdGlhLmRpc3BsYXlOYW1lID0gJ1dpc3RpYSc7XG5cbldpc3RpYS5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbldpc3RpYS5sb29wT25FbmRlZCA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSAoMCwgX3NpbmdsZVBsYXllcjJbJ2RlZmF1bHQnXSkoV2lzdGlhKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlR3aXRjaCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJ2h0dHBzOi8vcGxheWVyLnR3aXRjaC50di9qcy9lbWJlZC92MS5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdUd2l0Y2gnO1xudmFyIE1BVENIX1ZJREVPX1VSTCA9IC8oPzp3d3dcXC58Z29cXC4pP3R3aXRjaFxcLnR2XFwvdmlkZW9zXFwvKFxcZCspKCR8XFw/KS87XG52YXIgTUFUQ0hfQ0hBTk5FTF9VUkwgPSAvKD86d3d3XFwufGdvXFwuKT90d2l0Y2hcXC50dlxcLyhbYS16MC05X10rKSgkfFxcPykvO1xudmFyIFBMQVlFUl9JRF9QUkVGSVggPSAndHdpdGNoLXBsYXllci0nO1xuXG52YXIgVHdpdGNoID0gZXhwb3J0cy5Ud2l0Y2ggPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVHdpdGNoLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUd2l0Y2goKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR3aXRjaCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gVHdpdGNoLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVHdpdGNoKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY2FsbFBsYXllciA9IF91dGlscy5jYWxsUGxheWVyLCBfdGhpcy5wbGF5ZXJJRCA9IFBMQVlFUl9JRF9QUkVGSVggKyAoMCwgX3V0aWxzLnJhbmRvbVN0cmluZykoKSwgX3RoaXMubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmNhbGxQbGF5ZXIoJ3NldE11dGVkJywgdHJ1ZSk7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignc2V0TXV0ZWQnLCBmYWxzZSk7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVHdpdGNoLCBbe1xuICAgIGtleTogJ2xvYWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkKHVybCwgaXNSZWFkeSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHBsYXlzaW5saW5lID0gX3Byb3BzLnBsYXlzaW5saW5lLFxuICAgICAgICAgIG9uRXJyb3IgPSBfcHJvcHMub25FcnJvcixcbiAgICAgICAgICBjb25maWcgPSBfcHJvcHMuY29uZmlnO1xuXG4gICAgICB2YXIgaXNDaGFubmVsID0gTUFUQ0hfQ0hBTk5FTF9VUkwudGVzdCh1cmwpO1xuICAgICAgdmFyIGlkID0gaXNDaGFubmVsID8gdXJsLm1hdGNoKE1BVENIX0NIQU5ORUxfVVJMKVsxXSA6IHVybC5tYXRjaChNQVRDSF9WSURFT19VUkwpWzFdO1xuICAgICAgaWYgKGlzUmVhZHkpIHtcbiAgICAgICAgaWYgKGlzQ2hhbm5lbCkge1xuICAgICAgICAgIHRoaXMucGxheWVyLnNldENoYW5uZWwoaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGxheWVyLnNldFZpZGVvKCd2JyArIGlkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoVHdpdGNoKSB7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIgPSBuZXcgVHdpdGNoLlBsYXllcihfdGhpczIucGxheWVySUQsIF9leHRlbmRzKHtcbiAgICAgICAgICB2aWRlbzogaXNDaGFubmVsID8gJycgOiBpZCxcbiAgICAgICAgICBjaGFubmVsOiBpc0NoYW5uZWwgPyBpZCA6ICcnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgcGxheXNpbmxpbmU6IHBsYXlzaW5saW5lLFxuICAgICAgICAgIGF1dG9wbGF5OiBfdGhpczIucHJvcHMucGxheWluZyxcbiAgICAgICAgICBtdXRlZDogX3RoaXMyLnByb3BzLm11dGVkXG4gICAgICAgIH0sIGNvbmZpZy50d2l0Y2gub3B0aW9ucykpO1xuICAgICAgICB2YXIgX1R3aXRjaCRQbGF5ZXIgPSBUd2l0Y2guUGxheWVyLFxuICAgICAgICAgICAgUkVBRFkgPSBfVHdpdGNoJFBsYXllci5SRUFEWSxcbiAgICAgICAgICAgIFBMQVlJTkcgPSBfVHdpdGNoJFBsYXllci5QTEFZSU5HLFxuICAgICAgICAgICAgUEFVU0UgPSBfVHdpdGNoJFBsYXllci5QQVVTRSxcbiAgICAgICAgICAgIEVOREVEID0gX1R3aXRjaCRQbGF5ZXIuRU5ERUQsXG4gICAgICAgICAgICBPTkxJTkUgPSBfVHdpdGNoJFBsYXllci5PTkxJTkUsXG4gICAgICAgICAgICBPRkZMSU5FID0gX1R3aXRjaCRQbGF5ZXIuT0ZGTElORTtcblxuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoUkVBRFksIF90aGlzMi5wcm9wcy5vblJlYWR5KTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5hZGRFdmVudExpc3RlbmVyKFBMQVlJTkcsIF90aGlzMi5wcm9wcy5vblBsYXkpO1xuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoUEFVU0UsIF90aGlzMi5wcm9wcy5vblBhdXNlKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5hZGRFdmVudExpc3RlbmVyKEVOREVELCBfdGhpczIucHJvcHMub25FbmRlZCk7XG5cbiAgICAgICAgLy8gUHJldmVudCB3ZWlyZCBpc0xvYWRpbmcgYmVoYXZpb3VyIHdoZW4gc3RyZWFtcyBhcmUgb2ZmbGluZVxuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoT05MSU5FLCBfdGhpczIucHJvcHMub25Mb2FkZWQpO1xuICAgICAgICBfdGhpczIucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoT0ZGTElORSwgX3RoaXMyLnByb3BzLm9uTG9hZGVkKTtcbiAgICAgIH0sIG9uRXJyb3IpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwbGF5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGF1c2UnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzdG9wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGF1c2UnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZWVrVG8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZWVrVG8oc2Vjb25kcykge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZWVrJywgc2Vjb25kcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Vm9sdW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGZyYWN0aW9uKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NldFZvbHVtZScsIGZyYWN0aW9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcignZ2V0RHVyYXRpb24nKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDdXJyZW50VGltZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsbFBsYXllcignZ2V0Q3VycmVudFRpbWUnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlLCBpZDogdGhpcy5wbGF5ZXJJRCB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHdpdGNoO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVHdpdGNoLmRpc3BsYXlOYW1lID0gJ1R3aXRjaCc7XG5cblR3aXRjaC5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVklERU9fVVJMLnRlc3QodXJsKSB8fCBNQVRDSF9DSEFOTkVMX1VSTC50ZXN0KHVybCk7XG59O1xuXG5Ud2l0Y2gubG9vcE9uRW5kZWQgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gKDAsIF9zaW5nbGVQbGF5ZXIyWydkZWZhdWx0J10pKFR3aXRjaCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5EYWlseU1vdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgX3NpbmdsZVBsYXllciA9IHJlcXVpcmUoJy4uL3NpbmdsZVBsYXllcicpO1xuXG52YXIgX3NpbmdsZVBsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW5nbGVQbGF5ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFNES19VUkwgPSAnaHR0cHM6Ly9hcGkuZG1jZG4ubmV0L2FsbC5qcyc7XG52YXIgU0RLX0dMT0JBTCA9ICdETSc7XG52YXIgU0RLX0dMT0JBTF9SRUFEWSA9ICdkbUFzeW5jSW5pdCc7XG52YXIgTUFUQ0hfVVJMID0gL14oPzooPzpodHRwcz8pOik/KD86XFwvXFwvKT8oPzp3d3dcXC4pPyg/Oig/OmRhaWx5bW90aW9uXFwuY29tKD86XFwvZW1iZWQpP1xcL3ZpZGVvKXxkYWlcXC5seSlcXC8oW2EtekEtWjAtOV0rKSg/Ol9bXFx3Xy1dKyk/JC87XG5cbnZhciBEYWlseU1vdGlvbiA9IGV4cG9ydHMuRGFpbHlNb3Rpb24gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRGFpbHlNb3Rpb24sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIERhaWx5TW90aW9uKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBEYWlseU1vdGlvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gRGFpbHlNb3Rpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihEYWlseU1vdGlvbikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNhbGxQbGF5ZXIgPSBfdXRpbHMuY2FsbFBsYXllciwgX3RoaXMub25EdXJhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkdXJhdGlvbiA9IF90aGlzLmdldER1cmF0aW9uKCk7XG4gICAgICBfdGhpcy5wcm9wcy5vbkR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgICB9LCBfdGhpcy5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuY2FsbFBsYXllcignc2V0TXV0ZWQnLCB0cnVlKTtcbiAgICB9LCBfdGhpcy51bm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5jYWxsUGxheWVyKCdzZXRNdXRlZCcsIGZhbHNlKTtcbiAgICB9LCBfdGhpcy5yZWYgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgICBfdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRGFpbHlNb3Rpb24sIFt7XG4gICAga2V5OiAnbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY29udHJvbHMgPSBfcHJvcHMuY29udHJvbHMsXG4gICAgICAgICAgY29uZmlnID0gX3Byb3BzLmNvbmZpZyxcbiAgICAgICAgICBvbkVycm9yID0gX3Byb3BzLm9uRXJyb3IsXG4gICAgICAgICAgcGxheWluZyA9IF9wcm9wcy5wbGF5aW5nO1xuXG4gICAgICB2YXIgX3VybCRtYXRjaCA9IHVybC5tYXRjaChNQVRDSF9VUkwpLFxuICAgICAgICAgIF91cmwkbWF0Y2gyID0gX3NsaWNlZFRvQXJyYXkoX3VybCRtYXRjaCwgMiksXG4gICAgICAgICAgaWQgPSBfdXJsJG1hdGNoMlsxXTtcblxuICAgICAgaWYgKHRoaXMucGxheWVyKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQoaWQsIHtcbiAgICAgICAgICBzdGFydDogKDAsIF91dGlscy5wYXJzZVN0YXJ0VGltZSkodXJsKSxcbiAgICAgICAgICBhdXRvcGxheTogcGxheWluZ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgKDAsIF91dGlscy5nZXRTREspKFNES19VUkwsIFNES19HTE9CQUwsIFNES19HTE9CQUxfUkVBRFksIGZ1bmN0aW9uIChETSkge1xuICAgICAgICByZXR1cm4gRE0ucGxheWVyO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoRE0pIHtcbiAgICAgICAgaWYgKCFfdGhpczIuY29udGFpbmVyKSByZXR1cm47XG4gICAgICAgIHZhciBQbGF5ZXIgPSBETS5wbGF5ZXI7XG4gICAgICAgIF90aGlzMi5wbGF5ZXIgPSBuZXcgUGxheWVyKF90aGlzMi5jb250YWluZXIsIHtcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIHZpZGVvOiBpZCxcbiAgICAgICAgICBwYXJhbXM6IF9leHRlbmRzKHtcbiAgICAgICAgICAgIGNvbnRyb2xzOiBjb250cm9scyxcbiAgICAgICAgICAgIGF1dG9wbGF5OiBfdGhpczIucHJvcHMucGxheWluZyxcbiAgICAgICAgICAgIG11dGU6IF90aGlzMi5wcm9wcy5tdXRlZCxcbiAgICAgICAgICAgIHN0YXJ0OiAoMCwgX3V0aWxzLnBhcnNlU3RhcnRUaW1lKSh1cmwpLFxuICAgICAgICAgICAgb3JpZ2luOiB3aW5kb3cubG9jYXRpb24ub3JpZ2luXG4gICAgICAgICAgfSwgY29uZmlnLmRhaWx5bW90aW9uLnBhcmFtcyksXG4gICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICBhcGlyZWFkeTogX3RoaXMyLnByb3BzLm9uUmVhZHksXG4gICAgICAgICAgICBzZWVrZWQ6IGZ1bmN0aW9uIHNlZWtlZCgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5wcm9wcy5vblNlZWsoX3RoaXMyLnBsYXllci5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlkZW9fZW5kOiBfdGhpczIucHJvcHMub25FbmRlZCxcbiAgICAgICAgICAgIGR1cmF0aW9uY2hhbmdlOiBfdGhpczIub25EdXJhdGlvbkNoYW5nZSxcbiAgICAgICAgICAgIHBhdXNlOiBfdGhpczIucHJvcHMub25QYXVzZSxcbiAgICAgICAgICAgIHBsYXlpbmc6IF90aGlzMi5wcm9wcy5vblBsYXksXG4gICAgICAgICAgICB3YWl0aW5nOiBfdGhpczIucHJvcHMub25CdWZmZXIsXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3IoZXZlbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9uRXJyb3IoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LCBvbkVycm9yKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwbGF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcigncGxheScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BhdXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BhdXNlJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMuY2FsbFBsYXllcignc2VlaycsIHNlY29uZHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFZvbHVtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZvbHVtZShmcmFjdGlvbikge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdzZXRWb2x1bWUnLCBmcmFjdGlvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5kdXJhdGlvbiB8fCBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuY3VycmVudFRpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U2Vjb25kc0xvYWRlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuYnVmZmVyZWRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBzdHlsZSA9IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JsYWNrJ1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlIH0sXG4gICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogdGhpcy5yZWYgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERhaWx5TW90aW9uO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRGFpbHlNb3Rpb24uZGlzcGxheU5hbWUgPSAnRGFpbHlNb3Rpb24nO1xuXG5EYWlseU1vdGlvbi5jYW5QbGF5ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gTUFUQ0hfVVJMLnRlc3QodXJsKTtcbn07XG5cbkRhaWx5TW90aW9uLmxvb3BPbkVuZGVkID0gdHJ1ZTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9ICgwLCBfc2luZ2xlUGxheWVyMlsnZGVmYXVsdCddKShEYWlseU1vdGlvbik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5NaXhjbG91ZCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTREtfVVJMID0gJy8vd2lkZ2V0Lm1peGNsb3VkLmNvbS9tZWRpYS9qcy93aWRnZXRBcGkuanMnO1xudmFyIFNES19HTE9CQUwgPSAnTWl4Y2xvdWQnO1xudmFyIE1BVENIX1VSTCA9IC9taXhjbG91ZFxcLmNvbVxcLyhbXi9dK1xcL1teL10rKS87XG5cbnZhciBNaXhjbG91ZCA9IGV4cG9ydHMuTWl4Y2xvdWQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWl4Y2xvdWQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1peGNsb3VkKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNaXhjbG91ZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTWl4Y2xvdWQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNaXhjbG91ZCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNhbGxQbGF5ZXIgPSBfdXRpbHMuY2FsbFBsYXllciwgX3RoaXMuZHVyYXRpb24gPSBudWxsLCBfdGhpcy5jdXJyZW50VGltZSA9IG51bGwsIF90aGlzLnNlY29uZHNMb2FkZWQgPSBudWxsLCBfdGhpcy5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gTm8gdm9sdW1lIHN1cHBvcnRcbiAgICB9LCBfdGhpcy51bm11dGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBObyB2b2x1bWUgc3VwcG9ydFxuICAgIH0sIF90aGlzLnJlZiA9IGZ1bmN0aW9uIChpZnJhbWUpIHtcbiAgICAgIF90aGlzLmlmcmFtZSA9IGlmcmFtZTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNaXhjbG91ZCwgW3tcbiAgICBrZXk6ICdsb2FkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAoMCwgX3V0aWxzLmdldFNESykoU0RLX1VSTCwgU0RLX0dMT0JBTCkudGhlbihmdW5jdGlvbiAoTWl4Y2xvdWQpIHtcbiAgICAgICAgX3RoaXMyLnBsYXllciA9IE1peGNsb3VkLlBsYXllcldpZGdldChfdGhpczIuaWZyYW1lKTtcbiAgICAgICAgX3RoaXMyLnBsYXllci5yZWFkeS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucGxheWVyLmV2ZW50cy5wbGF5Lm9uKF90aGlzMi5wcm9wcy5vblBsYXkpO1xuICAgICAgICAgIF90aGlzMi5wbGF5ZXIuZXZlbnRzLnBhdXNlLm9uKF90aGlzMi5wcm9wcy5vblBhdXNlKTtcbiAgICAgICAgICBfdGhpczIucGxheWVyLmV2ZW50cy5lbmRlZC5vbihfdGhpczIucHJvcHMub25FbmRlZCk7XG4gICAgICAgICAgX3RoaXMyLnBsYXllci5ldmVudHMuZXJyb3Iub24oX3RoaXMyLnByb3BzLmVycm9yKTtcbiAgICAgICAgICBfdGhpczIucGxheWVyLmV2ZW50cy5wcm9ncmVzcy5vbihmdW5jdGlvbiAoc2Vjb25kcywgZHVyYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzMi5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgICAgICAgICBfdGhpczIuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25SZWFkeSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGxheScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3BsYXknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwYXVzZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5jYWxsUGxheWVyKCdwYXVzZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N0b3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgLy8gTm90aGluZyB0byBkb1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlZWtUbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzZWNvbmRzKSB7XG4gICAgICB0aGlzLmNhbGxQbGF5ZXIoJ3NlZWsnLCBzZWNvbmRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRWb2x1bWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIC8vIE5vIHZvbHVtZSBzdXBwb3J0XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0RHVyYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHVybCA9IF9wcm9wcy51cmwsXG4gICAgICAgICAgY29uZmlnID0gX3Byb3BzLmNvbmZpZztcblxuICAgICAgdmFyIGlkID0gdXJsLm1hdGNoKE1BVENIX1VSTClbMV07XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgdmFyIHF1ZXJ5ID0gKDAsIF91dGlscy5xdWVyeVN0cmluZykoX2V4dGVuZHMoe30sIGNvbmZpZy5taXhjbG91ZC5vcHRpb25zLCB7XG4gICAgICAgIGZlZWQ6ICcvJyArIGlkICsgJy8nXG4gICAgICB9KSk7XG4gICAgICAvLyBXZSBoYXZlIHRvIGdpdmUgdGhlIGlmcmFtZSBhIGtleSBoZXJlIHRvIHByZXZlbnQgYVxuICAgICAgLy8gd2VpcmQgZGlhbG9nIGFwcGVhcmluZyB3aGVuIGxvYWRpbmcgYSBuZXcgdHJhY2tcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnaWZyYW1lJywge1xuICAgICAgICBrZXk6IGlkLFxuICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHNyYzogJ2h0dHBzOi8vd3d3Lm1peGNsb3VkLmNvbS93aWRnZXQvaWZyYW1lLz8nICsgcXVlcnksXG4gICAgICAgIGZyYW1lQm9yZGVyOiAnMCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNaXhjbG91ZDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk1peGNsb3VkLmRpc3BsYXlOYW1lID0gJ01peGNsb3VkJztcblxuTWl4Y2xvdWQuY2FuUGxheSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgcmV0dXJuIE1BVENIX1VSTC50ZXN0KHVybCk7XG59O1xuXG5NaXhjbG91ZC5sb29wT25FbmRlZCA9IHRydWU7XG5leHBvcnRzWydkZWZhdWx0J10gPSAoMCwgX3NpbmdsZVBsYXllcjJbJ2RlZmF1bHQnXSkoTWl4Y2xvdWQpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRmlsZVBsYXllciA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIgPSByZXF1aXJlKCcuLi9zaW5nbGVQbGF5ZXInKTtcblxudmFyIF9zaW5nbGVQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2luZ2xlUGxheWVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBJT1MgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtO1xudmFyIEFVRElPX0VYVEVOU0lPTlMgPSAvXFwuKG00YXxtcDRhfG1wZ2F8bXAyfG1wMmF8bXAzfG0yYXxtM2F8d2F2fHdlYmF8YWFjfG9nYXxzcHgpKCR8XFw/KS9pO1xudmFyIFZJREVPX0VYVEVOU0lPTlMgPSAvXFwuKG1wNHxvZ1tndl18d2VibXxtb3Z8bTR2KSgkfFxcPykvaTtcbnZhciBITFNfRVhURU5TSU9OUyA9IC9cXC4obTN1OCkoJHxcXD8pL2k7XG52YXIgSExTX1NES19VUkwgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvaGxzLmpzL1ZFUlNJT04vaGxzLm1pbi5qcyc7XG52YXIgSExTX0dMT0JBTCA9ICdIbHMnO1xudmFyIERBU0hfRVhURU5TSU9OUyA9IC9cXC4obXBkKSgkfFxcPykvaTtcbnZhciBEQVNIX1NES19VUkwgPSAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZGFzaGpzL1ZFUlNJT04vZGFzaC5hbGwubWluLmpzJztcbnZhciBEQVNIX0dMT0JBTCA9ICdkYXNoanMnO1xudmFyIE1BVENIX0RST1BCT1hfVVJMID0gL3d3d1xcLmRyb3Bib3hcXC5jb21cXC8uKy87XG5cbmZ1bmN0aW9uIGNhblBsYXkodXJsKSB7XG4gIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gdXJsW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICB2YXIgaXRlbSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgJiYgY2FuUGxheShpdGVtKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYW5QbGF5KGl0ZW0uc3JjKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvclsncmV0dXJuJ10pIHtcbiAgICAgICAgICBfaXRlcmF0b3JbJ3JldHVybiddKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICgoMCwgX3V0aWxzLmlzTWVkaWFTdHJlYW0pKHVybCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gQVVESU9fRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgVklERU9fRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgSExTX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IERBU0hfRVhURU5TSU9OUy50ZXN0KHVybCk7XG59XG5cbmZ1bmN0aW9uIGNhbkVuYWJsZVBJUCh1cmwpIHtcbiAgcmV0dXJuIGNhblBsYXkodXJsKSAmJiAhIWRvY3VtZW50LnBpY3R1cmVJblBpY3R1cmVFbmFibGVkICYmICFBVURJT19FWFRFTlNJT05TLnRlc3QodXJsKTtcbn1cblxudmFyIEZpbGVQbGF5ZXIgPSBleHBvcnRzLkZpbGVQbGF5ZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmlsZVBsYXllciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmlsZVBsYXllcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZVBsYXllcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gRmlsZVBsYXllci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEZpbGVQbGF5ZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5vbkRpc2FibGVQSVAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgb25EaXNhYmxlUElQID0gX3RoaXMkcHJvcHMub25EaXNhYmxlUElQLFxuICAgICAgICAgIHBsYXlpbmcgPSBfdGhpcyRwcm9wcy5wbGF5aW5nO1xuXG4gICAgICBvbkRpc2FibGVQSVAoZSk7XG4gICAgICBpZiAocGxheWluZykge1xuICAgICAgICBfdGhpcy5wbGF5KCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMub25TZWVrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLnByb3BzLm9uU2VlayhlLnRhcmdldC5jdXJyZW50VGltZSk7XG4gICAgfSwgX3RoaXMubXV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnBsYXllci5tdXRlZCA9IHRydWU7XG4gICAgfSwgX3RoaXMudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucGxheWVyLm11dGVkID0gZmFsc2U7XG4gICAgfSwgX3RoaXMucmVuZGVyU291cmNlRWxlbWVudCA9IGZ1bmN0aW9uIChzb3VyY2UsIGluZGV4KSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdzb3VyY2UnLCB7IGtleTogaW5kZXgsIHNyYzogc291cmNlIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdzb3VyY2UnLCBfZXh0ZW5kcyh7IGtleTogaW5kZXggfSwgc291cmNlKSk7XG4gICAgfSwgX3RoaXMucmVuZGVyVHJhY2sgPSBmdW5jdGlvbiAodHJhY2ssIGluZGV4KSB7XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3RyYWNrJywgX2V4dGVuZHMoeyBrZXk6IGluZGV4IH0sIHRyYWNrKSk7XG4gICAgfSwgX3RoaXMucmVmID0gZnVuY3Rpb24gKHBsYXllcikge1xuICAgICAgX3RoaXMucGxheWVyID0gcGxheWVyO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZpbGVQbGF5ZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XG4gICAgICBpZiAoSU9TKSB7XG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZUF1ZGlvKHRoaXMucHJvcHMpICE9PSB0aGlzLnNob3VsZFVzZUF1ZGlvKG5leHRQcm9wcykpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VBdWRpbyh0aGlzLnByb3BzKSAhPT0gdGhpcy5zaG91bGRVc2VBdWRpbyhwcmV2UHJvcHMpKSB7XG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb25SZWFkeSA9IF9wcm9wcy5vblJlYWR5LFxuICAgICAgICAgIG9uUGxheSA9IF9wcm9wcy5vblBsYXksXG4gICAgICAgICAgb25CdWZmZXIgPSBfcHJvcHMub25CdWZmZXIsXG4gICAgICAgICAgb25CdWZmZXJFbmQgPSBfcHJvcHMub25CdWZmZXJFbmQsXG4gICAgICAgICAgb25QYXVzZSA9IF9wcm9wcy5vblBhdXNlLFxuICAgICAgICAgIG9uRW5kZWQgPSBfcHJvcHMub25FbmRlZCxcbiAgICAgICAgICBvbkVycm9yID0gX3Byb3BzLm9uRXJyb3IsXG4gICAgICAgICAgcGxheXNpbmxpbmUgPSBfcHJvcHMucGxheXNpbmxpbmUsXG4gICAgICAgICAgb25FbmFibGVQSVAgPSBfcHJvcHMub25FbmFibGVQSVA7XG5cbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCBvblJlYWR5KTtcbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBvblBsYXkpO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIG9uQnVmZmVyKTtcbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCBvbkJ1ZmZlckVuZCk7XG4gICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIG9uUGF1c2UpO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgdGhpcy5vblNlZWspO1xuICAgICAgdGhpcy5wbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBvbkVuZGVkKTtcbiAgICAgIHRoaXMucGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKCdlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCBvbkVuYWJsZVBJUCk7XG4gICAgICB0aGlzLnBsYXllci5hZGRFdmVudExpc3RlbmVyKCdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLm9uRGlzYWJsZVBJUCk7XG4gICAgICBpZiAocGxheXNpbmxpbmUpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0QXR0cmlidXRlKCdwbGF5c2lubGluZScsICcnKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2V0QXR0cmlidXRlKCd3ZWJraXQtcGxheXNpbmxpbmUnLCAnJyk7XG4gICAgICAgIHRoaXMucGxheWVyLnNldEF0dHJpYnV0ZSgneDUtcGxheXNpbmxpbmUnLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9uUmVhZHkgPSBfcHJvcHMyLm9uUmVhZHksXG4gICAgICAgICAgb25QbGF5ID0gX3Byb3BzMi5vblBsYXksXG4gICAgICAgICAgb25CdWZmZXIgPSBfcHJvcHMyLm9uQnVmZmVyLFxuICAgICAgICAgIG9uQnVmZmVyRW5kID0gX3Byb3BzMi5vbkJ1ZmZlckVuZCxcbiAgICAgICAgICBvblBhdXNlID0gX3Byb3BzMi5vblBhdXNlLFxuICAgICAgICAgIG9uRW5kZWQgPSBfcHJvcHMyLm9uRW5kZWQsXG4gICAgICAgICAgb25FcnJvciA9IF9wcm9wczIub25FcnJvcixcbiAgICAgICAgICBvbkVuYWJsZVBJUCA9IF9wcm9wczIub25FbmFibGVQSVA7XG5cbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCBvblJlYWR5KTtcbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXknLCBvblBsYXkpO1xuICAgICAgdGhpcy5wbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIG9uQnVmZmVyKTtcbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCBvbkJ1ZmZlckVuZCk7XG4gICAgICB0aGlzLnBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdwYXVzZScsIG9uUGF1c2UpO1xuICAgICAgdGhpcy5wbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgdGhpcy5vblNlZWspO1xuICAgICAgdGhpcy5wbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBvbkVuZGVkKTtcbiAgICAgIHRoaXMucGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25FcnJvcik7XG4gICAgICB0aGlzLnBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCBvbkVuYWJsZVBJUCk7XG4gICAgICB0aGlzLnBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLm9uRGlzYWJsZVBJUCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkVXNlQXVkaW8nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRVc2VBdWRpbyhwcm9wcykge1xuICAgICAgaWYgKHByb3BzLmNvbmZpZy5maWxlLmZvcmNlVmlkZW8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLmNvbmZpZy5maWxlLmF0dHJpYnV0ZXMucG9zdGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gVXNlIDx2aWRlbz4gc28gdGhhdCBwb3N0ZXIgaXMgc2hvd25cbiAgICAgIH1cbiAgICAgIHJldHVybiBBVURJT19FWFRFTlNJT05TLnRlc3QocHJvcHMudXJsKSB8fCBwcm9wcy5jb25maWcuZmlsZS5mb3JjZUF1ZGlvO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZFVzZUhMUycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFVzZUhMUyh1cmwpIHtcbiAgICAgIHJldHVybiBITFNfRVhURU5TSU9OUy50ZXN0KHVybCkgJiYgIUlPUyB8fCB0aGlzLnByb3BzLmNvbmZpZy5maWxlLmZvcmNlSExTO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZFVzZURBU0gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRVc2VEQVNIKHVybCkge1xuICAgICAgcmV0dXJuIERBU0hfRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgdGhpcy5wcm9wcy5jb25maWcuZmlsZS5mb3JjZURBU0g7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbG9hZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyRjb25maWckZmlsZSA9IHRoaXMucHJvcHMuY29uZmlnLmZpbGUsXG4gICAgICAgICAgaGxzVmVyc2lvbiA9IF9wcm9wcyRjb25maWckZmlsZS5obHNWZXJzaW9uLFxuICAgICAgICAgIGRhc2hWZXJzaW9uID0gX3Byb3BzJGNvbmZpZyRmaWxlLmRhc2hWZXJzaW9uO1xuXG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VITFModXJsKSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoSExTX1NES19VUkwucmVwbGFjZSgnVkVSU0lPTicsIGhsc1ZlcnNpb24pLCBITFNfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChIbHMpIHtcbiAgICAgICAgICBfdGhpczIuaGxzID0gbmV3IEhscyhfdGhpczIucHJvcHMuY29uZmlnLmZpbGUuaGxzT3B0aW9ucyk7XG4gICAgICAgICAgX3RoaXMyLmhscy5vbihIbHMuRXZlbnRzLkVSUk9SLCBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgX3RoaXMyLnByb3BzLm9uRXJyb3IoZSwgZGF0YSwgX3RoaXMyLmhscywgSGxzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBfdGhpczIuaGxzLmxvYWRTb3VyY2UodXJsKTtcbiAgICAgICAgICBfdGhpczIuaGxzLmF0dGFjaE1lZGlhKF90aGlzMi5wbGF5ZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNob3VsZFVzZURBU0godXJsKSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoREFTSF9TREtfVVJMLnJlcGxhY2UoJ1ZFUlNJT04nLCBkYXNoVmVyc2lvbiksIERBU0hfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChkYXNoanMpIHtcbiAgICAgICAgICBfdGhpczIuZGFzaCA9IGRhc2hqcy5NZWRpYVBsYXllcigpLmNyZWF0ZSgpO1xuICAgICAgICAgIF90aGlzMi5kYXNoLmluaXRpYWxpemUoX3RoaXMyLnBsYXllciwgdXJsLCBfdGhpczIucHJvcHMucGxheWluZyk7XG4gICAgICAgICAgX3RoaXMyLmRhc2guZ2V0RGVidWcoKS5zZXRMb2dUb0Jyb3dzZXJDb25zb2xlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAvLyBXaGVuIHNldHRpbmcgbmV3IHVybHMgKDxzb3VyY2U+KSBvbiBhbiBhbHJlYWR5IGxvYWRlZCB2aWRlbyxcbiAgICAgICAgLy8gSFRNTE1lZGlhRWxlbWVudC5sb2FkKCkgaXMgbmVlZGVkIHRvIHJlc2V0IHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgIC8vIGFuZCByZXN0YXJ0IHRoZSBtZWRpYSByZXNvdXJjZS4gSnVzdCByZXBsYWNpbmcgY2hpbGRyZW4gc291cmNlXG4gICAgICAgIC8vIGRvbSBub2RlcyBpcyBub3QgZW5vdWdoXG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQoKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF91dGlscy5pc01lZGlhU3RyZWFtKSh1cmwpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuc3JjT2JqZWN0ID0gdXJsO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuc3JjID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwodXJsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3BsYXknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLnBsYXllci5wbGF5KCk7XG4gICAgICBpZiAocHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlWydjYXRjaCddKHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncGF1c2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIHRoaXMucGxheWVyLnBhdXNlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLnBsYXllci5yZW1vdmVBdHRyaWJ1dGUoJ3NyYycpO1xuICAgICAgaWYgKHRoaXMuaGxzKSB7XG4gICAgICAgIHRoaXMuaGxzLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRhc2gpIHtcbiAgICAgICAgdGhpcy5kYXNoLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2Vla1RvJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2Vla1RvKHNlY29uZHMpIHtcbiAgICAgIHRoaXMucGxheWVyLmN1cnJlbnRUaW1lID0gc2Vjb25kcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRWb2x1bWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMucGxheWVyLnZvbHVtZSA9IGZyYWN0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuYWJsZVBJUCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZVBJUCgpIHtcbiAgICAgIGlmICh0aGlzLnBsYXllci5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSAmJiBkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRWxlbWVudCAhPT0gdGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIucmVxdWVzdFBpY3R1cmVJblBpY3R1cmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlUElQJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZVBJUCgpIHtcbiAgICAgIGlmIChkb2N1bWVudC5leGl0UGljdHVyZUluUGljdHVyZSAmJiBkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRWxlbWVudCA9PT0gdGhpcy5wbGF5ZXIpIHtcbiAgICAgICAgZG9jdW1lbnQuZXhpdFBpY3R1cmVJblBpY3R1cmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRQbGF5YmFja1JhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQbGF5YmFja1JhdGUocmF0ZSkge1xuICAgICAgdGhpcy5wbGF5ZXIucGxheWJhY2tSYXRlID0gcmF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXREdXJhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldER1cmF0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgX3BsYXllciA9IHRoaXMucGxheWVyLFxuICAgICAgICAgIGR1cmF0aW9uID0gX3BsYXllci5kdXJhdGlvbixcbiAgICAgICAgICBzZWVrYWJsZSA9IF9wbGF5ZXIuc2Vla2FibGU7XG4gICAgICAvLyBvbiBpT1MsIGxpdmUgc3RyZWFtcyByZXR1cm4gSW5maW5pdHkgZm9yIHRoZSBkdXJhdGlvblxuICAgICAgLy8gc28gaW5zdGVhZCB3ZSB1c2UgdGhlIGVuZCBvZiB0aGUgc2Vla2FibGUgdGltZXJhbmdlXG5cbiAgICAgIGlmIChkdXJhdGlvbiA9PT0gSW5maW5pdHkgJiYgc2Vla2FibGUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gc2Vla2FibGUuZW5kKHNlZWthYmxlLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEN1cnJlbnRUaW1lJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudFRpbWUoKSB7XG4gICAgICBpZiAoIXRoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiB0aGlzLnBsYXllci5jdXJyZW50VGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTZWNvbmRzTG9hZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Vjb25kc0xvYWRlZCgpIHtcbiAgICAgIGlmICghdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgdmFyIGJ1ZmZlcmVkID0gdGhpcy5wbGF5ZXIuYnVmZmVyZWQ7XG5cbiAgICAgIGlmIChidWZmZXJlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICB2YXIgZW5kID0gYnVmZmVyZWQuZW5kKGJ1ZmZlcmVkLmxlbmd0aCAtIDEpO1xuICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuICAgICAgaWYgKGVuZCA+IGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBkdXJhdGlvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0U291cmNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U291cmNlKHVybCkge1xuICAgICAgdmFyIHVzZUhMUyA9IHRoaXMuc2hvdWxkVXNlSExTKHVybCk7XG4gICAgICB2YXIgdXNlREFTSCA9IHRoaXMuc2hvdWxkVXNlREFTSCh1cmwpO1xuICAgICAgaWYgKHVybCBpbnN0YW5jZW9mIEFycmF5IHx8ICgwLCBfdXRpbHMuaXNNZWRpYVN0cmVhbSkodXJsKSB8fCB1c2VITFMgfHwgdXNlREFTSCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKE1BVENIX0RST1BCT1hfVVJMLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UoJ3d3dy5kcm9wYm94LmNvbScsICdkbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB1cmwgPSBfcHJvcHMzLnVybCxcbiAgICAgICAgICBwbGF5aW5nID0gX3Byb3BzMy5wbGF5aW5nLFxuICAgICAgICAgIGxvb3AgPSBfcHJvcHMzLmxvb3AsXG4gICAgICAgICAgY29udHJvbHMgPSBfcHJvcHMzLmNvbnRyb2xzLFxuICAgICAgICAgIG11dGVkID0gX3Byb3BzMy5tdXRlZCxcbiAgICAgICAgICBjb25maWcgPSBfcHJvcHMzLmNvbmZpZyxcbiAgICAgICAgICB3aWR0aCA9IF9wcm9wczMud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3Byb3BzMy5oZWlnaHQ7XG5cbiAgICAgIHZhciB1c2VBdWRpbyA9IHRoaXMuc2hvdWxkVXNlQXVkaW8odGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudCA9IHVzZUF1ZGlvID8gJ2F1ZGlvJyA6ICd2aWRlbyc7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCA9PT0gJ2F1dG8nID8gd2lkdGggOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0ID09PSAnYXV0bycgPyBoZWlnaHQgOiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEVsZW1lbnQsXG4gICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICByZWY6IHRoaXMucmVmLFxuICAgICAgICAgIHNyYzogdGhpcy5nZXRTb3VyY2UodXJsKSxcbiAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgcHJlbG9hZDogJ2F1dG8nLFxuICAgICAgICAgIGF1dG9QbGF5OiBwbGF5aW5nIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBjb250cm9sczogY29udHJvbHMsXG4gICAgICAgICAgbXV0ZWQ6IG11dGVkLFxuICAgICAgICAgIGxvb3A6IGxvb3BcbiAgICAgICAgfSwgY29uZmlnLmZpbGUuYXR0cmlidXRlcyksXG4gICAgICAgIHVybCBpbnN0YW5jZW9mIEFycmF5ICYmIHVybC5tYXAodGhpcy5yZW5kZXJTb3VyY2VFbGVtZW50KSxcbiAgICAgICAgY29uZmlnLmZpbGUudHJhY2tzLm1hcCh0aGlzLnJlbmRlclRyYWNrKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRmlsZVBsYXllcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkZpbGVQbGF5ZXIuZGlzcGxheU5hbWUgPSAnRmlsZVBsYXllcic7XG5GaWxlUGxheWVyLmNhblBsYXkgPSBjYW5QbGF5O1xuRmlsZVBsYXllci5jYW5FbmFibGVQSVAgPSBjYW5FbmFibGVQSVA7XG5leHBvcnRzWydkZWZhdWx0J10gPSAoMCwgX3NpbmdsZVBsYXllcjJbJ2RlZmF1bHQnXSkoRmlsZVBsYXllcik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1lvdVR1YmUgPSByZXF1aXJlKCcuL1lvdVR1YmUnKTtcblxudmFyIF9Tb3VuZENsb3VkID0gcmVxdWlyZSgnLi9Tb3VuZENsb3VkJyk7XG5cbnZhciBfVmltZW8gPSByZXF1aXJlKCcuL1ZpbWVvJyk7XG5cbnZhciBfRmFjZWJvb2sgPSByZXF1aXJlKCcuL0ZhY2Vib29rJyk7XG5cbnZhciBfU3RyZWFtYWJsZSA9IHJlcXVpcmUoJy4vU3RyZWFtYWJsZScpO1xuXG52YXIgX1dpc3RpYSA9IHJlcXVpcmUoJy4vV2lzdGlhJyk7XG5cbnZhciBfVHdpdGNoID0gcmVxdWlyZSgnLi9Ud2l0Y2gnKTtcblxudmFyIF9EYWlseU1vdGlvbiA9IHJlcXVpcmUoJy4vRGFpbHlNb3Rpb24nKTtcblxudmFyIF9NaXhjbG91ZCA9IHJlcXVpcmUoJy4vTWl4Y2xvdWQnKTtcblxudmFyIF9GaWxlUGxheWVyID0gcmVxdWlyZSgnLi9GaWxlUGxheWVyJyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFtfWW91VHViZS5Zb3VUdWJlLCBfU291bmRDbG91ZC5Tb3VuZENsb3VkLCBfVmltZW8uVmltZW8sIF9GYWNlYm9vay5GYWNlYm9vaywgX1N0cmVhbWFibGUuU3RyZWFtYWJsZSwgX1dpc3RpYS5XaXN0aWEsIF9Ud2l0Y2guVHdpdGNoLCBfRGFpbHlNb3Rpb24uRGFpbHlNb3Rpb24sIF9NaXhjbG91ZC5NaXhjbG91ZCwgX0ZpbGVQbGF5ZXIuRmlsZVBsYXllcl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgSUNPTl9TSVpFID0gJzY0cHgnO1xuXG52YXIgUHJldmlldyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcmV2aWV3LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcmV2aWV3KCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcmV2aWV3KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBQcmV2aWV3Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHJldmlldykpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLm1vdW50ZWQgPSBmYWxzZSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBpbWFnZTogbnVsbFxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFByZXZpZXcsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgICB0aGlzLmZldGNoSW1hZ2UodGhpcy5wcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB1cmwgPSBfcHJvcHMudXJsLFxuICAgICAgICAgIGxpZ2h0ID0gX3Byb3BzLmxpZ2h0O1xuXG4gICAgICBpZiAodXJsICE9PSBuZXh0UHJvcHMudXJsIHx8IGxpZ2h0ICE9PSBuZXh0UHJvcHMubGlnaHQpIHtcbiAgICAgICAgdGhpcy5mZXRjaEltYWdlKG5leHRQcm9wcyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZldGNoSW1hZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEltYWdlKF9yZWYyKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHVybCA9IF9yZWYyLnVybCxcbiAgICAgICAgICBsaWdodCA9IF9yZWYyLmxpZ2h0O1xuXG4gICAgICBpZiAodHlwZW9mIGxpZ2h0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaW1hZ2U6IGxpZ2h0IH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaW1hZ2U6IG51bGwgfSk7XG4gICAgICByZXR1cm4gd2luZG93LmZldGNoKCdodHRwczovL25vZW1iZWQuY29tL2VtYmVkP3VybD0nICsgdXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS50aHVtYm5haWxfdXJsICYmIF90aGlzMi5tb3VudGVkKSB7XG4gICAgICAgICAgdmFyIGltYWdlID0gZGF0YS50aHVtYm5haWxfdXJsLnJlcGxhY2UoJ2hlaWdodD0xMDAnLCAnaGVpZ2h0PTQ4MCcpO1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IGltYWdlOiBpbWFnZSB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIG9uQ2xpY2sgPSB0aGlzLnByb3BzLm9uQ2xpY2s7XG4gICAgICB2YXIgaW1hZ2UgPSB0aGlzLnN0YXRlLmltYWdlO1xuXG4gICAgICB2YXIgZmxleENlbnRlciA9IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgICB9O1xuICAgICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgICAgcHJldmlldzogX2V4dGVuZHMoe1xuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBpbWFnZSA/ICd1cmwoJyArIGltYWdlICsgJyknIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnY292ZXInLFxuICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgICAgfSwgZmxleENlbnRlciksXG4gICAgICAgIHNoYWRvdzogX2V4dGVuZHMoe1xuICAgICAgICAgIGJhY2tncm91bmQ6ICdyYWRpYWwtZ3JhZGllbnQocmdiKDAsIDAsIDAsIDAuMyksIHJnYmEoMCwgMCwgMCwgMCkgNjAlKScsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiBJQ09OX1NJWkUsXG4gICAgICAgICAgd2lkdGg6IElDT05fU0laRSxcbiAgICAgICAgICBoZWlnaHQ6IElDT05fU0laRVxuICAgICAgICB9LCBmbGV4Q2VudGVyKSxcbiAgICAgICAgcGxheUljb246IHtcbiAgICAgICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgICAgICBib3JkZXJXaWR0aDogJzE2cHggMCAxNnB4IDI2cHgnLFxuICAgICAgICAgIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgd2hpdGUnLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6ICc3cHgnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMucHJldmlldywgY2xhc3NOYW1lOiAncmVhY3QtcGxheWVyX19wcmV2aWV3Jywgb25DbGljazogb25DbGljayB9LFxuICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc2hhZG93LCBjbGFzc05hbWU6ICdyZWFjdC1wbGF5ZXJfX3NoYWRvdycgfSxcbiAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBsYXlJY29uLCBjbGFzc05hbWU6ICdyZWFjdC1wbGF5ZXJfX3BsYXktaWNvbicgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJldmlldztcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFByZXZpZXc7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gcmVuZGVyUHJlbG9hZFBsYXllcnM7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9QbGF5ZXIgPSByZXF1aXJlKCcuL1BsYXllcicpO1xuXG52YXIgX1BsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QbGF5ZXIpO1xuXG52YXIgX1lvdVR1YmUgPSByZXF1aXJlKCcuL3BsYXllcnMvWW91VHViZScpO1xuXG52YXIgX1NvdW5kQ2xvdWQgPSByZXF1aXJlKCcuL3BsYXllcnMvU291bmRDbG91ZCcpO1xuXG52YXIgX1ZpbWVvID0gcmVxdWlyZSgnLi9wbGF5ZXJzL1ZpbWVvJyk7XG5cbnZhciBfRGFpbHlNb3Rpb24gPSByZXF1aXJlKCcuL3BsYXllcnMvRGFpbHlNb3Rpb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgUFJFTE9BRF9QTEFZRVJTID0gW3tcbiAgUGxheWVyOiBfWW91VHViZS5Zb3VUdWJlLFxuICBjb25maWdLZXk6ICd5b3V0dWJlJyxcbiAgdXJsOiAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1HbENtQUM0TUhlaydcbn0sIHtcbiAgUGxheWVyOiBfU291bmRDbG91ZC5Tb3VuZENsb3VkLFxuICBjb25maWdLZXk6ICdzb3VuZGNsb3VkJyxcbiAgdXJsOiAnaHR0cHM6Ly9zb3VuZGNsb3VkLmNvbS9zZXVjaGV1L2pvaG4tY2FnZS00MzMtOC1iaXQtdmVyc2lvbidcbn0sIHtcbiAgUGxheWVyOiBfVmltZW8uVmltZW8sXG4gIGNvbmZpZ0tleTogJ3ZpbWVvJyxcbiAgdXJsOiAnaHR0cHM6Ly92aW1lby5jb20vMzAwOTcwNTA2J1xufSwge1xuICBQbGF5ZXI6IF9EYWlseU1vdGlvbi5EYWlseU1vdGlvbixcbiAgY29uZmlnS2V5OiAnZGFpbHltb3Rpb24nLFxuICB1cmw6ICdodHRwOi8vd3d3LmRhaWx5bW90aW9uLmNvbS92aWRlby94cWRweWsnXG59XTtcblxuZnVuY3Rpb24gcmVuZGVyUHJlbG9hZFBsYXllcnModXJsLCBjb250cm9scywgY29uZmlnKSB7XG4gIHZhciBwbGF5ZXJzID0gW107XG5cbiAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gUFJFTE9BRF9QTEFZRVJTW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgdmFyIHBsYXllciA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICBpZiAoIXBsYXllci5QbGF5ZXIuY2FuUGxheSh1cmwpICYmIGNvbmZpZ1twbGF5ZXIuY29uZmlnS2V5XS5wcmVsb2FkKSB7XG4gICAgICAgIHBsYXllcnMucHVzaChfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfUGxheWVyMlsnZGVmYXVsdCddLCB7XG4gICAgICAgICAga2V5OiBwbGF5ZXIuUGxheWVyLmRpc3BsYXlOYW1lLFxuICAgICAgICAgIGFjdGl2ZVBsYXllcjogcGxheWVyLlBsYXllcixcbiAgICAgICAgICB1cmw6IHBsYXllci51cmwsXG4gICAgICAgICAgY29udHJvbHM6IGNvbnRyb2xzLFxuICAgICAgICAgIHBsYXlpbmc6IHRydWUsXG4gICAgICAgICAgbXV0ZWQ6IHRydWUsXG4gICAgICAgICAgc3R5bGU6IHsgZGlzcGxheTogJ25vbmUnIH1cbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yWydyZXR1cm4nXSkge1xuICAgICAgICBfaXRlcmF0b3JbJ3JldHVybiddKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGxheWVycztcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi9JY29uXCI7XG5pbXBvcnQgXCIuLi9zdHlsZXMvY29udHJvbHMuc2Nzc1wiO1xuXG5jb25zdCBDb250cm9scyA9ICh7XG4gIG9uUGxheVBhdXNlQ2xpY2ssXG4gIHBsYXlpbmcsXG4gIG9uUmVzZWxlY3RGaWxlLFxuICBwcm9jZXNzaW5nLFxuICBvbkVuY29kZSxcbiAgc2hvd0VuY29kZUJ0bixcbiAgY2FuRG93bmxvYWQsXG4gIG9uRG93bmxvYWRcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInJ2dC1jb250cm9scy1jb250XCI+XG4gICAgICA8YVxuICAgICAgICBjbGFzc05hbWU9XCJydnQtY29udHJvbGxlci1pdGVtXCJcbiAgICAgICAgdGl0bGU9XCJQYXVzZVwiXG4gICAgICAgIG9uQ2xpY2s9e29uUGxheVBhdXNlQ2xpY2t9XG4gICAgICA+XG4gICAgICAgIDxJY29uIG5hbWU9e3BsYXlpbmcgPyBcInBhdXNlXCIgOiBcInBsYXlcIn0gLz5cbiAgICAgIDwvYT5cblxuICAgICAgPGFcbiAgICAgICAgY2xhc3NOYW1lPVwicnZ0LWNvbnRyb2xsZXItaXRlbVwiXG4gICAgICAgIHRpdGxlPVwiU2VsZWN0IEZpbGVcIlxuICAgICAgICBvbkNsaWNrPXtvblJlc2VsZWN0RmlsZX1cbiAgICAgID5cbiAgICAgICAgPEljb24gbmFtZT1cIm11c2ljXCIgLz5cbiAgICAgIDwvYT5cbiAgICAgIHshc2hvd0VuY29kZUJ0biAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicnZ0LWNvbnRyb2xsZXItZHJvcGRvd24gcnZ0LWNvbnRyb2xsZXItbGlzdC13cmFwXCI+XG4gICAgICAgICAge2NhbkRvd25sb2FkID8gKFxuICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwicnZ0LWNvbnRyb2xsZXItaXRlbVwiIG9uQ2xpY2s9e29uRG93bmxvYWR9PlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiZG93bmxvYWRcIiAvPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJydnQtY29udHJvbGxlci1pdGVtXCIgb25DbGljaz17b25FbmNvZGV9PlxuICAgICAgICAgICAgICA8SWNvbiBuYW1lPXtwcm9jZXNzaW5nID8gXCJzcGluXCIgOiBcInJlcGxheVwifSAvPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5GaWxlUGxheWVyID0gZXhwb3J0cy5NaXhjbG91ZCA9IGV4cG9ydHMuRGFpbHlNb3Rpb24gPSBleHBvcnRzLlR3aXRjaCA9IGV4cG9ydHMuV2lzdGlhID0gZXhwb3J0cy5TdHJlYW1hYmxlID0gZXhwb3J0cy5GYWNlYm9vayA9IGV4cG9ydHMuVmltZW8gPSBleHBvcnRzLlNvdW5kQ2xvdWQgPSBleHBvcnRzLllvdVR1YmUgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfWW91VHViZSA9IHJlcXVpcmUoJy4vcGxheWVycy9Zb3VUdWJlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnWW91VHViZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1lvdVR1YmUpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX1NvdW5kQ2xvdWQgPSByZXF1aXJlKCcuL3BsYXllcnMvU291bmRDbG91ZCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1NvdW5kQ2xvdWQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Tb3VuZENsb3VkKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9WaW1lbyA9IHJlcXVpcmUoJy4vcGxheWVycy9WaW1lbycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1ZpbWVvJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVmltZW8pWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX0ZhY2Vib29rID0gcmVxdWlyZSgnLi9wbGF5ZXJzL0ZhY2Vib29rJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnRmFjZWJvb2snLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9GYWNlYm9vaylbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfU3RyZWFtYWJsZSA9IHJlcXVpcmUoJy4vcGxheWVycy9TdHJlYW1hYmxlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU3RyZWFtYWJsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0cmVhbWFibGUpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX1dpc3RpYSA9IHJlcXVpcmUoJy4vcGxheWVycy9XaXN0aWEnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdXaXN0aWEnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9XaXN0aWEpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX1R3aXRjaCA9IHJlcXVpcmUoJy4vcGxheWVycy9Ud2l0Y2gnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdUd2l0Y2gnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ud2l0Y2gpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX0RhaWx5TW90aW9uID0gcmVxdWlyZSgnLi9wbGF5ZXJzL0RhaWx5TW90aW9uJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnRGFpbHlNb3Rpb24nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYWlseU1vdGlvbilbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfTWl4Y2xvdWQgPSByZXF1aXJlKCcuL3BsYXllcnMvTWl4Y2xvdWQnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdNaXhjbG91ZCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01peGNsb3VkKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9GaWxlUGxheWVyID0gcmVxdWlyZSgnLi9wbGF5ZXJzL0ZpbGVQbGF5ZXInKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdGaWxlUGxheWVyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmlsZVBsYXllcilbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wczIgPSByZXF1aXJlKCcuL3Byb3BzJyk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBfcGxheWVycyA9IHJlcXVpcmUoJy4vcGxheWVycycpO1xuXG52YXIgX3BsYXllcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGxheWVycyk7XG5cbnZhciBfUGxheWVyNCA9IHJlcXVpcmUoJy4vUGxheWVyJyk7XG5cbnZhciBfUGxheWVyNSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BsYXllcjQpO1xuXG52YXIgX1ByZXZpZXcgPSByZXF1aXJlKCcuL1ByZXZpZXcnKTtcblxudmFyIF9QcmV2aWV3MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1ByZXZpZXcpO1xuXG52YXIgX3ByZWxvYWQgPSByZXF1aXJlKCcuL3ByZWxvYWQnKTtcblxudmFyIF9wcmVsb2FkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWxvYWQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTVVBQT1JURURfUFJPUFMgPSBPYmplY3Qua2V5cyhfcHJvcHMyLnByb3BUeXBlcyk7XG5cbnZhciBjdXN0b21QbGF5ZXJzID0gW107XG5cbnZhciBSZWFjdFBsYXllciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWFjdFBsYXllciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVhY3RQbGF5ZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlYWN0UGxheWVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBSZWFjdFBsYXllci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFJlYWN0UGxheWVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY29uZmlnID0gKDAsIF91dGlscy5nZXRDb25maWcpKF90aGlzLnByb3BzLCBfcHJvcHMyLmRlZmF1bHRQcm9wcywgdHJ1ZSksIF90aGlzLnN0YXRlID0ge1xuICAgICAgc2hvd1ByZXZpZXc6ICEhX3RoaXMucHJvcHMubGlnaHRcbiAgICB9LCBfdGhpcy5vbkNsaWNrUHJldmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgc2hvd1ByZXZpZXc6IGZhbHNlIH0pO1xuICAgIH0sIF90aGlzLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIF90aGlzLnBsYXllci5nZXREdXJhdGlvbigpO1xuICAgIH0sIF90aGlzLmdldEN1cnJlbnRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIF90aGlzLnBsYXllci5nZXRDdXJyZW50VGltZSgpO1xuICAgIH0sIF90aGlzLmdldFNlY29uZHNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX3RoaXMucGxheWVyLmdldFNlY29uZHNMb2FkZWQoKTtcbiAgICB9LCBfdGhpcy5nZXRJbnRlcm5hbFBsYXllciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdwbGF5ZXInO1xuXG4gICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gX3RoaXMucGxheWVyLmdldEludGVybmFsUGxheWVyKGtleSk7XG4gICAgfSwgX3RoaXMuc2Vla1RvID0gZnVuY3Rpb24gKGZyYWN0aW9uLCB0eXBlKSB7XG4gICAgICBpZiAoIV90aGlzLnBsYXllcikgcmV0dXJuIG51bGw7XG4gICAgICBfdGhpcy5wbGF5ZXIuc2Vla1RvKGZyYWN0aW9uLCB0eXBlKTtcbiAgICB9LCBfdGhpcy5vblJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucHJvcHMub25SZWFkeShfdGhpcyk7XG4gICAgfSwgX3RoaXMud3JhcHBlclJlZiA9IGZ1bmN0aW9uICh3cmFwcGVyKSB7XG4gICAgICBfdGhpcy53cmFwcGVyID0gd3JhcHBlcjtcbiAgICB9LCBfdGhpcy5hY3RpdmVQbGF5ZXJSZWYgPSBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICBfdGhpcy5wbGF5ZXIgPSBwbGF5ZXI7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUmVhY3RQbGF5ZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnByb2dyZXNzRnJlcXVlbmN5KSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gJ1JlYWN0UGxheWVyOiAlY3Byb2dyZXNzRnJlcXVlbmN5JWMgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSAlY3Byb2dyZXNzSW50ZXJ2YWwlYyBpbnN0ZWFkJztcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UsICdmb250LXdlaWdodDogYm9sZCcsICcnLCAnZm9udC13ZWlnaHQ6IGJvbGQnLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICByZXR1cm4gISgwLCBfdXRpbHMuaXNFcXVhbCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF91dGlscy5pc0VxdWFsKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgdGhpcy5jb25maWcgPSAoMCwgX3V0aWxzLmdldENvbmZpZykobmV4dFByb3BzLCBfcHJvcHMyLmRlZmF1bHRQcm9wcyk7XG4gICAgICBpZiAoIXRoaXMucHJvcHMubGlnaHQgJiYgbmV4dFByb3BzLmxpZ2h0KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93UHJldmlldzogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRBY3RpdmVQbGF5ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBY3RpdmVQbGF5ZXIodXJsKSB7XG4gICAgICB2YXIgX2FyciA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY3VzdG9tUGxheWVycyksIF90b0NvbnN1bWFibGVBcnJheShfcGxheWVyczJbJ2RlZmF1bHQnXSkpO1xuXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgX2Fyci5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIF9QbGF5ZXIgPSBfYXJyW19pXTtcbiAgICAgICAgaWYgKF9QbGF5ZXIuY2FuUGxheSh1cmwpKSB7XG4gICAgICAgICAgcmV0dXJuIF9QbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZhbGwgYmFjayB0byBGaWxlUGxheWVyIGlmIG5vdGhpbmcgZWxzZSBjYW4gcGxheSB0aGUgVVJMXG4gICAgICByZXR1cm4gX0ZpbGVQbGF5ZXIuRmlsZVBsYXllcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJBY3RpdmVQbGF5ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJBY3RpdmVQbGF5ZXIodXJsLCBhY3RpdmVQbGF5ZXIpIHtcbiAgICAgIGlmICghdXJsKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfUGxheWVyNVsnZGVmYXVsdCddLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywge1xuICAgICAgICBrZXk6IGFjdGl2ZVBsYXllci5kaXNwbGF5TmFtZSxcbiAgICAgICAgcmVmOiB0aGlzLmFjdGl2ZVBsYXllclJlZixcbiAgICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgICAgYWN0aXZlUGxheWVyOiBhY3RpdmVQbGF5ZXIsXG4gICAgICAgIG9uUmVhZHk6IHRoaXMub25SZWFkeVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NvcnRQbGF5ZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc29ydFBsYXllcnMoYSwgYikge1xuICAgICAgLy8gUmV0YWluIHBsYXllciBvcmRlciB0byBwcmV2ZW50IHdlaXJkIGlmcmFtZSBiZWhhdmlvdXIgd2hlbiBzd2l0Y2hpbmcgcGxheWVyc1xuICAgICAgaWYgKGEgJiYgYikge1xuICAgICAgICByZXR1cm4gYS5rZXkgPCBiLmtleSA/IC0xIDogMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHVybCA9IF9wcm9wcy51cmwsXG4gICAgICAgICAgY29udHJvbHMgPSBfcHJvcHMuY29udHJvbHMsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgd2lkdGggPSBfcHJvcHMud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3Byb3BzLmhlaWdodCxcbiAgICAgICAgICBsaWdodCA9IF9wcm9wcy5saWdodCxcbiAgICAgICAgICBXcmFwcGVyID0gX3Byb3BzLndyYXBwZXI7XG5cbiAgICAgIHZhciBzaG93UHJldmlldyA9IHRoaXMuc3RhdGUuc2hvd1ByZXZpZXcgJiYgdXJsO1xuICAgICAgdmFyIG90aGVyUHJvcHMgPSAoMCwgX3V0aWxzLm9taXQpKHRoaXMucHJvcHMsIFNVUFBPUlRFRF9QUk9QUywgX3Byb3BzMi5ERVBSRUNBVEVEX0NPTkZJR19QUk9QUyk7XG4gICAgICB2YXIgYWN0aXZlUGxheWVyID0gdGhpcy5nZXRBY3RpdmVQbGF5ZXIodXJsKTtcbiAgICAgIHZhciByZW5kZXJlZEFjdGl2ZVBsYXllciA9IHRoaXMucmVuZGVyQWN0aXZlUGxheWVyKHVybCwgYWN0aXZlUGxheWVyKTtcbiAgICAgIHZhciBwcmVsb2FkUGxheWVycyA9ICgwLCBfcHJlbG9hZDJbJ2RlZmF1bHQnXSkodXJsLCBjb250cm9scywgdGhpcy5jb25maWcpO1xuICAgICAgdmFyIHBsYXllcnMgPSBbcmVuZGVyZWRBY3RpdmVQbGF5ZXJdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocHJlbG9hZFBsYXllcnMpKS5zb3J0KHRoaXMuc29ydFBsYXllcnMpO1xuICAgICAgdmFyIHByZXZpZXcgPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfUHJldmlldzJbJ2RlZmF1bHQnXSwgeyB1cmw6IHVybCwgbGlnaHQ6IGxpZ2h0LCBvbkNsaWNrOiB0aGlzLm9uQ2xpY2tQcmV2aWV3IH0pO1xuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICBXcmFwcGVyLFxuICAgICAgICBfZXh0ZW5kcyh7IHJlZjogdGhpcy53cmFwcGVyUmVmLCBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlLCB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSkgfSwgb3RoZXJQcm9wcyksXG4gICAgICAgIHNob3dQcmV2aWV3ID8gcHJldmlldyA6IHBsYXllcnNcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlYWN0UGxheWVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuUmVhY3RQbGF5ZXIuYWRkQ3VzdG9tUGxheWVyID0gZnVuY3Rpb24gKHBsYXllcikge1xuICBjdXN0b21QbGF5ZXJzLnB1c2gocGxheWVyKTtcbn07XG5cblJlYWN0UGxheWVyLnJlbW92ZUN1c3RvbVBsYXllcnMgPSBmdW5jdGlvbiAoKSB7XG4gIGN1c3RvbVBsYXllcnMgPSBbXTtcbn07XG5cblJlYWN0UGxheWVyLmRpc3BsYXlOYW1lID0gJ1JlYWN0UGxheWVyJztcblJlYWN0UGxheWVyLnByb3BUeXBlcyA9IF9wcm9wczIucHJvcFR5cGVzO1xuUmVhY3RQbGF5ZXIuZGVmYXVsdFByb3BzID0gX3Byb3BzMi5kZWZhdWx0UHJvcHM7XG5cblJlYWN0UGxheWVyLmNhblBsYXkgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHZhciBfYXJyMiA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY3VzdG9tUGxheWVycyksIF90b0NvbnN1bWFibGVBcnJheShfcGxheWVyczJbJ2RlZmF1bHQnXSkpO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IF9hcnIyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgX1BsYXllcjIgPSBfYXJyMltfaTJdO1xuICAgIGlmIChfUGxheWVyMi5jYW5QbGF5KHVybCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5SZWFjdFBsYXllci5jYW5FbmFibGVQSVAgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHZhciBfYXJyMyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY3VzdG9tUGxheWVycyksIF90b0NvbnN1bWFibGVBcnJheShfcGxheWVyczJbJ2RlZmF1bHQnXSkpO1xuXG4gIGZvciAodmFyIF9pMyA9IDA7IF9pMyA8IF9hcnIzLmxlbmd0aDsgX2kzKyspIHtcbiAgICB2YXIgX1BsYXllcjMgPSBfYXJyM1tfaTNdO1xuICAgIGlmIChfUGxheWVyMy5jYW5FbmFibGVQSVAgJiYgX1BsYXllcjMuY2FuRW5hYmxlUElQKHVybCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBSZWFjdFBsYXllcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUmVhY3RQbGF5ZXIgZnJvbSBcInJlYWN0LXBsYXllclwiO1xuaW1wb3J0IFwiLi4vc3R5bGVzL3BsYXllci5zY3NzXCI7XG5pbXBvcnQgeyBmb3JtYXRTZWNvbmRzLCBub29wLCBsZWZ0WmVybyB9IGZyb20gXCIuLi9saWJzL3V0aWxzXCI7XG5cbmNsYXNzIFZpZGVvUGxheWVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgcGxheWluZzogdGhpcy5wcm9wcy5wbGF5VmlkZW8gfHwgZmFsc2VcbiAgfTtcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcykge1xuICAgIGNvbnN0IG5ld1RpbWVSYW5nZSA9IG5ld1Byb3BzLnRpbWVSYW5nZTtcbiAgICBjb25zdCBvbGRUaW1lUmFuZ2UgPSB0aGlzLnByb3BzLnRpbWVSYW5nZTtcbiAgICBjb25zdCBjYW5TZWVrID1cbiAgICAgIChvbGRUaW1lUmFuZ2UgJiYgbmV3VGltZVJhbmdlLnN0YXJ0ICE9PSBvbGRUaW1lUmFuZ2Uuc3RhcnQpIHx8XG4gICAgICAoIW9sZFRpbWVSYW5nZSAmJiBuZXdUaW1lUmFuZ2Uuc3RhcnQgPiAwKTtcbiAgICBpZiAoY2FuU2Vlaykge1xuICAgICAgY29uc29sZS5sb2coeyBjYW5TZWVrIH0pO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBsYXlpbmc6IGZhbHNlIH0pO1xuICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKG5ld1RpbWVSYW5nZS5zdGFydCwgXCJzZWNvbmRzXCIpO1xuICAgIH1cbiAgICBpZiAobmV3UHJvcHMucGxheVZpZGVvICE9PSB0aGlzLnByb3BzLnBsYXlWaWRlbykge1xuICAgICAgY29uc29sZS5sb2coXCJQbGF5aW5nIENoYW5nZWRcIik7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgcGxheWluZzogbmV3UHJvcHMucGxheVZpZGVvIH0pO1xuICAgIH1cbiAgfVxuICBoYW5kbGVQbGF5ZXJQcm9ncmVzcyA9IGRhdGEgPT4ge1xuICAgIGlmIChkYXRhLmxvYWRlZCkge1xuICAgICAgY29uc3QgeyBwbGF5ZWRTZWNvbmRzIH0gPSBkYXRhO1xuICAgICAgY29uc3Qgc3RhcnRUaW1lUmFuZ2UgPSB0aGlzLnByb3BzLnRpbWVSYW5nZS5zdGFydDtcbiAgICAgIGNvbnN0IGVuZFRpbWVSYW5nZSA9IHRoaXMucHJvcHMudGltZVJhbmdlLmVuZDtcbiAgICAgIGNvbnN0IHBsYXllZFNlY29uZHNJc0xvd2VyVGhhblN0YXJ0VGltZSA9IHBsYXllZFNlY29uZHMgPD0gc3RhcnRUaW1lUmFuZ2U7XG4gICAgICBjb25zdCBwbGF5ZWRTZWNvbmRzSXNHcmVhdGVyVGhhbkVuZFRpbWUgPSBwbGF5ZWRTZWNvbmRzID49IGVuZFRpbWVSYW5nZTtcbiAgICAgIGlmIChwbGF5ZWRTZWNvbmRzSXNMb3dlclRoYW5TdGFydFRpbWUpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIuc2Vla1RvKHN0YXJ0VGltZVJhbmdlLCBcInNlY29uZHNcIik7XG4gICAgICB9XG4gICAgICBpZiAocGxheWVkU2Vjb25kc0lzR3JlYXRlclRoYW5FbmRUaW1lKSB7XG4gICAgICAgIHRoaXMucGxheWVyLnNlZWtUbyhzdGFydFRpbWVSYW5nZSwgXCJzZWNvbmRzXCIpO1xuICAgICAgICAvLyB0aGlzLnNldFN0YXRlKHsgcGxheWluZzogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcm9wcy5vblBsYXllclByb2dyZXNzIHx8IG5vb3A7XG4gICAgICBoYW5kbGVyKHBsYXllZFNlY29uZHMpO1xuICAgIH1cbiAgfTtcbiAgZGlzcGxheVNlY29uZHMoc2Vjb25kcykge1xuICAgIHJldHVybiBzZWNvbmRzLnRvRml4ZWQoMikgKyBcInNcIjtcbiAgfVxuICBoYW5kbGVPblBhdXNlID0gKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnByb3BzLm9uUGxheWVyUGF1c2UgfHwgbm9vcDtcbiAgICBoYW5kbGVyKCk7XG4gIH07XG4gIGhhbmRsZU9uUGxheSA9ICgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5wcm9wcy5vblBsYXllclBsYXkgfHwgbm9vcDtcbiAgICBoYW5kbGVyKCk7XG4gIH07XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJydnQtcGxheWVyLWNvbnRcIiBvbkNvbnRleHRNZW51PXsoKSA9PiB7fX0+XG4gICAgICAgIHsvKiA8dmlkZW8gc3JjPXtwcm9wcy5zcmN9IGNvbnRyb2xzPXtmYWxzZX0gLz4gKi99XG4gICAgICAgIDxSZWFjdFBsYXllclxuICAgICAgICAgIG9uUGxheT17dGhpcy5oYW5kbGVPblBhdXNlfVxuICAgICAgICAgIG9uUGxheT17dGhpcy5oYW5kbGVPblBsYXl9XG4gICAgICAgICAgb25Qcm9ncmVzcz17dGhpcy5oYW5kbGVQbGF5ZXJQcm9ncmVzc31cbiAgICAgICAgICB1cmw9e3RoaXMucHJvcHMuc3JjfVxuICAgICAgICAgIHJlZj17ZWwgPT4gKHRoaXMucGxheWVyID0gZWwpfVxuICAgICAgICAgIHBsYXlpbmc9e3RoaXMuc3RhdGUucGxheWluZ31cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJydnQtcGxheWVyLXRpbWUtcmFuZ2UtY29udFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJ2dC1wbGF5ZXItdGltZS1yYW5nZVwiPlxuICAgICAgICAgICAgRnJvbTp7XCIgXCJ9XG4gICAgICAgICAgICA8c3Ryb25nPnt0aGlzLmRpc3BsYXlTZWNvbmRzKHRoaXMucHJvcHMudGltZVJhbmdlLnN0YXJ0KX08L3N0cm9uZz5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicnZ0LXBsYXllci10aW1lLXJhbmdlXCI+XG4gICAgICAgICAgICBUbzogPHN0cm9uZz57dGhpcy5kaXNwbGF5U2Vjb25kcyh0aGlzLnByb3BzLnRpbWVSYW5nZS5lbmQpfTwvc3Ryb25nPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvUGxheWVyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFB1cmVDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4uL3N0eWxlcy9kcmFnZ2VyLnNjc3NcIjtcblxuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmFnZ2VyIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIF9zY3JlZW5YID0gbnVsbDtcbiAgX3NjcmVlblkgPSBudWxsO1xuICBfb3ggPSBudWxsO1xuICBfb3kgPSBudWxsO1xuXG4gIGhhbmRsZU1vdXNlRG93biA9IGUgPT4ge1xuICAgIHRoaXMuX3NjcmVlblggPSBlLnNjcmVlblg7XG4gICAgdGhpcy5fc2NyZWVuWSA9IGUuc2NyZWVuWTtcbiAgICB0aGlzLl9veCA9IHRoaXMucHJvcHMueDtcbiAgICB0aGlzLl9veSA9IHRoaXMucHJvcHMueTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuaGFuZGxlTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMuaGFuZGxlTW91c2VVcCwgZmFsc2UpO1xuICB9O1xuXG4gIGhhbmRsZU1vdXNlTW92ZSA9IGUgPT4ge1xuICAgIHRoaXMucHJvcHMub25EcmFnKHtcbiAgICAgIHg6IGUuc2NyZWVuWCAtIHRoaXMuX3NjcmVlblggKyB0aGlzLl9veCxcbiAgICAgIHk6IGUuc2NyZWVuWSAtIHRoaXMuX3NjcmVlblkgKyB0aGlzLl9veVxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZU1vdXNlVXAgPSAoKSA9PiB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnByb3BzLm9uRHJhZ1N0b3AgfHwgKCgpID0+IHt9KTtcbiAgICBoYW5kbGVyKCk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17XCJydnQtZHJhZ2dlciBcIiArIHRoaXMucHJvcHMuY2xhc3NOYW1lIHx8IFwiXCJ9XG4gICAgICAgIG9uTW91c2VEb3duPXt0aGlzLmhhbmRsZU1vdXNlRG93bn1cbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBsZWZ0OiB0aGlzLnByb3BzLnggKyBcInB4XCIsXG4gICAgICAgICAgdG9wOiB0aGlzLnByb3BzLnkgKyBcInB4XCJcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBvbkRyYWcoKSB7fSxcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgeTogUHJvcFR5cGVzLm51bWJlcixcbiAgICBvbkRyYWc6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnRcbiAgfTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgRHJhZ2dlciBmcm9tIFwiLi9EcmFnZ2VyXCI7XG5pbXBvcnQgeyBub29wLCBmb3JtYXRTZWNvbmRzLCBsZWZ0WmVybyB9IGZyb20gXCIuLi9saWJzL3V0aWxzXCI7XG5cbmltcG9ydCBcIi4uL3N0eWxlcy90cmltbWVyLnNjc3NcIjtcblxuY29uc3QgVHJpbW1lck92ZXJMYXkgPSBwcm9wcyA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPVwicnZ0LXRyaW1tZXJcIlxuICAgICAgc3R5bGU9e3sgd2lkdGg6IHByb3BzLndpZHRoLCBsZWZ0OiBwcm9wcy5sZWZ0LCByaWdodDogcHJvcHMucmlnaHQgfX1cbiAgICAvPlxuICApO1xufTtcblxuY29uc3QgVGltZVN0YW1wID0gcHJvcHMgPT4ge1xuICBjb25zdCBmb3JtYXRlZCA9IGZvcm1hdFNlY29uZHMocHJvcHMudGltZSk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJydnQtcGxheWVyLWN1cnNvci1jdXJyZW50XCI+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJydnQtcGxheWVyLW51bVwiPntmb3JtYXRlZFswXX08L3NwYW4+J1xuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicnZ0LXBsYXllci1udW1cIj57Zm9ybWF0ZWRbMV19PC9zcGFuPi5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJ2dC1wbGF5ZXItbnVtXCI+e2xlZnRaZXJvKGZvcm1hdGVkWzJdLCAyKX08L3NwYW4+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jbGFzcyBUcmltbWVyIGV4dGVuZHMgUHVyZUNvbXBvbmVudCB7XG4gIHBvczJUaW1lID0gcG9zID0+IHtcbiAgICByZXR1cm4gcG9zIC8gdGhpcy5wcm9wcy53aWR0aER1cmF0aW9uUmF0aW87XG4gIH07XG5cbiAgdGltZTJwb3MgPSB0aW1lID0+IHtcbiAgICByZXR1cm4gdGltZSAqIHRoaXMucHJvcHMud2lkdGhEdXJhdGlvblJhdGlvO1xuICB9O1xuXG4gIGtlZXBJblJhbmdlID0geCA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyV2lkdGggPSB0aGlzLnByb3BzLmNvbnRhaW5lcldpZHRoO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKHggPiBjb250YWluZXJXaWR0aCkge1xuICAgICAgcmV0dXJuIGNvbnRhaW5lcldpZHRoO1xuICAgIH1cblxuICAgIHJldHVybiB4O1xuICB9O1xuXG4gIGhhbmRsZURyYWdTdGFydCA9IHBvcyA9PiB7XG4gICAgY29uc3QgcG9zMlRpbWUgPSB0aGlzLnBvczJUaW1lKHRoaXMua2VlcEluUmFuZ2UocG9zLngpKTtcbiAgICBsZXQgdGltZSA9IHBvczJUaW1lO1xuICAgIHRoaXMucHJvcHMub25TdGFydFRpbWVDaGFuZ2UodGltZSk7XG4gIH07XG4gIGhhbmRsZURyYWdFbmQgPSBwb3MgPT4ge1xuICAgIGNvbnN0IHBvczJUaW1lID0gdGhpcy5wb3MyVGltZSh0aGlzLmtlZXBJblJhbmdlKHBvcy54KSk7XG4gICAgbGV0IHRpbWUgPSBwb3MyVGltZTtcbiAgICB0aGlzLnByb3BzLm9uRW5kVGltZUNoYW5nZSh0aW1lKTtcbiAgfTtcbiAgaGFuZGxlRHJhZ1N0b3AgPSAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMucHJvcHMub25HZXREYXRhIHx8IG5vb3A7XG4gICAgaGFuZGxlcih7IHN0YXJ0OiB0aGlzLnByb3BzLnN0YXJ0VGltZSwgZW5kOiB0aGlzLnByb3BzLmVuZFRpbWUgfSk7XG4gIH07XG4gIGdldFRyaW1tZXJXaWR0aCA9IHdpZHRoID0+IHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jb250YWluZXJXaWR0aCAtIHdpZHRoO1xuICB9O1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnRpbWUycG9zKHRoaXMucHJvcHMuc3RhcnRUaW1lKTtcbiAgICBjb25zdCBlbmQgPSB0aGlzLnRpbWUycG9zKHRoaXMucHJvcHMuZW5kVGltZSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPFRyaW1tZXJPdmVyTGF5IGxlZnQ9ezB9IHdpZHRoPXtzdGFydH0gLz5cbiAgICAgICAgPERyYWdnZXJcbiAgICAgICAgICB4PXtzdGFydH1cbiAgICAgICAgICBvbkRyYWc9e3RoaXMuaGFuZGxlRHJhZ1N0YXJ0fVxuICAgICAgICAgIG9uRHJhZ1N0b3A9e3RoaXMuaGFuZGxlRHJhZ1N0b3B9XG4gICAgICAgID5cbiAgICAgICAgICA8VGltZVN0YW1wIHRpbWU9e3RoaXMucHJvcHMuc3RhcnRUaW1lfSAvPlxuICAgICAgICA8L0RyYWdnZXI+XG4gICAgICAgIDxEcmFnZ2VyXG4gICAgICAgICAgeD17ZW5kfVxuICAgICAgICAgIG9uRHJhZz17dGhpcy5oYW5kbGVEcmFnRW5kfVxuICAgICAgICAgIG9uRHJhZ1N0b3A9e3RoaXMuaGFuZGxlRHJhZ1N0b3B9XG4gICAgICAgID5cbiAgICAgICAgICA8VGltZVN0YW1wIHRpbWU9e3RoaXMucHJvcHMuZW5kVGltZX0gLz5cbiAgICAgICAgPC9EcmFnZ2VyPlxuICAgICAgICA8VHJpbW1lck92ZXJMYXkgcmlnaHQ9ezB9IHdpZHRoPXt0aGlzLmdldFRyaW1tZXJXaWR0aChlbmQpfSAvPlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWRlb1RyaW1tZXIgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgc3RhcnQ6IDAsXG4gICAgZW5kOiAwXG4gIH07XG4gIGdldCB3aWR0aER1cmF0aW9uUmF0aW8oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyV2lkdGggLyB0aGlzLnByb3BzLmR1cmF0aW9uO1xuICB9XG4gIGdldCBjb250YWluZXJXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXJSZWYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gIH1cblxuICBoYW5kbGVTdGFydFRpbWVDaGFuZ2UgPSB0aW1lID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc3RhcnQ6IHRpbWUgfSk7XG4gIH07XG4gIGhhbmRsZUdldFRyaW1EYXRhID0gKCkgPT4ge1xuICAgIGNvbnN0IHRyaW1tZXJIYW5kbGVyID0gdGhpcy5wcm9wcy5vblRyaW0gfHwgbm9vcDtcbiAgICBzZXRUaW1lb3V0KFxuICAgICAgKCkgPT5cbiAgICAgICAgdHJpbW1lckhhbmRsZXIoe1xuICAgICAgICAgIHN0YXJ0OiB0aGlzLnN0YXRlLnN0YXJ0IHx8IHRoaXMucHJvcHMudGltZVJhbmdlLnN0YXJ0LFxuICAgICAgICAgIGVuZDogdGhpcy5zdGF0ZS5lbmQgfHwgdGhpcy5wcm9wcy50aW1lUmFuZ2UuZW5kXG4gICAgICAgIH0pLFxuICAgICAgMjAwXG4gICAgKTtcbiAgfTtcbiAgaGFuZGxlRW5kVGltZUNoYW5nZSA9IHRpbWUgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBlbmQ6IHRpbWUgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJ2dC10cmltbWVyLWNvbnRcIiByZWY9e2UgPT4gKHRoaXMuY29udGFpbmVyUmVmID0gZSl9PlxuICAgICAgICB7dGhpcy5wcm9wcy5zaG93VHJpbW1lciAmJiAoXG4gICAgICAgICAgPFRyaW1tZXJcbiAgICAgICAgICAgIG9uU3RhcnRUaW1lQ2hhbmdlPXt0aGlzLmhhbmRsZVN0YXJ0VGltZUNoYW5nZX1cbiAgICAgICAgICAgIG9uRW5kVGltZUNoYW5nZT17dGhpcy5oYW5kbGVFbmRUaW1lQ2hhbmdlfVxuICAgICAgICAgICAgd2lkdGhEdXJhdGlvblJhdGlvPXt0aGlzLndpZHRoRHVyYXRpb25SYXRpb31cbiAgICAgICAgICAgIGNvbnRhaW5lcldpZHRoPXt0aGlzLmNvbnRhaW5lcldpZHRofVxuICAgICAgICAgICAgc3RhcnRUaW1lPXt0aGlzLnN0YXRlLnN0YXJ0IHx8IHRoaXMucHJvcHMudGltZVJhbmdlLnN0YXJ0fVxuICAgICAgICAgICAgZW5kVGltZT17dGhpcy5zdGF0ZS5lbmQgfHwgdGhpcy5wcm9wcy50aW1lUmFuZ2UuZW5kfVxuICAgICAgICAgICAgb25HZXREYXRhPXt0aGlzLmhhbmRsZUdldFRyaW1EYXRhfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZpZGVvVHJpbW1lcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRvbWFpbjtcblxuLy8gVGhpcyBjb25zdHJ1Y3RvciBpcyB1c2VkIHRvIHN0b3JlIGV2ZW50IGhhbmRsZXJzLiBJbnN0YW50aWF0aW5nIHRoaXMgaXNcbi8vIGZhc3RlciB0aGFuIGV4cGxpY2l0bHkgY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgdG8gZ2V0IGEgXCJjbGVhblwiIGVtcHR5XG4vLyBvYmplY3QgKHRlc3RlZCB3aXRoIHY4IHY0LjkpLlxuZnVuY3Rpb24gRXZlbnRIYW5kbGVycygpIHt9XG5FdmVudEhhbmRsZXJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IEV2ZW50RW1pdHRlcjtcbmV4cG9ydCB7RXZlbnRFbWl0dGVyfTtcblxuLy8gbm9kZWpzIG9kZGl0eVxuLy8gcmVxdWlyZSgnZXZlbnRzJykgPT09IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlclxuXG5FdmVudEVtaXR0ZXIudXNpbmdEb21haW5zID0gZmFsc2U7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZG9tYWluID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRvbWFpbiA9IG51bGw7XG4gIGlmIChFdmVudEVtaXR0ZXIudXNpbmdEb21haW5zKSB7XG4gICAgLy8gaWYgdGhlcmUgaXMgYW4gYWN0aXZlIGRvbWFpbiwgdGhlbiBhdHRhY2ggdG8gaXQuXG4gICAgaWYgKGRvbWFpbi5hY3RpdmUgJiYgISh0aGlzIGluc3RhbmNlb2YgZG9tYWluLkRvbWFpbikpIHtcbiAgICAgIHRoaXMuZG9tYWluID0gZG9tYWluLmFjdGl2ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcIm5cIiBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbi8vIFRoZXNlIHN0YW5kYWxvbmUgZW1pdCogZnVuY3Rpb25zIGFyZSB1c2VkIHRvIG9wdGltaXplIGNhbGxpbmcgb2YgZXZlbnRcbi8vIGhhbmRsZXJzIGZvciBmYXN0IGNhc2VzIGJlY2F1c2UgZW1pdCgpIGl0c2VsZiBvZnRlbiBoYXMgYSB2YXJpYWJsZSBudW1iZXIgb2Zcbi8vIGFyZ3VtZW50cyBhbmQgY2FuIGJlIGRlb3B0aW1pemVkIGJlY2F1c2Ugb2YgdGhhdC4gVGhlc2UgZnVuY3Rpb25zIGFsd2F5cyBoYXZlXG4vLyB0aGUgc2FtZSBudW1iZXIgb2YgYXJndW1lbnRzIGFuZCB0aHVzIGRvIG5vdCBnZXQgZGVvcHRpbWl6ZWQsIHNvIHRoZSBjb2RlXG4vLyBpbnNpZGUgdGhlbSBjYW4gZXhlY3V0ZSBmYXN0ZXIuXG5mdW5jdGlvbiBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSwgYXJnMikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmLCBhcmcxLCBhcmcyKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJncykge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgZXZlbnRzLCBkb21haW47XG4gIHZhciBuZWVkRG9tYWluRXhpdCA9IGZhbHNlO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PSBudWxsKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGRvbWFpbiA9IHRoaXMuZG9tYWluO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICBpZiAoZG9tYWluKSB7XG4gICAgICBpZiAoIWVyKVxuICAgICAgICBlciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudCcpO1xuICAgICAgZXIuZG9tYWluRW1pdHRlciA9IHRoaXM7XG4gICAgICBlci5kb21haW4gPSBkb21haW47XG4gICAgICBlci5kb21haW5UaHJvd24gPSBmYWxzZTtcbiAgICAgIGRvbWFpbi5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKCFoYW5kbGVyKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgaXNGbiA9IHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nO1xuICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICBzd2l0Y2ggKGxlbikge1xuICAgIC8vIGZhc3QgY2FzZXNcbiAgICBjYXNlIDE6XG4gICAgICBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCB0aGlzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIGVtaXRPbmUoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuICAgICAgYnJlYWs7XG4gICAgLy8gc2xvd2VyXG4gICAgZGVmYXVsdDpcbiAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJncyk7XG4gIH1cblxuICBpZiAobmVlZERvbWFpbkV4aXQpXG4gICAgZG9tYWluLmV4aXQoKTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmICghZXZlbnRzKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoIWV4aXN0aW5nKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgICAgaWYgKHByZXBlbmQpIHtcbiAgICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIGlmICghZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgICAgaWYgKG0gJiYgbSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSkge1xuICAgICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyB0eXBlICsgJyBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgICBlbWl0V2FybmluZyh3KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gZW1pdFdhcm5pbmcoZSkge1xuICB0eXBlb2YgY29uc29sZS53YXJuID09PSAnZnVuY3Rpb24nID8gY29uc29sZS53YXJuKGUpIDogY29uc29sZS5sb2coZSk7XG59XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBnKCkge1xuICAgIHRhcmdldC5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgcmV0dXJuIGc7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKCFsaXN0KVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IChsaXN0Lmxpc3RlbmVyICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgbGlzdFswXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoIWV2ZW50cylcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmICghZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwga2V5OyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGRvIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICAgICAgICB9IHdoaWxlIChsaXN0ZW5lcnNbMF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHZhciBldmxpc3RlbmVyO1xuICB2YXIgcmV0O1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmICghZXZlbnRzKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIHtcbiAgICBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICAgIGlmICghZXZsaXN0ZW5lcilcbiAgICAgIHJldCA9IFtdO1xuICAgIGVsc2UgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgICAgcmV0ID0gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl07XG4gICAgZWxzZVxuICAgICAgcmV0ID0gdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0Lm93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpLlxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSlcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIGkpIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJ2YXIgd29ya2VyRmlsZSA9IGZ1bmN0aW9uIHdvcmtlckZpbGUoKSB7XG4gIHZhciB3b3JrZXJQYXRoID0gXCJodHRwczovL2FyY2hpdmUub3JnL2Rvd25sb2FkL2ZmbXBlZ19hc20vZmZtcGVnX2FzbS5qc1wiO1xuICBpbXBvcnRTY3JpcHRzKHdvcmtlclBhdGgpO1xuICB2YXIgbm93ID0gRGF0ZS5ub3c7XG5cbiAgZnVuY3Rpb24gcHJpbnQodGV4dCkge1xuICAgIHBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6IFwic3Rkb3V0XCIsXG4gICAgICBkYXRhOiB0ZXh0XG4gICAgfSk7XG4gIH1cblxuICBvbm1lc3NhZ2UgPSBmdW5jdGlvbiBvbm1lc3NhZ2UoZXZlbnQpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGV2ZW50LmRhdGE7XG5cbiAgICBpZiAobWVzc2FnZS50eXBlID09PSBcImNvbW1hbmRcIikge1xuICAgICAgdmFyIE1vZHVsZSA9IHtcbiAgICAgICAgcHJpbnQ6IHByaW50LFxuICAgICAgICBwcmludEVycjogcHJpbnQsXG4gICAgICAgIGZpbGVzOiBtZXNzYWdlLmZpbGVzIHx8IFtdLFxuICAgICAgICBhcmd1bWVudHM6IG1lc3NhZ2UuYXJndW1lbnRzIHx8IFtdLFxuICAgICAgICBUT1RBTF9NRU1PUlk6IG1lc3NhZ2UuVE9UQUxfTUVNT1JZIHx8IGZhbHNlXG4gICAgICB9O1xuICAgICAgcG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcInN0YXJ0XCIsXG4gICAgICAgIGRhdGE6IE1vZHVsZS5hcmd1bWVudHMuam9pbihcIiBcIilcbiAgICAgIH0pO1xuICAgICAgcG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiBcInN0ZG91dFwiLFxuICAgICAgICBkYXRhOiBcIlJlY2VpdmVkIGNvbW1hbmQ6IFwiICsgTW9kdWxlLmFyZ3VtZW50cy5qb2luKFwiIFwiKSArIChNb2R1bGUuVE9UQUxfTUVNT1JZID8gXCIuICBQcm9jZXNzaW5nIHdpdGggXCIgKyBNb2R1bGUuVE9UQUxfTUVNT1JZICsgXCIgYml0cy5cIiA6IFwiXCIpXG4gICAgICB9KTtcbiAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICB2YXIgcmVzdWx0ID0gZmZtcGVnX3J1bihNb2R1bGUpO1xuICAgICAgdmFyIHRvdGFsVGltZSA9IG5vdygpIC0gdGltZTtcbiAgICAgIHBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogXCJzdGRvdXRcIixcbiAgICAgICAgZGF0YTogXCJGaW5pc2hlZCBwcm9jZXNzaW5nICh0b29rIFwiICsgdG90YWxUaW1lICsgXCJtcylcIlxuICAgICAgfSk7XG4gICAgICBwb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6IFwiZG9uZVwiLFxuICAgICAgICBkYXRhOiByZXN1bHQsXG4gICAgICAgIHRpbWU6IHRvdGFsVGltZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHBvc3RNZXNzYWdlKHtcbiAgICB0eXBlOiBcInJlYWR5XCJcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3b3JrZXJGaWxlOyIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP3QoZXhwb3J0cyk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCJdLHQpOnQoKGU9ZXx8c2VsZikud2Vid29ya2VyRmlsZT17fSl9KHRoaXMsZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5kZWZhdWx0PWZ1bmN0aW9uIGUodCl7aWYoZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiRmlsZSBjb250ZW50IG11c3QgZXhwb3J0IGEgZnVuY3Rpb25cIik7dmFyIG49dC50b1N0cmluZygpLG89bmV3IEJsb2IoW1wiKFwiK24rXCIpKClcIl0se3R5cGU6XCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCJ9KTtyZXR1cm4gbmV3IFdvcmtlcihVUkwuY3JlYXRlT2JqZWN0VVJMKG8pKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5cGJtUmxlQzVxY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJYWldKWGIzSnJaWElnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaWgzYjNKclpYSXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSGR2Y210bGNpQWhQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkdhV3hsSUdOdmJuUmxiblFnYlhWemRDQmxlSEJ2Y25RZ1lTQm1kVzVqZEdsdmJsd2lLVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnWTI5a1pTQTlJSGR2Y210bGNpNTBiMU4wY21sdVp5Z3BPMXh1SUNBZ0lHTnZibk4wSUdKc2IySWdQU0J1WlhjZ1FteHZZaWhiWENJb1hDSWdLeUJqYjJSbElDc2dYQ0lwS0NsY0lsMHNJSHRjYmlBZ0lDQWdJSFI1Y0dVNklGd2lZWEJ3YkdsallYUnBiMjR2YW1GMllYTmpjbWx3ZEZ3aVhHNGdJQ0FnZlNrN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCWGIzSnJaWElvVlZKTUxtTnlaV0YwWlU5aWFtVmpkRlZTVENoaWJHOWlLU2s3WEc0Z0lIMWNibjFjYmlKZExDSnVZVzFsY3lJNld5SjNiM0pyWlhJaUxDSkZjbkp2Y2lJc0ltTnZaR1VpTENKMGIxTjBjbWx1WnlJc0ltSnNiMklpTENKQ2JHOWlJaXdpZEhsd1pTSXNJbGR2Y210bGNpSXNJbFZTVENJc0ltTnlaV0YwWlU5aWFtVmpkRlZTVENKZExDSnRZWEJ3YVc1bmN5STZJbTlPUVVORkxGZEJRVmxCTERKSFFVTlpMRzFDUVVGWVFTeFJRVU5JTEVsQlFVbERMRTFCUVUwc01rTkJSVnBETEVWQlFVOUdMRVZCUVU5SExGZEJRMlJETEVWQlFVOHNTVUZCU1VNc1MwRkJTeXhEUVVGRExFbEJRVTFJTEVWQlFVOHNUMEZCVVN4RFFVTXhRMGtzUzBGQlRTeHJRMEZGUkN4SlFVRkpReXhQUVVGUFF5eEpRVUZKUXl4blFrRkJaMEpNSW4wPVxuIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBXb3JrZXJGaWxlIGZyb20gXCJ3ZWJ3b3JrZXItZmlsZVwiO1xuaW1wb3J0IHdvcmtlckZpbGUgZnJvbSBcIi4vRkZNUEVHV2ViV29ya2VyXCI7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiZXZlbnRzXCI7XG5cbnZhciBGRk1QRUdXZWJ3b3JrZXJDbGllbnQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKEZGTVBFR1dlYndvcmtlckNsaWVudCwgX0V2ZW50RW1pdHRlcik7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtXb3JrZXJ9XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7QmxvYn1cbiAgICovXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gRkZNUEVHV2Vid29ya2VyQ2xpZW50KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGRk1QRUdXZWJ3b3JrZXJDbGllbnQpO1xuXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRkZNUEVHV2Vid29ya2VyQ2xpZW50KS5jYWxsKHRoaXMpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJfd29ya2VyXCIsIHt9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJfaW5wdXRGaWxlXCIsIHt9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ3b3JrZXJJc1JlYWR5XCIsIGZhbHNlKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJyZWFkRmlsZUFzQnVmZmVyQXJyYXlcIiwgZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXNvbHZlKHRoaXMucmVzdWx0KTtcbiAgICAgICAgfTtcblxuICAgICAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmVqZWN0KHRoaXMuZXJyb3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJydW5Db21tYW5kXCIsIGZ1bmN0aW9uIChjb21tYW5kKSB7XG4gICAgICBpZiAodHlwZW9mIGNvbW1hbmQgIT09IFwic3RyaW5nXCIgfHwgIWNvbW1hbmQubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbW1hbmQgc2hvdWxkIGJlIHN0cmluZyBhbmQgbm90IGVtcHR5XCIpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb252ZXJ0SW5wdXRGaWxlVG9BcnJheUJ1ZmZlcigpLnRoZW4oZnVuY3Rpb24gKGFycmF5QnVmZmVyKSB7XG4gICAgICAgIHdoaWxlICghX3RoaXMud29ya2VySXNSZWFkeSkge31cblxuICAgICAgICB2YXIgZmlsZW5hbWUgPSBcInZpZGVvLndlYm1cIjtcbiAgICAgICAgdmFyIGlucHV0Q29tbWFuZCA9IFwiLWkgXCIuY29uY2F0KGZpbGVuYW1lLCBcIiBcIikuY29uY2F0KGNvbW1hbmQpO1xuXG4gICAgICAgIF90aGlzLndvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgdHlwZTogXCJjb21tYW5kXCIsXG4gICAgICAgICAgYXJndW1lbnRzOiBpbnB1dENvbW1hbmQuc3BsaXQoXCIgXCIpLFxuICAgICAgICAgIGZpbGVzOiBbe1xuICAgICAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpLFxuICAgICAgICAgICAgbmFtZTogZmlsZW5hbWVcbiAgICAgICAgICB9XVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcImxvZ1wiLCBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWVzc2FnZSkgPyBjb25zb2xlLmxvZy5jYWxsKG51bGwsIG1lc3NhZ2UpIDogY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwiaXNWaWRlb1wiLCBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgdmFyIGZpbGVUeXBlID0gZmlsZS50eXBlO1xuICAgICAgcmV0dXJuIGZpbGUgaW5zdGFuY2VvZiBCbG9iICYmIChmaWxlVHlwZS5pbmNsdWRlcyhcInZpZGVvXCIpIHx8IGZpbGVUeXBlLmluY2x1ZGVzKFwiYXVkaW9cIikpO1xuICAgIH0pO1xuXG4gICAgX3RoaXMuaW5pdFdlYldvcmtlcigpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZGTVBFR1dlYndvcmtlckNsaWVudCwgW3tcbiAgICBrZXk6IFwiaW5pdFdlYldvcmtlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0V2ViV29ya2VyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMud29ya2VyID0gbmV3IFdvcmtlckZpbGUod29ya2VyRmlsZSk7XG5cbiAgICAgIHRoaXMud29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IGV2ZW50LmRhdGE7XG5cbiAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PSBcInJlYWR5XCIpIHtcbiAgICAgICAgICBfdGhpczIuZW1pdChcIm9uUmVhZHlcIiwgXCJmZm1wZWctYXNtLmpzIGZpbGUgaGFzIGJlZW4gbG9hZGVkLlwiKTtcblxuICAgICAgICAgIF90aGlzMi53b3JrZXJJc1JlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT0gXCJzdGRvdXRcIikge1xuICAgICAgICAgIF90aGlzMi5lbWl0KFwib25TdGRvdXRcIiwgbWVzc2FnZS5kYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT0gXCJzdGFydFwiKSB7XG4gICAgICAgICAgX3RoaXMyLmVtaXQoXCJvbkZpbGVSZWNlaXZlZFwiLCBcIkZpbGUgUmVjZWl2ZWRcIik7XG5cbiAgICAgICAgICBsb2coXCJmaWxlIHJlY2VpdmVkIGZmbXBlZyBjb21tYW5kLlwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT0gXCJkb25lXCIpIHtcbiAgICAgICAgICBfdGhpczIuZW1pdChcIm9uRG9uZVwiLCBtZXNzYWdlLmRhdGEpOyAvLyBjb25zdCByZXN1bHQgPSBtZXNzYWdlLmRhdGFbMF07XG4gICAgICAgICAgLy8gbG9nKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpO1xuICAgICAgICAgIC8vIGNvbnN0IGJsb2IgPSBuZXcgRmlsZShbcmVzdWx0LmRhdGFdLCBcInRlc3QubXA0XCIsIHtcbiAgICAgICAgICAvLyAgIHR5cGU6IFwidmlkZW8vbXA0XCJcbiAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAvLyAvLyBsb2coYmxvYik7XG4gICAgICAgICAgLy8gcmVzb2x2ZShibG9iKTtcblxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbnB1dEZpbGVFeGlzdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5wdXRGaWxlRXhpc3RzKCkge1xuICAgICAgdmFyIGlucHV0RmlsZSA9IHRoaXMuaW5wdXRGaWxlO1xuICAgICAgcmV0dXJuICEhKGlucHV0RmlsZSAmJiBpbnB1dEZpbGUgaW5zdGFuY2VvZiBCbG9iICYmIGlucHV0RmlsZS5zaXplICYmIGlucHV0RmlsZS50eXBlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogdXNlIHdvcmtlciB0byBlbmNvZGUgYXVkaW9cbiAgICAgKiBAcGFyYW0ge0Jsb2J9IGlucHV0RmlsZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY29udmVydElucHV0RmlsZVRvQXJyYXlCdWZmZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydElucHV0RmlsZVRvQXJyYXlCdWZmZXIoKSB7XG4gICAgICBpZiAoIXRoaXMuaW5wdXRGaWxlRXhpc3RzKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgRmlsZSBoYXMgbm90IGJlZW4gc2V0XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5yZWFkRmlsZUFzQnVmZmVyQXJyYXkodGhpcy5pbnB1dEZpbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29tbWFuZFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwid29ya2VyXCIsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQod29ya2VyKSB7XG4gICAgICB0aGlzLl93b3JrZXIgPSB3b3JrZXI7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl93b3JrZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlucHV0RmlsZVwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGlucHV0RmlsZSkge1xuICAgICAgaWYgKCF0aGlzLmlzVmlkZW8oaW5wdXRGaWxlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBmaWxlIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGF1ZGlvIG9yIGEgdmlkZW9cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lucHV0RmlsZSA9IGlucHV0RmlsZTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lucHV0RmlsZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogdXNlIHdvcmtlciB0byBlbmNvZGUgYXVkaW9cbiAgICAgKiBAcGFyYW0ge0Jsb2J9IGZpbGVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICAgKi9cblxuICB9XSk7XG5cbiAgcmV0dXJuIEZGTVBFR1dlYndvcmtlckNsaWVudDtcbn0oRXZlbnRFbWl0dGVyKTtcblxuZXhwb3J0IHsgRkZNUEVHV2Vid29ya2VyQ2xpZW50IGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgV2Vid29ya2VyQ2xpZW50IGZyb20gXCIuL0ZGTVBFR1dlYldvcmtlckNsaWVudFwiO1xuaW1wb3J0IFdlYndvcmtlciBmcm9tIFwiLi9GRk1QRUdXZWJXb3JrZXJcIjtcbmV4cG9ydCB2YXIgRkZNUEVHV2Vid29ya2VyID0gV2Vid29ya2VyO1xuZXhwb3J0IHZhciBGRk1QRUdXZWJ3b3JrZXJDbGllbnQgPSBXZWJ3b3JrZXJDbGllbnQ7XG52YXIgd29ya2VyQ2xpZW50ID0gbmV3IFdlYndvcmtlckNsaWVudCgpO1xuZXhwb3J0IGRlZmF1bHQgd29ya2VyQ2xpZW50OyIsIi8qKlxuICogR2l2ZW4gYSBudW1iZXIsIHJldHVybiBhIHplcm8tZmlsbGVkIHN0cmluZy5cbiAqIEZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjY3MjgzL1xuICogQHBhcmFtICB7bnVtYmVyfSB3aWR0aFxuICogQHBhcmFtICB7bnVtYmVyfSBudW1iZXJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB6ZXJvRmlsbCAod2lkdGgsIG51bWJlciwgcGFkKSB7XG4gIGlmIChudW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCBwYWQpIHtcbiAgICAgIHJldHVybiB6ZXJvRmlsbCh3aWR0aCwgbnVtYmVyLCBwYWQpXG4gICAgfVxuICB9XG4gIGlmIChwYWQgPT09IHVuZGVmaW5lZCkgcGFkID0gJzAnXG4gIHdpZHRoIC09IG51bWJlci50b1N0cmluZygpLmxlbmd0aFxuICBpZiAod2lkdGggPiAwKSByZXR1cm4gbmV3IEFycmF5KHdpZHRoICsgKC9cXC4vLnRlc3QobnVtYmVyKSA/IDIgOiAxKSkuam9pbihwYWQpICsgbnVtYmVyXG4gIHJldHVybiBudW1iZXIgKyAnJ1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgemVyb0ZpbGwgZnJvbSBcInplcm8tZmlsbFwiO1xuXG4vKipcbiAqIE9yaWdpbmFsIGZyb20gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGgtbW0tc3NcbiAqL1xuXG4vLyBUaW1lIHVuaXRzIHdpdGggdGhlaXIgY29ycmVzcG9uZGluZyB2YWx1ZXMgaW4gbWlsaXNlY29uZHNcbmNvbnN0IEhPVVIgPSAzNjAwMDAwO1xuY29uc3QgTUlOVVRFID0gNjAwMDA7XG5jb25zdCBTRUNPTkQgPSAxMDAwO1xuXG5jb25zdCBUSU1FX0ZPUk1BVF9FUlJNU0cgPSBcIlRpbWUgZm9ybWF0IGVycm9yXCI7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBFeHBvcnQgZnVuY3Rpb25zXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1zKG1zLCBmb3JtYXQgPSBcIm1tOnNzXCIpIHtcbiAgaWYgKHR5cGVvZiBtcyAhPT0gXCJudW1iZXJcIiB8fCBOdW1iZXIuaXNOYU4obXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTmFOIGVycm9yXCIpO1xuICB9XG5cbiAgbGV0IGFic01zID0gTWF0aC5hYnMobXMpO1xuXG4gIGxldCBuZWdhdGl2ZSA9IG1zIDwgMDtcbiAgbGV0IGhvdXJzID0gTWF0aC5mbG9vcihhYnNNcyAvIEhPVVIpO1xuICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IoKGFic01zICUgSE9VUikgLyBNSU5VVEUpO1xuICBsZXQgc2Vjb25kcyA9IE1hdGguZmxvb3IoKGFic01zICUgTUlOVVRFKSAvIFNFQ09ORCk7XG4gIGxldCBtaWxpc2Vjb25kcyA9IE1hdGguZmxvb3IoYWJzTXMgJSBTRUNPTkQpO1xuXG4gIHJldHVybiBmb3JtYXRUaW1lKFxuICAgIHtcbiAgICAgIG5lZ2F0aXZlLFxuICAgICAgaG91cnMsXG4gICAgICBtaW51dGVzLFxuICAgICAgc2Vjb25kcyxcbiAgICAgIG1pbGlzZWNvbmRzXG4gICAgfSxcbiAgICBmb3JtYXRcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TKHMsIGZvcm1hdCA9IFwibW06c3NcIikge1xuICBpZiAodHlwZW9mIHMgIT09IFwibnVtYmVyXCIgfHwgTnVtYmVyLmlzTmFOKHMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTmFOIGVycm9yXCIpO1xuICB9XG5cbiAgbGV0IG1zID0gcyAqIFNFQ09ORDtcblxuICByZXR1cm4gZnJvbU1zKG1zLCBmb3JtYXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Ncyh0aW1lLCBmb3JtYXQgPSBcIm1tOnNzXCIpIHtcbiAgbGV0IHJlO1xuXG4gIGlmIChbXCJtbTpzc1wiLCBcIm1tOnNzLnNzc1wiLCBcImhoOm1tOnNzXCIsIFwiaGg6bW06c3Muc3NzXCJdLmluY2x1ZGVzKGZvcm1hdCkpIHtcbiAgICByZSA9IC9eKC0pPyg/OihcXGRcXGQrKTopPyhcXGRcXGQpOihcXGRcXGQpKFxcLlxcZCspPyQvO1xuICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gXCJoaDptbVwiKSB7XG4gICAgcmUgPSAvXigtKT8oXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSg/OihcXC5cXGQrKSk/KT8kLztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoVElNRV9GT1JNQVRfRVJSTVNHKTtcbiAgfVxuXG4gIGxldCByZXN1bHQgPSByZS5leGVjKHRpbWUpO1xuICBpZiAoIXJlc3VsdCkgdGhyb3cgbmV3IEVycm9yKCk7XG5cbiAgbGV0IG5lZ2F0aXZlID0gcmVzdWx0WzFdID09PSBcIi1cIjtcbiAgbGV0IGhvdXJzID0gcmVzdWx0WzJdIHwgMDtcbiAgbGV0IG1pbnV0ZXMgPSByZXN1bHRbM10gfCAwO1xuICBsZXQgc2Vjb25kcyA9IHJlc3VsdFs0XSB8IDA7XG4gIGxldCBtaWxpc2Vjb25kcyA9IE1hdGguZmxvb3IoKDEwMDAgKiByZXN1bHRbNV0pIHwgMCk7XG5cbiAgaWYgKG1pbnV0ZXMgPiA2MCB8fCBzZWNvbmRzID4gNjApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgKG5lZ2F0aXZlID8gLTEgOiAxKSAqXG4gICAgKGhvdXJzICogSE9VUiArIG1pbnV0ZXMgKiBNSU5VVEUgKyBzZWNvbmRzICogU0VDT05EICsgbWlsaXNlY29uZHMpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1ModGltZSwgZm9ybWF0ID0gXCJtbTpzc1wiKSB7XG4gIGxldCBtcyA9IHRvTXModGltZSwgZm9ybWF0KTtcbiAgcmV0dXJuIE1hdGguZmxvb3IobXMgLyBTRUNPTkQpO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVXRpbGl0eSBmdW5jdGlvbnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWUodGltZSwgZm9ybWF0KSB7XG4gIGxldCBzaG93TXM7XG4gIGxldCBzaG93U2M7XG4gIGxldCBzaG93SHI7XG5cbiAgc3dpdGNoIChmb3JtYXQudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgXCJoaDptbTpzcy5zc3NcIjpcbiAgICAgIHNob3dNcyA9IHRydWU7XG4gICAgICBzaG93U2MgPSB0cnVlO1xuICAgICAgc2hvd0hyID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJoaDptbTpzc1wiOlxuICAgICAgc2hvd01zID0gISF0aW1lLm1pbGlzZWNvbmRzO1xuICAgICAgc2hvd1NjID0gdHJ1ZTtcbiAgICAgIHNob3dIciA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaGg6bW1cIjpcbiAgICAgIHNob3dNcyA9ICEhdGltZS5taWxpc2Vjb25kcztcbiAgICAgIHNob3dTYyA9IHNob3dNcyB8fCAhIXRpbWUuc2Vjb25kcztcbiAgICAgIHNob3dIciA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibW06c3NcIjpcbiAgICAgIHNob3dNcyA9ICEhdGltZS5taWxpc2Vjb25kcztcbiAgICAgIHNob3dTYyA9IHRydWU7XG4gICAgICBzaG93SHIgPSAhIXRpbWUuaG91cnM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibW06c3Muc3NzXCI6XG4gICAgICBzaG93TXMgPSB0cnVlO1xuICAgICAgc2hvd1NjID0gdHJ1ZTtcbiAgICAgIHNob3dIciA9ICEhdGltZS5ob3VycztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoVElNRV9GT1JNQVRfRVJSTVNHKTtcbiAgfVxuXG4gIGxldCBoaCA9IHplcm9GaWxsKDIsIHRpbWUuaG91cnMpO1xuICBsZXQgbW0gPSB6ZXJvRmlsbCgyLCB0aW1lLm1pbnV0ZXMpO1xuICBsZXQgc3MgPSB6ZXJvRmlsbCgyLCB0aW1lLnNlY29uZHMpO1xuICBsZXQgc3NzID0gemVyb0ZpbGwoMywgdGltZS5taWxpc2Vjb25kcyk7XG5cbiAgcmV0dXJuIChcbiAgICAodGltZS5uZWdhdGl2ZSA/IFwiLVwiIDogXCJcIikgK1xuICAgIChzaG93SHJcbiAgICAgID8gc2hvd01zXG4gICAgICAgID8gYCR7aGh9OiR7bW19OiR7c3N9LiR7c3NzfWBcbiAgICAgICAgOiBzaG93U2NcbiAgICAgICAgPyBgJHtoaH06JHttbX06JHtzc31gXG4gICAgICAgIDogYCR7aGh9OiR7bW19YFxuICAgICAgOiBzaG93TXNcbiAgICAgID8gYCR7bW19OiR7c3N9LiR7c3NzfWBcbiAgICAgIDogYCR7bW19OiR7c3N9YClcbiAgKTtcbn1cbiIsImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcbmltcG9ydCB7IHJlYWREYXRhVVJMLCBhcnJheUJ1ZmZlclRvQmxvYiwgcmVhZEFycmF5QnVmZmVyIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB3b3JrZXJDbGllbnQgZnJvbSBcImZmbXBlZy13ZWJ3b3JrZXJcIjtcbmltcG9ydCB7IGZyb21TIH0gZnJvbSBcIi4vZm9ybWF0U2Vjb25kc1wiO1xuXG5jbGFzcyBXZWJWaWRlbyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKHZpZGVvRmlsZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52aWRlb0ZpbGUgPSB2aWRlb0ZpbGU7XG5cbiAgICB3b3JrZXJDbGllbnQub24oXCJvblJlYWR5XCIsICgpID0+IHRoaXMuZW1pdChcIkZGTVBFR1JlYWR5XCIpKTtcbiAgICB3b3JrZXJDbGllbnQub24oXCJvblN0ZG91dFwiLCBtc2cgPT4gdGhpcy5lbWl0KFwiRkZNUEVHU3Rkb3V0XCIsIG1zZykpO1xuICAgIHdvcmtlckNsaWVudC5vbihcIm9uRmlsZVJlY2VpdmVkXCIsICgpID0+IHRoaXMuZW1pdChcIkZGTVBFR0ZpbGVSZWNlaXZlZFwiKSk7XG4gICAgd29ya2VyQ2xpZW50Lm9uKFwib25Eb25lXCIsIGRhdGEgPT4gdGhpcy5lbWl0KFwiRkZNUEVHRG9uZVwiLCBkYXRhKSk7XG4gIH1cbiAgdHJpbVZpZGVvID0gKHN0YXJ0ID0gMCwgbGVuZ3RoKSA9PiB7XG4gICAgLy8gY29uc3Qgc3RhcnRTZWNvbmRzID0gZnJvbVMoc3RhcnQgPT09IDAgPyAxIDogc3RhcnQsIFwiaGg6bW06c3NcIik7XG4gICAgY29uc3Qgc3RhcnRTZWNvbmRzID0gZnJvbVMoc3RhcnQsIFwiaGg6bW06c3NcIik7XG4gICAgd29ya2VyQ2xpZW50LnJ1bkNvbW1hbmQoXG4gICAgICBgLXNzICR7c3RhcnRTZWNvbmRzfSAtYyBjb3B5IC10ICR7bGVuZ3RofSBzbGljZWQtb3V0cHV0Lm1wNGBcbiAgICApO1xuICB9O1xuICBfdmlkZW9EYXRhID0ge307XG4gIF92aWRlb0ZpbGUgPSBudWxsO1xuICAvKipcbiAgICogQHR5cGUge0FycmF5QnVmZmVyfVxuICAgKi9cbiAgX3ZpZGVvQnVmZmVyID0ge307XG5cbiAgcmVhZEFzQXJyYXlCdWZmZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgdGhpcy5fdmlkZW9CdWZmZXIgPSBhd2FpdCByZWFkQXJyYXlCdWZmZXIodGhpcy5fdmlkZW9GaWxlKTtcbiAgICByZXR1cm4gdGhpcy52aWRlb0J1ZmZlcjtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybnMge0Jsb2J9XG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuICBjb252ZXJ0QnVmZmVyVG9CbG9iID0gYnVmZmVyID0+IHtcbiAgICBsZXQgYmxvYiA9IG51bGw7XG4gICAgYnVmZmVyID0gYnVmZmVyIHx8IHRoaXMudmlkZW9CdWZmZXI7XG4gICAgaWYgKGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICBibG9iID0gYXJyYXlCdWZmZXJUb0Jsb2IoYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2I7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtGaWxlfVxuICAgKi9cbiAgcmVhZEFzRGF0YVVSTCA9IGFzeW5jIChidWZmZXIsIGJsb2IpID0+IHtcbiAgICBidWZmZXIgPSBidWZmZXIgfHwgdGhpcy52aWRlb0J1ZmZlcjtcbiAgICBibG9iID0gYmxvYiB8fCB0aGlzLmNvbnZlcnRCdWZmZXJUb0Jsb2IoYnVmZmVyKTtcbiAgICBsZXQgZGF0YVVSTCA9IG51bGw7XG4gICAgaWYgKGJsb2IpIHtcbiAgICAgIGRhdGFVUkwgPSBhd2FpdCByZWFkRGF0YVVSTChibG9iKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFVUkw7XG4gIH07XG5cbiAgc2V0IHZpZGVvRmlsZShmaWxlKSB7XG4gICAgaWYgKGZpbGUgJiYgZmlsZS50eXBlKSB7XG4gICAgICB3b3JrZXJDbGllbnQuaW5wdXRGaWxlID0gZmlsZTtcbiAgICB9XG4gICAgdGhpcy5fdmlkZW9GaWxlID0gZmlsZTtcbiAgfVxuXG4gIGdldCB2aWRlb0ZpbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZGVvRmlsZTtcbiAgfVxuXG4gIGdldCBkdXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlkZW9EYXRhLmR1cmF0aW9uIHx8IDA7XG4gIH1cblxuICBnZXQgdmlkZW9EYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl92aWRlb0RhdGE7XG4gIH1cbiAgZ2V0IHZpZGVvQnVmZmVyKCkge1xuICAgIHJldHVybiB0aGlzLl92aWRlb0J1ZmZlcjtcbiAgfVxuXG4gIGRlY29kZSA9IGFzeW5jIGZpbGUgPT4ge1xuICAgIHRoaXMudmlkZW9GaWxlID0gZmlsZTtcbiAgICB0aGlzLmVtaXQoXCJwcm9jZXNzaW5nRmlsZVwiKTtcbiAgICAvLyBSZWFkIEZpbGUgQXMgQXJyYXlCdWZmZXJcbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHRoaXMucmVhZEFzQXJyYXlCdWZmZXIoKTtcbiAgICAvLyBjb252ZXJ0IHRvIGRhdGFVUkxcbiAgICBjb25zdCBkYXRhVVJMID0gYXdhaXQgdGhpcy5yZWFkQXNEYXRhVVJMKGFycmF5QnVmZmVyKTtcblxuICAgIGxldCB2aWRlb09iamVjdFVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy52aWRlb0ZpbGUpO1xuICAgIGxldCB2aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTtcblxuICAgIHZpZGVvLnNyYyA9IHZpZGVvT2JqZWN0VXJsO1xuICAgIHdoaWxlIChcbiAgICAgICh2aWRlby5kdXJhdGlvbiA9PT0gSW5maW5pdHkgfHwgaXNOYU4odmlkZW8uZHVyYXRpb24pKSAmJlxuICAgICAgdmlkZW8ucmVhZHlTdGF0ZSA8IDJcbiAgICApIHtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCAxMDAwKSk7XG4gICAgICB2aWRlby5jdXJyZW50VGltZSA9IDEwMDAwMDAwICogTWF0aC5yYW5kb20oKTtcbiAgICB9XG4gICAgdGhpcy5fdmlkZW9EYXRhID0gdmlkZW87XG4gICAgdGhpcy5lbWl0KFwicHJvY2Vzc2VkRmlsZVwiKTtcbiAgICByZXR1cm4geyBkYXRhVVJMLCBhcnJheUJ1ZmZlciwgYmxvYjogdGhpcy5jb252ZXJ0QnVmZmVyVG9CbG9iKCkgfTtcbiAgfTtcblxuICBnZW5lcmF0ZUJ1ZmZlckNodW5rcyA9IChhcnJheUJ1ZmZlciA9IFtdKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBjaHVua3MgPSBbXTtcbiAgICAgICAgYXJyYXlCdWZmZXIgPSBhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoID8gYXJyYXlCdWZmZXIgOiB0aGlzLnZpZGVvQnVmZmVyO1xuICAgICAgICBjb25zdCB0eXBlZEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKTtcbiAgICAgICAgY29uc3QgbWljcm9TZWMgPSAxMDAwICogNjA7XG4gICAgICAgIGxldCBzdGFydENodW5rID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IG1pY3JvU2VjOyBpIDwgdHlwZWRCdWZmZXIuYnl0ZUxlbmd0aDsgaSArPSBtaWNyb1NlYykge1xuICAgICAgICAgIGNvbnN0IF9idWZmZXIgPSBhcnJheUJ1ZmZlci5zbGljZShzdGFydENodW5rLCBpKTtcbiAgICAgICAgICBjaHVua3MucHVzaChfYnVmZmVyKTtcbiAgICAgICAgICBzdGFydENodW5rID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKGNodW5rcyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgZXh0cmFjdEZyYW1lc0Zyb21WaWRlbyA9IChmcHMgPSAyNSkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmVtaXQoXCJleHRyYWN0aW5nRnJhbWVzXCIpO1xuICAgICAgICBsZXQgdmlkZW8gPSB0aGlzLl92aWRlb0RhdGE7XG4gICAgICAgIGxldCBzZWVrUmVzb2x2ZTtcbiAgICAgICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcihcInNlZWtlZFwiLCBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoc2Vla1Jlc29sdmUpIHNlZWtSZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgZHVyYXRpb24gPSB2aWRlby5kdXJhdGlvbjtcblxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBsZXQgW3csIGhdID0gW3ZpZGVvLnZpZGVvV2lkdGgsIHZpZGVvLnZpZGVvSGVpZ2h0XTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gdztcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGg7XG4gICAgICAgIGxldCBmcmFtZXMgPSBbXTtcbiAgICAgICAgbGV0IGludGVydmFsID0gMTI1IC8gZnBzO1xuICAgICAgICBsZXQgY3VycmVudFRpbWUgPSAwO1xuXG4gICAgICAgIHdoaWxlIChjdXJyZW50VGltZSA8IGR1cmF0aW9uKSB7XG4gICAgICAgICAgdmlkZW8uY3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyID0+IChzZWVrUmVzb2x2ZSA9IHIpKTtcblxuICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHZpZGVvLCAwLCAwLCB3LCBoKTtcbiAgICAgICAgICBsZXQgYmFzZTY0SW1hZ2VEYXRhID0gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgICAgIGZyYW1lcy5wdXNoKGJhc2U2NEltYWdlRGF0YSk7XG5cbiAgICAgICAgICBjdXJyZW50VGltZSArPSBpbnRlcnZhbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoXCJleHRyYWN0ZWRGcmFtZXNcIik7XG4gICAgICAgIHJlc29sdmUoZnJhbWVzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBXZWJWaWRlbztcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBGaWxlUGlja2VyIGZyb20gXCIuL2NvbXBvbmVudHMvRmlsZVBpY2tlclwiO1xuaW1wb3J0IFN0YXR1cyBmcm9tIFwiLi9jb21wb25lbnRzL1N0YXR1c1wiO1xuaW1wb3J0IFBsYXllciBmcm9tIFwiLi9jb21wb25lbnRzL1BsYXllclwiO1xuaW1wb3J0IENvbnRyb2xzIGZyb20gXCIuL2NvbXBvbmVudHMvQ29udHJvbHNcIjtcbmltcG9ydCBUcmltbWVyIGZyb20gXCIuL2NvbXBvbmVudHMvVHJpbW1lclwiO1xuaW1wb3J0IFdlYlZpZGVvIGZyb20gXCIuL2xpYnMvV2ViVmlkZW9cIjtcbmltcG9ydCBcIi4vc3R5bGVzL21haW4tY29udGFpbmVyLnNjc3NcIjtcbmltcG9ydCBJY29uIGZyb20gXCIuL2NvbXBvbmVudHMvSWNvblwiO1xuaW1wb3J0IHsgbm9vcCwgYXJyYXlCdWZmZXJUb0Jsb2IsIHJlYWRCbG9iVVJMLCBkb3dubG9hZCB9IGZyb20gXCIuL2xpYnMvdXRpbHNcIjtcblxuY2xhc3MgUmVhY3RWaWRlb1RyaW1tZXIgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtXZWJWaWRlb31cbiAgICovXG4gIHdlYlZpZGVvID0gbmV3IFdlYlZpZGVvKHt9KTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLndlYlZpZGVvLm9uKFwicHJvY2Vzc2luZ0ZpbGVcIiwgKCkgPT4gdGhpcy51cGRhdGVJc0RlY29kaW5nKHRydWUpKTtcbiAgICB0aGlzLndlYlZpZGVvLm9uKFwicHJvY2Vzc2VkRmlsZVwiLCAoKSA9PiB0aGlzLnVwZGF0ZUlzRGVjb2RpbmcoZmFsc2UpKTtcblxuICAgIHRoaXMud2ViVmlkZW8ub24oXCJGRk1QRUdTdGRvdXRcIiwgdGhpcy5oYW5kbGVGRk1QRUdTdGRvdXQpO1xuICAgIHRoaXMud2ViVmlkZW8ub24oXCJGRk1QRUdSZWFkeVwiLCB0aGlzLmhhbmRsZUZGTVBFR1JlYWR5KTtcbiAgICB0aGlzLndlYlZpZGVvLm9uKFwiRkZNUEVHRmlsZVJlY2VpdmVkXCIsIHRoaXMuaGFuZGxlRkZNUEVHRmlsZVJlY2VpdmVkKTtcbiAgICB0aGlzLndlYlZpZGVvLm9uKFwiRkZNUEVHRG9uZVwiLCB0aGlzLmhhbmRsZUZGTVBFR0RvbmUpO1xuICB9XG5cbiAgaGFuZGxlRkZNUEVHU3Rkb3V0ID0gbXNnID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhtc2cpO1xuICB9O1xuXG4gIGhhbmRsZUZGTVBFR1JlYWR5ID0gKCkgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKFwiRkZNUEVHIGlzIFJlYWR5XCIpO1xuICB9O1xuXG4gIGhhbmRsZUZGTVBFR0ZpbGVSZWNlaXZlZCA9ICgpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZyhcIkZGTVBFRyBSZWNlaXZlZCBGaWxlXCIpO1xuICB9O1xuXG4gIGhhbmRsZUZGTVBFR0RvbmUgPSByZXN1bHQgPT4ge1xuICAgIGNvbnN0IHZpZGVvQmxvYiA9IGFycmF5QnVmZmVyVG9CbG9iKHJlc3VsdFswXS5kYXRhKTtcbiAgICB0aGlzLmRlY29kZVZpZGVvRmlsZSh2aWRlb0Jsb2IsICgpID0+IHtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLm9uVmlkZW9FbmNvZGUgfHwgbm9vcDtcbiAgICAgIGhhbmRsZXIocmVzdWx0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlbmNvZGluZzogZmFsc2UsXG4gICAgICAgIGVuY29kZWQ6IHRydWUsXG4gICAgICAgIGVuY29kZWRWaWRlbzogdmlkZW9CbG9iXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBzdGF0ZSA9IHtcbiAgICBkZWNvZGluZzogZmFsc2UsXG4gICAgZW5jb2Rpbmc6IGZhbHNlLFxuICAgIGVuY29kZWQ6IGZhbHNlLFxuICAgIHBsYXlWaWRlbzogZmFsc2UsXG4gICAgdmlkZW9EYXRhVVJMOiBcIlwiLFxuICAgIHZpZGVvRnJhbWVzOiBbXSxcbiAgICBpc0RlY29kaW5nOiBmYWxzZSxcbiAgICB0aW1lUmFuZ2U6IHsgc3RhcnQ6IDAsIGVuZDogMCB9LFxuICAgIGVuY29kZWRWaWRlbzogbnVsbFxuICB9O1xuXG4gIHVwZGF0ZVZpZGVvRGF0YVVSTCA9IGRhdGFVUkwgPT4gdGhpcy5zZXRTdGF0ZSh7IHZpZGVvRGF0YVVSTDogZGF0YVVSTCB9KTtcblxuICB1cGRhdGVWaWRlb0ZyYW1lcyA9IGZyYW1lcyA9PiB0aGlzLnNldFN0YXRlKHsgdmlkZW9GcmFtZXM6IGZyYW1lcyB9KTtcblxuICB1cGRhdGVJc0V4dHJhY3RpbmdGcmFtZSA9IHN0YXRlID0+XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHVwZGF0ZUlzRXh0cmFjdGluZ0ZyYW1lOiBzdGF0ZSB9KTtcblxuICB1cGRhdGVJc0RlY29kaW5nID0gc3RhdGUgPT4gdGhpcy5zZXRTdGF0ZSh7IHVwZGF0ZUlzRGVjb2Rpbmc6IHN0YXRlIH0pO1xuICB1cGRhdGVWaWRlb0R1cmF0aW9uID0gZHVyYXRpb24gPT5cbiAgICB0aGlzLnNldFN0YXRlKHsgdXBkYXRlVmlkZW9EdXJhdGlvbjogZHVyYXRpb24gfSk7XG5cbiAgZGVjb2RlVmlkZW9GaWxlID0gKGZpbGUsIGRvbmVDQiA9IG5vb3ApID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGVjb2Rpbmc6IHRydWUgfSk7XG4gICAgY29uc3Qgd2ViVmlkZW8gPSB0aGlzLndlYlZpZGVvO1xuICAgIHdlYlZpZGVvLnZpZGVvRmlsZSA9IGZpbGU7XG4gICAgd2ViVmlkZW8uZGVjb2RlKGZpbGUpLnRoZW4oKHsgYmxvYiwgYXJyYXlCdWZmZXIsIGRhdGFVUkwgfSkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRlY29kaW5nOiBmYWxzZSB9KTtcbiAgICAgIHRoaXMudXBkYXRlVmlkZW9EYXRhVVJMKGRhdGFVUkwpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRpbWVSYW5nZTogeyBzdGFydDogMCwgZW5kOiB0aGlzLndlYlZpZGVvLnZpZGVvRGF0YS5kdXJhdGlvbiB9XG4gICAgICB9KTtcbiAgICAgIGRvbmVDQigpO1xuICAgIH0pO1xuICB9O1xuICBoYW5kbGVGaWxlU2VsZWN0ZWQgPSBmaWxlID0+IHtcbiAgICB0aGlzLmRlY29kZVZpZGVvRmlsZShmaWxlKTtcbiAgfTtcblxuICBoYW5kbGVWaWRlb1RyaW0gPSB0aW1lID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdGltZVJhbmdlOiB0aW1lIH0pO1xuICB9O1xuICBoYW5kbGVFbmNvZGVWaWRlbyA9ICgpID0+IHtcbiAgICBjb25zdCB7IHRpbWVSYW5nZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnNldFN0YXRlKHsgZW5jb2Rpbmc6IHRydWUsIHZpZGVvRGF0YVVSTDogXCJcIiB9KTtcbiAgICBjb25zdCB0aW1lRGlmZmVyZW5jZSA9IHRpbWVSYW5nZS5lbmQgLSB0aW1lUmFuZ2Uuc3RhcnQ7XG4gICAgLy8gY29uc29sZS5sb2codGltZVJhbmdlKTtcbiAgICB0aGlzLndlYlZpZGVvLnRyaW1WaWRlbyh0aW1lUmFuZ2Uuc3RhcnQsIHRpbWVEaWZmZXJlbmNlKTtcbiAgfTtcbiAgaGFuZGxlUGxheVBhdXNlVmlkZW8gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBwbGF5VmlkZW8gfSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBsYXlWaWRlbzogIXBsYXlWaWRlbyB9KTtcbiAgfTtcbiAgaGFuZGxlUGxheWVyUGF1c2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBsYXlWaWRlbzogZmFsc2UgfSk7XG4gIH07XG4gIGhhbmRsZVBsYXllclBsYXkgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBsYXlWaWRlbzogdHJ1ZSB9KTtcbiAgfTtcbiAgaGFuZGxlUmVzZWxlY3RGaWxlID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0ge1xuICAgICAgZGVjb2Rpbmc6IGZhbHNlLFxuICAgICAgZW5jb2Rpbmc6IGZhbHNlLFxuICAgICAgZW5jb2RlZDogZmFsc2UsXG4gICAgICBlbmNvZGVkVmlkZW86IG51bGwsXG4gICAgICBwbGF5VmlkZW86IGZhbHNlLFxuICAgICAgdmlkZW9EYXRhVVJMOiBcIlwiLFxuICAgICAgdmlkZW9GcmFtZXM6IFtdLFxuICAgICAgaXNFeHRyYWN0aW5nRnJhbWU6IGZhbHNlLFxuICAgICAgaXNEZWNvZGluZzogZmFsc2UsXG4gICAgICB0aW1lUmFuZ2U6IHRoaXMucHJvcHMudGltZVJhbmdlIHx8IHsgc3RhcnQ6IDAsIGVuZDogMCB9XG4gICAgfTtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTtcbiAgfTtcbiAgVmlkZW9QbGF5ZXJXaXRoVHJpbW1lciA9ICh7IHNob3dUcmltbWVyIH0pID0+IHtcbiAgICBjb25zdCB7IGRlY29kaW5nLCBlbmNvZGluZywgZW5jb2RlZCwgdmlkZW9EYXRhVVJMIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7IWRlY29kaW5nICYmICFlbmNvZGluZyAmJiB2aWRlb0RhdGFVUkwgJiYgKFxuICAgICAgICAgIDxQbGF5ZXJcbiAgICAgICAgICAgIHNyYz17dGhpcy5zdGF0ZS52aWRlb0RhdGFVUkx9XG4gICAgICAgICAgICB0aW1lUmFuZ2U9e3RoaXMuc3RhdGUudGltZVJhbmdlfVxuICAgICAgICAgICAgcGxheVZpZGVvPXt0aGlzLnN0YXRlLnBsYXlWaWRlb31cbiAgICAgICAgICAgIG9uUGxheWVyUGxheT17dGhpcy5oYW5kbGVQbGF5ZXJQbGF5fVxuICAgICAgICAgICAgb25QbGF5ZXJQYXVzZT17dGhpcy5oYW5kbGVQbGF5ZXJQYXVzZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICB7c2hvd1RyaW1tZXIgJiYgKFxuICAgICAgICAgIDxUcmltbWVyXG4gICAgICAgICAgICBzaG93VHJpbW1lcj17dGhpcy5zdGF0ZS52aWRlb0RhdGFVUkx9XG4gICAgICAgICAgICBkdXJhdGlvbj17dGhpcy53ZWJWaWRlby52aWRlb0RhdGEuZHVyYXRpb259XG4gICAgICAgICAgICBvblRyaW09e3RoaXMuaGFuZGxlVmlkZW9UcmltfVxuICAgICAgICAgICAgdGltZVJhbmdlPXt0aGlzLnN0YXRlLnRpbWVSYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuXG4gICAgICAgIHshZGVjb2RpbmcgJiYgIWVuY29kaW5nICYmIHZpZGVvRGF0YVVSTCAmJiAoXG4gICAgICAgICAgPENvbnRyb2xzXG4gICAgICAgICAgICBvbkRvd25sb2FkPXt0aGlzLmhhbmRsZURvd25sb2FkVmlkZW99XG4gICAgICAgICAgICBjYW5Eb3dubG9hZD17ZW5jb2RlZH1cbiAgICAgICAgICAgIHNob3dFbmNvZGVCdG49e3RoaXMucHJvcHMuc2hvd0VuY29kZUJ0bn1cbiAgICAgICAgICAgIG9uUmVzZWxlY3RGaWxlPXt0aGlzLmhhbmRsZVJlc2VsZWN0RmlsZX1cbiAgICAgICAgICAgIG9uRW5jb2RlPXt0aGlzLmhhbmRsZUVuY29kZVZpZGVvfVxuICAgICAgICAgICAgb25QbGF5UGF1c2VDbGljaz17dGhpcy5oYW5kbGVQbGF5UGF1c2VWaWRlb31cbiAgICAgICAgICAgIHByb2Nlc3Npbmc9e2VuY29kaW5nfVxuICAgICAgICAgICAgcGxheWluZz17dGhpcy5zdGF0ZS5wbGF5VmlkZW99XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG4gIGhhbmRsZURvd25sb2FkVmlkZW8gPSAoKSA9PiB7XG4gICAgY29uc3QgYmxvYlVSTCA9IHJlYWRCbG9iVVJMKHRoaXMuc3RhdGUuZW5jb2RlZFZpZGVvKTtcbiAgICBkb3dubG9hZChibG9iVVJMLCBcInRyaW1tZWQubXA0XCIpO1xuICB9O1xuICBWaWRlb1BsYXllck5vVHJpbW1lciA9ICgpID0+IHtcbiAgICByZXR1cm4gPHRoaXMuVmlkZW9QbGF5ZXJXaXRoVHJpbW1lciAvPjtcbiAgfTtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGVjb2RpbmcsIGVuY29kaW5nLCBlbmNvZGVkLCB2aWRlb0RhdGFVUkwgfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicnZ0LW1haW4tY29udGFpbmVyXCI+XG4gICAgICAgIHtlbmNvZGVkID8gKFxuICAgICAgICAgIDx0aGlzLlZpZGVvUGxheWVyTm9UcmltbWVyIC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIHshZGVjb2RpbmcgJiYgIWVuY29kaW5nICYmICF2aWRlb0RhdGFVUkwgJiYgKFxuICAgICAgICAgICAgICA8RmlsZVBpY2tlciBvbkZpbGVTZWxlY3RlZD17dGhpcy5oYW5kbGVGaWxlU2VsZWN0ZWR9IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgeyhkZWNvZGluZyB8fCBlbmNvZGluZykgJiYgKFxuICAgICAgICAgICAgICA8U3RhdHVzPlxuICAgICAgICAgICAgICAgIDxJY29uIG5hbWU9XCJzcGluXCIgY2xhc3NOYW1lPVwicnZ0LWljb24tc3BpblwiIC8+XG4gICAgICAgICAgICAgICAge2VuY29kaW5nID8gXCJFTkNPRElORyBWSURFT1wiIDogXCJERUNPRElORyBWSURFT1wifS4uLlxuICAgICAgICAgICAgICA8L1N0YXR1cz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8dGhpcy5WaWRlb1BsYXllcldpdGhUcmltbWVyIHNob3dUcmltbWVyPXt0cnVlfSAvPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFZpZGVvVHJpbW1lcjtcbiJdLCJuYW1lcyI6WyJyZWFkRmlsZSIsImZpbGUiLCJkYXRhVHlwZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnIiLCJub29wIiwiYXJyYXlCdWZmZXJUb0Jsb2IiLCJidWZmZXIiLCJCbG9iIiwiVWludDhBcnJheSIsImJ5dGVMZW5ndGgiLCJ0eXBlIiwibmFtZSIsIkRvd25sb2FkIiwiY2xhc3NOYW1lIiwiUmVhY3QiLCJ2aWV3Qm94IiwieG1sbnMiLCJkIiwiZmlsbCIsIk11c2ljIiwiUGxheSIsImhlaWdodCIsIndpZHRoIiwiUGF1c2UiLCJSZXBsYXkiLCJTcGluIiwiSWNvbiIsInByb3BzIiwiRWwiLCJ0cmltIiwiRmlsZVBpY2tlciIsImlucHV0UmVmIiwidXNlUmVmIiwiaGFuZGxlRmlsZUNoYW5nZSIsInVzZUNhbGxiYWNrIiwiZSIsInRhcmdldCIsImZpbGVzIiwibGVuZ3RoIiwidmlkZW8iLCJpbmRleE9mIiwiaXNWaWRlbyIsImFsZXJ0Iiwib25GaWxlU2VsZWN0ZWQiLCJoYW5kbGVDb250YWluZXJDbGlja2VkIiwiY3VycmVudCIsImNsaWNrIiwib25DbGljayIsImFjY2VwdCIsIm9uQ2hhbmdlIiwicmVmIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwic3RyaW5nIiwiU3RhdHVzIiwiY2hpbGRyZW4iLCJzcmMiLCJvcHRzIiwiY2IiLCJoZWFkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0IiwiYXN5bmMiLCJhdHRycyIsImF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVzIiwidGV4dCIsInN0ZE9uRW5kIiwiaWVPbkVuZCIsImFwcGVuZENoaWxkIiwidGhpcyIsIkVycm9yIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwidmFsdWUiLCJvcHRpb25zIiwiY2xvbmUiLCJpc01lcmdlYWJsZU9iamVjdCIsImRlZXBtZXJnZSIsInZhbCIsIkFycmF5IiwiaXNBcnJheSIsImVtcHR5VGFyZ2V0IiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJzb3VyY2UiLCJjb25jYXQiLCJtYXAiLCJlbGVtZW50IiwiZ2V0S2V5cyIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJzeW1ib2wiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHMiLCJtZXJnZU9iamVjdCIsImRlc3RpbmF0aW9uIiwiZm9yRWFjaCIsImtleSIsImN1c3RvbU1lcmdlIiwiZ2V0TWVyZ2VGdW5jdGlvbiIsImFycmF5TWVyZ2UiLCJzb3VyY2VJc0FycmF5IiwidGFyZ2V0SXNBcnJheSIsInNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2giLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJtb2R1bGUiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIiQkdHlwZW9mIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJTeW1ib2wiLCJmb3IiLCJhbGwiLCJhcnJheSIsInJlZHVjZSIsInByZXYiLCJuZXh0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidW5kZWZpbmVkIiwib2JqIiwiX3Byb3BUeXBlczIiLCJfcHJvcFR5cGVzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJib29sIiwibnVtYmVyIiwib25lT2ZUeXBlIiwic2hhcGUiLCJvYmplY3QiLCJmdW5jIiwidXJsIiwicGxheWluZyIsImxvb3AiLCJjb250cm9scyIsInZvbHVtZSIsIm11dGVkIiwicGxheWJhY2tSYXRlIiwic3R5bGUiLCJwcm9ncmVzc0ludGVydmFsIiwicGxheXNpbmxpbmUiLCJwaXAiLCJsaWdodCIsIndyYXBwZXIiLCJyZW5kZXIiLCJpc1JlcXVpcmVkIiwiY29uZmlnIiwic291bmRjbG91ZCIsInByZWxvYWQiLCJ5b3V0dWJlIiwicGxheWVyVmFycyIsImVtYmVkT3B0aW9ucyIsImZhY2Vib29rIiwiYXBwSWQiLCJkYWlseW1vdGlvbiIsInBhcmFtcyIsInZpbWVvIiwicGxheWVyT3B0aW9ucyIsImF0dHJpYnV0ZXMiLCJ0cmFja3MiLCJmb3JjZVZpZGVvIiwiZm9yY2VBdWRpbyIsImZvcmNlSExTIiwiZm9yY2VEQVNIIiwiaGxzT3B0aW9ucyIsImhsc1ZlcnNpb24iLCJkYXNoVmVyc2lvbiIsIndpc3RpYSIsIm1peGNsb3VkIiwidHdpdGNoIiwib25SZWFkeSIsIm9uU3RhcnQiLCJvblBsYXkiLCJvblBhdXNlIiwib25CdWZmZXIiLCJvbkJ1ZmZlckVuZCIsIm9uRW5kZWQiLCJvbkVycm9yIiwib25EdXJhdGlvbiIsIm9uU2VlayIsIm9uUHJvZ3Jlc3MiLCJvbkVuYWJsZVBJUCIsIm9uRGlzYWJsZVBJUCIsInZpc3VhbCIsImJ1eWluZyIsImxpa2luZyIsImRvd25sb2FkIiwic2hhcmluZyIsInNob3dfY29tbWVudHMiLCJzaG93X3BsYXljb3VudCIsInNob3dpbmZvIiwicmVsIiwiaXZfbG9hZF9wb2xpY3kiLCJtb2Rlc3RicmFuZGluZyIsImFwaSIsImVuZHNjcmVlbi1lbmFibGUiLCJhdXRvcGF1c2UiLCJieWxpbmUiLCJwb3J0cmFpdCIsInRpdGxlIiwiaGlkZV9jb3ZlciIsIl90eXBlb2YiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJpIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJkb25lIiwicHVzaCIsInNsaWNlSXRlcmF0b3IiLCJUeXBlRXJyb3IiLCJwYXJzZVRpbWVQYXJhbSIsIk1BVENIX1NUQVJUX1FVRVJZIiwiTUFUQ0hfRU5EX1FVRVJZIiwiTWF0aCIsInJhbmRvbSIsInN1YnN0ciIsImpvaW4iLCJzZGtHbG9iYWwiLCJzZGtSZWFkeSIsImFyZ3VtZW50cyIsImlzTG9hZGVkIiwiZmV0Y2hTY3JpcHQiLCJfbG9hZFNjcmlwdDIiLCJ3aW5kb3ciLCJyZXNvbHZlcyIsIm9uTG9hZGVkIiwic2RrIiwicHJldmlvdXNPblJlYWR5IiwiZGVmYXVsdFByb3BzIiwic2hvd1dhcm5pbmciLCJfZGVlcG1lcmdlMiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJfcHJvcHMiLCJERVBSRUNBVEVEX0NPTkZJR19QUk9QUyIsInAiLCJyZXBsYWNlIiwiX2RlZmluZVByb3BlcnR5IiwibWVzc2FnZSIsImNvbnNvbGUiLCJ3YXJuIiwiX3JlZiIsIl9sZW4iLCJhcnJheXMiLCJfa2V5Iiwib21pdEtleXMiLCJhcHBseSIsIm91dHB1dCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsIm1ldGhvZCIsIl9wbGF5ZXIiLCJwbGF5ZXIiLCJkaXNwbGF5TmFtZSIsIl9sZW4yIiwiYXJncyIsIl9rZXkyIiwiaXNPYmplY3QiLCJpc0VxdWFsIiwiYSIsImIiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJNZWRpYVN0cmVhbSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfbG9hZFNjcmlwdCIsIl9kZWVwbWVyZ2UiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJNQVRDSF9TVEFSVF9TVEFNUCIsIk1BVENIX05VTUVSSUMiLCJwYXR0ZXJuIiwibWF0Y2giLCJzdGFtcCIsInNlY29uZHMiLCJleGVjIiwiX2FycmF5MiIsImNvdW50IiwicGVyaW9kIiwicGFyc2VJbnQiLCJwYXJzZVRpbWVTdHJpbmciLCJ0ZXN0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJoYXNPd25Qcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJfcmVhY3QyIiwiX3JlYWN0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJQbGF5ZXIiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsIkNvbXBvbmVudCIsIm1vdW50ZWQiLCJsb2FkIiwicHJvZ3Jlc3MiLCJjbGVhclRpbWVvdXQiLCJwcm9ncmVzc1RpbWVvdXQiLCJkdXJhdGlvbkNoZWNrVGltZW91dCIsImlzUmVhZHkiLCJzdG9wIiwiZGlzYWJsZVBJUCIsIm5leHRQcm9wcyIsIl90aGlzMiIsIl91dGlscyIsImlzTG9hZGluZyIsImxvYWRPblJlYWR5Iiwic3RhcnRPblBsYXkiLCJvbkR1cmF0aW9uQ2FsbGVkIiwiaXNQbGF5aW5nIiwicGxheSIsInBhdXNlIiwiZW5hYmxlUElQIiwic2V0Vm9sdW1lIiwibXV0ZSIsInVubXV0ZSIsInNldFRpbWVvdXQiLCJzZXRQbGF5YmFja1JhdGUiLCJzZXRMb29wIiwiZ2V0RHVyYXRpb24iLCJnZXRDdXJyZW50VGltZSIsImdldFNlY29uZHNMb2FkZWQiLCJhbW91bnQiLCJfdGhpczMiLCJzZWVrT25QbGF5IiwiZHVyYXRpb24iLCJzZWVrVG8iLCJhY3RpdmVQbGF5ZXIiLCJfdGVtcCIsIl90aGlzIiwiaW5zdGFuY2UiLCJfY2xhc3NDYWxsQ2hlY2siLCJnZXRQcm90b3R5cGVPZiIsIl9pbml0aWFsaXNlUHJvcHMiLCJfcHJvcHM2IiwiX3RoaXM0IiwiZ2V0SW50ZXJuYWxQbGF5ZXIiLCJwbGF5ZWRTZWNvbmRzIiwibG9hZGVkU2Vjb25kcyIsInBsYXllZCIsImxvYWRlZCIsInByZXZQbGF5ZWQiLCJwcmV2TG9hZGVkIiwicHJvZ3Jlc3NGcmVxdWVuY3kiLCJfcHJvcHMyIiwib25EdXJhdGlvbkNoZWNrIiwiX3Byb3BzMyIsIl9wcm9wczQiLCJsb29wT25FbmRlZCIsIl9wcm9wczUiLCJfY2xhc3MiLCJfdGVtcDIiLCJTaW5nbGVQbGF5ZXIiLCJnZXRDb25maWciLCJmcmFjdGlvbiIsIl9jb25maWckZmlsZSIsInNraXBDYW5QbGF5IiwiY2FuUGxheSIsIldyYXBwZXIiLCJvdGhlclByb3BzIiwib21pdCIsIlNVUFBPUlRFRF9QUk9QUyIsIl9QbGF5ZXIyIiwiX1BsYXllciIsIl9zaW5nbGVQbGF5ZXIyIiwiX3NpbmdsZVBsYXllciIsIk1BVENIX1VSTCIsIk1BVENIX1BMQVlMSVNUIiwicGFyc2VQbGF5bGlzdCIsIl91cmwkbWF0Y2giLCJsaXN0VHlwZSIsImxpc3QiLCJZb3VUdWJlIiwiX29uRXJyb3IiLCJfY29uZmlnJHlvdXR1YmUiLCJpZCIsImxvYWRQbGF5bGlzdCIsImN1ZVZpZGVvQnlJZCIsInZpZGVvSWQiLCJzdGFydFNlY29uZHMiLCJwYXJzZVN0YXJ0VGltZSIsInN0YXJ0IiwiZW5kU2Vjb25kcyIsInBhcnNlRW5kVGltZSIsImVuZCIsImdldFNESyIsIllUIiwidGhlbiIsImNvbnRhaW5lciIsImF1dG9wbGF5Iiwib3JpZ2luIiwibG9jYXRpb24iLCJldmVudHMiLCJvblN0YXRlQ2hhbmdlIiwiZXZlbnQiLCJkYXRhIiwiY2FsbFBsYXllciIsImJvZHkiLCJjb250YWlucyIsInJhdGUiLCJfcmVmMiIsIl90aGlzJHByb3BzIiwiX3dpbmRvdyRTREtfR0xPQkFMJFBsIiwiUGxheWVyU3RhdGUiLCJQTEFZSU5HIiwiUEFVU0VEIiwiQlVGRkVSSU5HIiwiRU5ERUQiLCJDVUVEIiwiaXNQbGF5bGlzdCIsIlNvdW5kQ2xvdWQiLCJTQyIsImlmcmFtZSIsIl9TQyRXaWRnZXQkRXZlbnRzIiwiV2lkZ2V0IiwiRXZlbnRzIiwiUExBWSIsIlBMQVlfUFJPR1JFU1MiLCJQQVVTRSIsIkZJTklTSCIsIkVSUk9SIiwiYmluZCIsImN1cnJlbnRUaW1lIiwiY3VycmVudFBvc2l0aW9uIiwiZnJhY3Rpb25Mb2FkZWQiLCJsb2FkZWRQcm9ncmVzcyIsImNhbGxiYWNrIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZnJhbWVCb3JkZXIiLCJhbGxvdyIsIk1BVENIX0ZJTEVfVVJMIiwiVmltZW8iLCJyZWFkeSIsInF1ZXJ5U2VsZWN0b3IiLCJvbiIsInJlZnJlc2hEdXJhdGlvbiIsIl9yZWYzIiwic2Vjb25kc0xvYWRlZCIsInByb21pc2UiLCJvdmVyZmxvdyIsImJhY2tncm91bmRDb2xvciIsIlNES19VUkwiLCJTREtfR0xPQkFMX1JFQURZIiwiRmFjZWJvb2siLCJGQiIsIlhGQk1MIiwicGFyc2UiLCJpbml0IiwieGZibWwiLCJ2ZXJzaW9uIiwiRXZlbnQiLCJzdWJzY3JpYmUiLCJtc2ciLCJwbGF5ZXJJRCIsImdldEVsZW1lbnRCeUlkIiwidmlzaWJpbGl0eSIsImRhdGEtaHJlZiIsImRhdGEtYXV0b3BsYXkiLCJkYXRhLWFsbG93ZnVsbHNjcmVlbiIsImRhdGEtY29udHJvbHMiLCJyYW5kb21TdHJpbmciLCJTdHJlYW1hYmxlIiwicGxheWVyanMiLCJwZXJjZW50Iiwic2Nyb2xsaW5nIiwiYWxsb3dGdWxsU2NyZWVuIiwiV2lzdGlhIiwiX29uUmVhZHkiLCJfd3EiLCJnZXRJRCIsImF1dG9QbGF5Iiwic2lsZW50QXV0b1BsYXkiLCJjb250cm9sc1Zpc2libGVPbkxvYWQiLCJ1bmJpbmQiLCJNQVRDSF9WSURFT19VUkwiLCJNQVRDSF9DSEFOTkVMX1VSTCIsIlR3aXRjaCIsImlzQ2hhbm5lbCIsInNldENoYW5uZWwiLCJzZXRWaWRlbyIsImNoYW5uZWwiLCJfVHdpdGNoJFBsYXllciIsIlJFQURZIiwiT05MSU5FIiwiT0ZGTElORSIsImFkZEV2ZW50TGlzdGVuZXIiLCJEYWlseU1vdGlvbiIsIkRNIiwiYXBpcmVhZHkiLCJzZWVrZWQiLCJ2aWRlb19lbmQiLCJkdXJhdGlvbmNoYW5nZSIsIm9uRHVyYXRpb25DaGFuZ2UiLCJ3YWl0aW5nIiwiZXJyb3IiLCJidWZmZXJlZFRpbWUiLCJNaXhjbG91ZCIsIlBsYXllcldpZGdldCIsImVuZGVkIiwicXVlcnkiLCJxdWVyeVN0cmluZyIsImZlZWQiLCJJT1MiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJNU1N0cmVhbSIsIkFVRElPX0VYVEVOU0lPTlMiLCJWSURFT19FWFRFTlNJT05TIiwiSExTX0VYVEVOU0lPTlMiLCJEQVNIX0VYVEVOU0lPTlMiLCJNQVRDSF9EUk9QQk9YX1VSTCIsIml0ZW0iLCJpc01lZGlhU3RyZWFtIiwiRmlsZVBsYXllciIsImFkZExpc3RlbmVycyIsInNob3VsZFVzZUF1ZGlvIiwicmVtb3ZlTGlzdGVuZXJzIiwicHJldlByb3BzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInBvc3RlciIsIl9wcm9wcyRjb25maWckZmlsZSIsInNob3VsZFVzZUhMUyIsIkhscyIsImhscyIsImxvYWRTb3VyY2UiLCJhdHRhY2hNZWRpYSIsInNob3VsZFVzZURBU0giLCJkYXNoanMiLCJkYXNoIiwiTWVkaWFQbGF5ZXIiLCJpbml0aWFsaXplIiwiZ2V0RGVidWciLCJzZXRMb2dUb0Jyb3dzZXJDb25zb2xlIiwic3JjT2JqZWN0IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmVtb3ZlQXR0cmlidXRlIiwiZGVzdHJveSIsInJlc2V0IiwicmVxdWVzdFBpY3R1cmVJblBpY3R1cmUiLCJwaWN0dXJlSW5QaWN0dXJlRWxlbWVudCIsImV4aXRQaWN0dXJlSW5QaWN0dXJlIiwic2Vla2FibGUiLCJJbmZpbml0eSIsImJ1ZmZlcmVkIiwidXNlSExTIiwidXNlREFTSCIsIkVsZW1lbnQiLCJnZXRTb3VyY2UiLCJyZW5kZXJTb3VyY2VFbGVtZW50IiwicmVuZGVyVHJhY2siLCJpbmRleCIsInRyYWNrIiwiY2FuRW5hYmxlUElQIiwicGljdHVyZUluUGljdHVyZUVuYWJsZWQiLCJfWW91VHViZSIsIl9Tb3VuZENsb3VkIiwiX1ZpbWVvIiwiX0ZhY2Vib29rIiwiX1N0cmVhbWFibGUiLCJfV2lzdGlhIiwiX1R3aXRjaCIsIl9EYWlseU1vdGlvbiIsIl9NaXhjbG91ZCIsIl9GaWxlUGxheWVyIiwiSUNPTl9TSVpFIiwiUHJldmlldyIsImZldGNoSW1hZ2UiLCJzZXRTdGF0ZSIsImltYWdlIiwiZmV0Y2giLCJyZXNwb25zZSIsImpzb24iLCJ0aHVtYm5haWxfdXJsIiwic3RhdGUiLCJmbGV4Q2VudGVyIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInN0eWxlcyIsInByZXZpZXciLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kU2l6ZSIsImJhY2tncm91bmRQb3NpdGlvbiIsImN1cnNvciIsInNoYWRvdyIsImJhY2tncm91bmQiLCJib3JkZXJSYWRpdXMiLCJwbGF5SWNvbiIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJDb2xvciIsIm1hcmdpbkxlZnQiLCJwbGF5ZXJzIiwiUFJFTE9BRF9QTEFZRVJTIiwiY29uZmlnS2V5IiwiQ29udHJvbHMiLCJvblBsYXlQYXVzZUNsaWNrIiwib25SZXNlbGVjdEZpbGUiLCJwcm9jZXNzaW5nIiwib25FbmNvZGUiLCJzaG93RW5jb2RlQnRuIiwiY2FuRG93bmxvYWQiLCJvbkRvd25sb2FkIiwiZ2V0IiwiX3BsYXllcnMyIiwiX3BsYXllcnMiLCJfUGxheWVyNSIsIl9QbGF5ZXI0IiwiX1ByZXZpZXcyIiwiX1ByZXZpZXciLCJfcHJlbG9hZDIiLCJfcHJlbG9hZCIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJmcm9tIiwiY3VzdG9tUGxheWVycyIsIlJlYWN0UGxheWVyIiwibmV4dFN0YXRlIiwic2hvd1ByZXZpZXciLCJhY3RpdmVQbGF5ZXJSZWYiLCJnZXRBY3RpdmVQbGF5ZXIiLCJyZW5kZXJlZEFjdGl2ZVBsYXllciIsInJlbmRlckFjdGl2ZVBsYXllciIsInByZWxvYWRQbGF5ZXJzIiwic29ydCIsInNvcnRQbGF5ZXJzIiwib25DbGlja1ByZXZpZXciLCJ3cmFwcGVyUmVmIiwiYWRkQ3VzdG9tUGxheWVyIiwicmVtb3ZlQ3VzdG9tUGxheWVycyIsIl9hcnIyIiwiX2kyIiwiX2FycjMiLCJfaTMiLCJfUGxheWVyMyIsIlZpZGVvUGxheWVyIiwicGxheVZpZGVvIiwic3RhcnRUaW1lUmFuZ2UiLCJ0aW1lUmFuZ2UiLCJwbGF5ZWRTZWNvbmRzSXNHcmVhdGVyVGhhbkVuZFRpbWUiLCJvblBsYXllclByb2dyZXNzIiwib25QbGF5ZXJQYXVzZSIsIm9uUGxheWVyUGxheSIsIm5ld1Byb3BzIiwibmV3VGltZVJhbmdlIiwib2xkVGltZVJhbmdlIiwiY2FuU2VlayIsImxvZyIsInRvRml4ZWQiLCJvbkNvbnRleHRNZW51IiwiaGFuZGxlT25QYXVzZSIsImhhbmRsZU9uUGxheSIsImhhbmRsZVBsYXllclByb2dyZXNzIiwiZWwiLCJtYXJnaW4iLCJkaXNwbGF5U2Vjb25kcyIsIkRyYWdnZXIiLCJfc2NyZWVuWCIsInNjcmVlblgiLCJfc2NyZWVuWSIsInNjcmVlblkiLCJfb3giLCJ4IiwiX295IiwieSIsImhhbmRsZU1vdXNlTW92ZSIsImhhbmRsZU1vdXNlVXAiLCJvbkRyYWciLCJvbkRyYWdTdG9wIiwiUHVyZUNvbXBvbmVudCIsIm9uTW91c2VEb3duIiwiaGFuZGxlTW91c2VEb3duIiwibGVmdCIsInRvcCIsIlRyaW1tZXJPdmVyTGF5IiwicmlnaHQiLCJUaW1lU3RhbXAiLCJmb3JtYXRlZCIsImZsb29yIiwicm91bmQiLCJmb3JtYXRTZWNvbmRzIiwidGltZSIsIm51bSIsInNsaWNlIiwibGVmdFplcm8iLCJUcmltbWVyIiwicG9zIiwid2lkdGhEdXJhdGlvblJhdGlvIiwiY29udGFpbmVyV2lkdGgiLCJwb3MyVGltZSIsImtlZXBJblJhbmdlIiwib25TdGFydFRpbWVDaGFuZ2UiLCJvbkVuZFRpbWVDaGFuZ2UiLCJvbkdldERhdGEiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwidGltZTJwb3MiLCJGcmFnbWVudCIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZURyYWdTdG9wIiwiaGFuZGxlRHJhZ0VuZCIsImdldFRyaW1tZXJXaWR0aCIsIlZpZGVvVHJpbW1lciIsInRyaW1tZXJIYW5kbGVyIiwib25UcmltIiwiY29udGFpbmVyUmVmIiwic2hvd1RyaW1tZXIiLCJoYW5kbGVTdGFydFRpbWVDaGFuZ2UiLCJoYW5kbGVFbmRUaW1lQ2hhbmdlIiwiaGFuZGxlR2V0VHJpbURhdGEiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJFdmVudEhhbmRsZXJzIiwiRXZlbnRFbWl0dGVyIiwiJGdldE1heExpc3RlbmVycyIsInRoYXQiLCJfbWF4TGlzdGVuZXJzIiwiZGVmYXVsdE1heExpc3RlbmVycyIsIl9hZGRMaXN0ZW5lciIsImxpc3RlbmVyIiwicHJlcGVuZCIsIm0iLCJleGlzdGluZyIsIl9ldmVudHMiLCJuZXdMaXN0ZW5lciIsImVtaXQiLCJfZXZlbnRzQ291bnQiLCJ1bnNoaWZ0Iiwid2FybmVkIiwidyIsImVtaXR0ZXIiLCJlbWl0V2FybmluZyIsIl9vbmNlV3JhcCIsImZpcmVkIiwiZyIsInJlbW92ZUxpc3RlbmVyIiwibGlzdGVuZXJDb3VudCIsImV2bGlzdGVuZXIiLCJhcnJheUNsb25lIiwiY29weSIsInVzaW5nRG9tYWlucyIsImRvbWFpbiIsImFjdGl2ZSIsIkRvbWFpbiIsInNldE1heExpc3RlbmVycyIsIm4iLCJpc05hTiIsImdldE1heExpc3RlbmVycyIsImVyIiwiaGFuZGxlciIsImxlbiIsImRvRXJyb3IiLCJkb21haW5FbWl0dGVyIiwiZG9tYWluVGhyb3duIiwiY29udGV4dCIsImlzRm4iLCJsaXN0ZW5lcnMiLCJlbWl0Tm9uZSIsImFyZzEiLCJlbWl0T25lIiwiYXJnMiIsImVtaXRUd28iLCJhcmczIiwiZW1pdFRocmVlIiwiZW1pdE1hbnkiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsIm9uY2UiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwicG9zaXRpb24iLCJvcmlnaW5hbExpc3RlbmVyIiwiayIsInBvcCIsInNwbGljZU9uZSIsInJlbW92ZUFsbExpc3RlbmVycyIsInJldCIsInVud3JhcExpc3RlbmVycyIsImV2ZW50TmFtZXMiLCJSZWZsZWN0Iiwib3duS2V5cyIsIndvcmtlckZpbGUiLCJpbXBvcnRTY3JpcHRzIiwibm93IiwiRGF0ZSIsInByaW50IiwicG9zdE1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJNb2R1bGUiLCJwcmludEVyciIsIlRPVEFMX01FTU9SWSIsImZmbXBlZ19ydW4iLCJ0b3RhbFRpbWUiLCJ0IiwibyIsIldvcmtlciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2dldFByb3RvdHlwZU9mIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIl9zZXRQcm90b3R5cGVPZiIsIndvcmtlckNsaWVudCIsIkZGTVBFR1dlYndvcmtlckNsaWVudCIsImZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImNvbW1hbmQiLCJjb252ZXJ0SW5wdXRGaWxlVG9BcnJheUJ1ZmZlciIsImFycmF5QnVmZmVyIiwid29ya2VySXNSZWFkeSIsImZpbGVuYW1lIiwiaW5wdXRDb21tYW5kIiwid29ya2VyIiwic3BsaXQiLCJmaWxlVHlwZSIsImluY2x1ZGVzIiwiaW5pdFdlYldvcmtlciIsIldvcmtlckZpbGUiLCJpbnB1dEZpbGUiLCJzaXplIiwiaW5wdXRGaWxlRXhpc3RzIiwicmVhZEZpbGVBc0J1ZmZlckFycmF5Iiwic2V0IiwiX3dvcmtlciIsIl9pbnB1dEZpbGUiLCJ6ZXJvRmlsbCIsInBhZCIsIkhPVVIiLCJNSU5VVEUiLCJTRUNPTkQiLCJUSU1FX0ZPUk1BVF9FUlJNU0ciLCJmcm9tTXMiLCJtcyIsImZvcm1hdCIsIk51bWJlciIsImFic01zIiwiYWJzIiwic2hvd01zIiwic2hvd1NjIiwic2hvd0hyIiwidG9Mb3dlckNhc2UiLCJtaWxpc2Vjb25kcyIsImhvdXJzIiwiaGgiLCJtbSIsIm1pbnV0ZXMiLCJzcyIsInNzcyIsIm5lZ2F0aXZlIiwiZm9ybWF0VGltZSIsIldlYlZpZGVvIiwidmlkZW9GaWxlIiwicyIsImZyb21TIiwicnVuQ29tbWFuZCIsIl92aWRlb0ZpbGUiLCJfdmlkZW9CdWZmZXIiLCJ2aWRlb0J1ZmZlciIsImJsb2IiLCJjb252ZXJ0QnVmZmVyVG9CbG9iIiwiZGF0YVVSTCIsInJlYWRBc0RhdGFVUkwiLCJ2aWRlb09iamVjdFVybCIsInIiLCJfdmlkZW9EYXRhIiwiY2h1bmtzIiwidHlwZWRCdWZmZXIiLCJzdGFydENodW5rIiwiX2J1ZmZlciIsImZwcyIsInNlZWtSZXNvbHZlIiwiY2FudmFzIiwiZ2V0Q29udGV4dCIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsImgiLCJmcmFtZXMiLCJpbnRlcnZhbCIsImRyYXdJbWFnZSIsImJhc2U2NEltYWdlRGF0YSIsInRvRGF0YVVSTCIsIlJlYWN0VmlkZW9UcmltbWVyIiwidmlkZW9CbG9iIiwiZGVjb2RlVmlkZW9GaWxlIiwib25WaWRlb0VuY29kZSIsImVuY29kaW5nIiwiZW5jb2RlZCIsImVuY29kZWRWaWRlbyIsImRlY29kaW5nIiwidmlkZW9EYXRhVVJMIiwidmlkZW9GcmFtZXMiLCJpc0RlY29kaW5nIiwidXBkYXRlSXNFeHRyYWN0aW5nRnJhbWUiLCJ1cGRhdGVJc0RlY29kaW5nIiwidXBkYXRlVmlkZW9EdXJhdGlvbiIsImRvbmVDQiIsIndlYlZpZGVvIiwiZGVjb2RlIiwidXBkYXRlVmlkZW9EYXRhVVJMIiwidmlkZW9EYXRhIiwidGltZURpZmZlcmVuY2UiLCJ0cmltVmlkZW8iLCJpc0V4dHJhY3RpbmdGcmFtZSIsImhhbmRsZVBsYXllclBsYXkiLCJoYW5kbGVQbGF5ZXJQYXVzZSIsImhhbmRsZVZpZGVvVHJpbSIsImhhbmRsZURvd25sb2FkVmlkZW8iLCJoYW5kbGVSZXNlbGVjdEZpbGUiLCJoYW5kbGVFbmNvZGVWaWRlbyIsImhhbmRsZVBsYXlQYXVzZVZpZGVvIiwibGluayIsImhyZWYiLCJyZWFkQmxvYlVSTCIsIlZpZGVvUGxheWVyV2l0aFRyaW1tZXIiLCJoYW5kbGVGRk1QRUdTdGRvdXQiLCJoYW5kbGVGRk1QRUdSZWFkeSIsImhhbmRsZUZGTVBFR0ZpbGVSZWNlaXZlZCIsImhhbmRsZUZGTVBFR0RvbmUiLCJWaWRlb1BsYXllck5vVHJpbW1lciIsImhhbmRsZUZpbGVTZWxlY3RlZCJdLCJtYXBwaW5ncyI6Im91REFrQndCLFNBQVhBLEVBQVlDLEVBQUQsT0FBT0MsK0JBQVAsRUFBQSxFQUFrQixxQkFDeEMsSUFBSUMsUUFBUSxTQUFDQyxFQUFTQyxPQUNkQyxFQUFTLElBQUlDLFdBQ25CRCxFQUFPLFNBQVdKLEdBQVVELEdBQzVCSyxFQUFPRSxPQUFTLGtCQUFNSixFQUFRRSxFQUFPRyxTQUNyQ0gsRUFBT0ksUUFBVSxTQUFBQyxVQUFPTixFQUFPTSxNQTJDZixTQUFQQyxLQUVvQixTQUFwQkMsRUFBb0JDLFVBQy9CLElBQUlDLEtBQUssQ0FBQyxJQUFJQyxXQUFXRixFQUFRLEVBQUdBLEVBQU9HLGFBQWMsQ0FDdkRDLEtBQU0sYUFDTkMsS0FBTSxlQ25FTyxTQUFYQyxTQUFjQyxJQUFBQSxpQkFDbEJDLHVCQUNFRCxVQUFXQSxFQUNYRSxRQUFRLFlBQ1JDLE1BQU0sOEJBRU5GLHdCQUFNRyxFQUFFLDhDQUNSSCx3QkFBTUcsRUFBRSxnQkFBZ0JDLEtBQUssVUFJbkIsU0FBUkMsU0FBV04sSUFBQUEsaUJBQ2ZDLHVCQUNFRCxVQUFXQSxFQUNYRSxRQUFRLFlBQ1JDLE1BQU0sOEJBRU5GLHdCQUFNRyxFQUFFLGdCQUFnQkMsS0FBSyxTQUM3Qkosd0JBQU1HLEVBQUUsc0lBSUMsU0FBUEcsU0FBVVAsSUFBQUEsaUJBQ2RDLHVCQUNFRCxVQUFXQSxFQUNYUSxPQUFPLEtBQ1BOLFFBQVEsWUFDUk8sTUFBTSxLQUNOTixNQUFNLDhCQUVORix3QkFBTUcsRUFBRSxnQkFBZ0JDLEtBQUssU0FDN0JKLHdCQUFNRyxFQUFFLHlKQUlFLFNBQVJNLFNBQVdWLElBQUFBLGlCQUNmQyx1QkFDRUQsVUFBV0EsRUFDWFEsT0FBTyxLQUNQTixRQUFRLFlBQ1JPLE1BQU0sS0FDTk4sTUFBTSw4QkFFTkYsd0JBQU1HLEVBQUUsZ0JBQWdCQyxLQUFLLFNB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
